{"version":3,"file":"manager-registry.js","sources":["../../src/core/manager-registry.ts"],"sourcesContent":["import type { Logger } from '../types'\n\n// 管理器初始化状态\nexport interface ManagerStatus {\n  name: string\n  initialized: boolean\n  initTime?: number\n  dependencies: string[]\n  dependents: string[]\n  lazy: boolean\n  error?: Error\n}\n\n// 管理器注册表\nexport class ManagerRegistry {\n  private managers = new Map<string, ManagerStatus>()\n  private initOrder: string[] = []\n  private logger?: Logger\n\n  constructor(logger?: Logger) {\n    this.logger = logger\n  }\n\n  // 注册管理器\n  register(name: string, dependencies: string[] = [], lazy = false): void {\n    if (this.managers.has(name)) {\n      this.logger?.warn(`Manager \"${name}\" already registered`)\n      return\n    }\n\n    const status: ManagerStatus = {\n      name,\n      initialized: false,\n      dependencies,\n      dependents: [],\n      lazy,\n    }\n\n    this.managers.set(name, status)\n\n    // 更新依赖关系\n    dependencies.forEach(dep => {\n      const depStatus = this.managers.get(dep)\n      if (depStatus) {\n        depStatus.dependents.push(name)\n      }\n    })\n\n    this.logger?.debug(`Manager \"${name}\" registered`, {\n      dependencies,\n      lazy,\n    })\n  }\n\n  // 标记管理器为已初始化\n  markInitialized(name: string, error?: Error): void {\n    const status = this.managers.get(name)\n    if (!status) {\n      this.logger?.warn(`Manager \"${name}\" not found in registry`)\n      return\n    }\n\n    status.initialized = !error\n    status.initTime = Date.now()\n    status.error = error\n\n    if (!error) {\n      this.initOrder.push(name)\n      this.logger?.debug(`Manager \"${name}\" initialized successfully`)\n    } else {\n      this.logger?.error(`Manager \"${name}\" initialization failed`, error)\n    }\n  }\n\n  // 检查依赖是否满足\n  checkDependencies(name: string): { satisfied: boolean; missing: string[] } {\n    const status = this.managers.get(name)\n    if (!status) {\n      return { satisfied: false, missing: [name] }\n    }\n\n    const missing: string[] = []\n    for (const dep of status.dependencies) {\n      const depStatus = this.managers.get(dep)\n      if (!depStatus || !depStatus.initialized) {\n        missing.push(dep)\n      }\n    }\n\n    return {\n      satisfied: missing.length === 0,\n      missing,\n    }\n  }\n\n  // 获取初始化顺序建议\n  getInitializationOrder(): string[] {\n    const order: string[] = []\n    const visited = new Set<string>()\n    const visiting = new Set<string>()\n\n    const visit = (name: string): void => {\n      if (visited.has(name)) return\n      if (visiting.has(name)) {\n        throw new Error(`Circular dependency detected involving \"${name}\"`)\n      }\n\n      visiting.add(name)\n      const status = this.managers.get(name)\n      if (status && !status.lazy) {\n        // 先访问依赖\n        status.dependencies.forEach(dep => {\n          const depStatus = this.managers.get(dep)\n          if (depStatus && !depStatus.lazy) {\n            visit(dep)\n          }\n        })\n        order.push(name)\n      }\n      visiting.delete(name)\n      visited.add(name)\n    }\n\n    // 访问所有非懒加载的管理器\n    for (const [name, status] of this.managers) {\n      if (!status.lazy) {\n        visit(name)\n      }\n    }\n\n    return order\n  }\n\n  // 获取管理器状态\n  getStatus(name: string): ManagerStatus | undefined {\n    return this.managers.get(name)\n  }\n\n  // 获取所有管理器状态\n  getAllStatus(): ManagerStatus[] {\n    return Array.from(this.managers.values())\n  }\n\n  // 获取初始化统计\n  getInitializationStats(): {\n    total: number\n    initialized: number\n    failed: number\n    lazy: number\n    initOrder: string[]\n    averageInitTime: number\n  } {\n    const all = this.getAllStatus()\n    const initialized = all.filter(s => s.initialized)\n    const failed = all.filter(s => s.error)\n    const lazy = all.filter(s => s.lazy)\n\n    const initTimes = initialized\n      .map(s => s.initTime)\n      .filter(t => t !== undefined) as number[]\n\n    const averageInitTime =\n      initTimes.length > 0\n        ? initTimes.reduce((sum, time) => sum + time, 0) / initTimes.length\n        : 0\n\n    return {\n      total: all.length,\n      initialized: initialized.length,\n      failed: failed.length,\n      lazy: lazy.length,\n      initOrder: [...this.initOrder],\n      averageInitTime,\n    }\n  }\n\n  /**\n   * 验证依赖关系图的完整性\n   */\n  validateDependencyGraph(): {\n    valid: boolean\n    errors: string[]\n    warnings?: string[]\n  } {\n    const errors: string[] = []\n    const warnings: string[] = []\n\n    // 检查循环依赖\n    try {\n      this.getInitializationOrder()\n    } catch (error) {\n      errors.push((error as Error).message)\n    }\n\n    // 检查缺失的依赖\n    for (const [name, status] of this.managers) {\n      for (const dep of status.dependencies) {\n        if (!this.managers.has(dep)) {\n          errors.push(`Manager \"${name}\" depends on missing manager \"${dep}\"`)\n        }\n      }\n    }\n\n    // 检查孤立的管理器\n    for (const [name, status] of this.managers) {\n      if (status.dependencies.length === 0 && status.dependents.length === 0) {\n        warnings.push(`Manager \"${name}\" has no dependencies or dependents`)\n      }\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors,\n      warnings,\n    }\n  }\n\n  // 生成依赖图的可视化表示\n  generateDependencyGraph(): string {\n    let graph = 'digraph ManagerDependencies {\\n'\n    graph += '  rankdir=TB;\\n'\n    graph += '  node [shape=box];\\n\\n'\n\n    // 添加节点\n    for (const [name, status] of this.managers) {\n      const color = status.lazy ? 'lightblue' : 'lightgreen'\n      const style = status.initialized ? 'solid' : 'dashed'\n      graph += `  \"${name}\" [fillcolor=${color}, style=\"filled, ${style}\"];\\n`\n    }\n\n    graph += '\\n'\n\n    // 添加边\n    for (const [name, status] of this.managers) {\n      for (const dep of status.dependencies) {\n        graph += `  \"${dep}\" -> \"${name}\";\\n`\n      }\n    }\n\n    graph += '}\\n'\n    return graph\n  }\n\n  // 清理注册表\n  clear(): void {\n    this.managers.clear()\n    this.initOrder = []\n    this.logger?.debug('Manager registry cleared')\n  }\n}\n\n// 全局管理器注册表实例\nlet globalRegistry: ManagerRegistry | undefined\n\nexport function getGlobalManagerRegistry(): ManagerRegistry {\n  if (!globalRegistry) {\n    globalRegistry = new ManagerRegistry()\n  }\n  return globalRegistry\n}\n\nexport function setGlobalManagerRegistry(registry: ManagerRegistry): void {\n  globalRegistry = registry\n}\n\n// 管理器装饰器，用于自动注册\nexport function Manager(\n  name: string,\n  dependencies: string[] = [],\n  lazy = false\n) {\n   \n  return function <T extends new (...args: any[]) => object>(constructor: T) {\n    const registry = getGlobalManagerRegistry()\n    registry.register(name, dependencies, lazy)\n\n    return class extends constructor {\n       \n      constructor(...args: any[]) {\n        super(...args)\n        registry.markInitialized(name)\n      }\n    }\n  }\n}\n"],"names":[],"mappings":"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"}