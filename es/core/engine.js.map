{"version":3,"file":"engine.js","sources":["../../src/core/engine.ts"],"sourcesContent":["import type { CacheConfig, CacheManager } from '../cache/cache-manager'\n// 与 Engine 接口保持一致：从实现处引入这些管理器的类型\nimport type { EnvironmentManager } from '../environment/environment-manager'\nimport type { LifecycleManager } from '../lifecycle/lifecycle-manager'\nimport type { NotificationSystem } from '../notifications/notification-system';\nimport type { PerformanceManager } from '../performance/performance-manager'\n\nimport type { SecurityManager } from '../security/security-manager'\nimport type {\n  ConfigManager,\n  DirectiveManager,\n  EngineConfig,\n  ErrorManager,\n  EventManager,\n  I18nAdapter,\n  Logger,\n  LogLevel,\n  MiddlewareManager,\n  Plugin,\n  PluginManager,\n  RouterAdapter,\n  StateAdapter,\n  StateManager, ThemeAdapter\n} from '../types'\nimport type { Engine } from '../types/engine'\nimport { type App, type Component, createApp, type Directive } from 'vue'\nimport { createCacheManager } from '../cache/cache-manager'\nimport {\n  createConfigManager,\n  defaultConfigSchema,\n} from '../config/config-manager'\nimport { createDirectiveManager } from '../directives/directive-manager'\nimport { convertEngineToVueDirective } from '../directives/utils/directive-compatibility'\nimport { createEnvironmentManager } from '../environment/environment-manager'\nimport { createErrorManager } from '../errors/error-manager'\nimport { createEventManager } from '../events/event-manager'\nimport { createLifecycleManager } from '../lifecycle/lifecycle-manager'\nimport { createLogger } from '../logger/logger'\nimport { createMiddlewareManager } from '../middleware/middleware-manager'\nimport { createNotificationSystem } from '../notifications/notification-system'\nimport { createPerformanceManager } from '../performance/performance-manager'\nimport { createPluginManager } from '../plugins/plugin-manager'\nimport { createSecurityManager } from '../security/security-manager'\nimport { createStateManager } from '../state/state-manager'\nimport { ManagerRegistry } from './manager-registry'\n\n/**\n * 引擎核心实现类\n *\n * 这个类是整个引擎系统的核心，负责：\n * - 管理所有子管理器的生命周期\n * - 提供统一的插件系统\n * - 集成Vue应用\n * - 协调各个模块之间的通信\n *\n * @example\n * ```typescript\n * const engine = createEngine({\n *   debug: true,\n *   performance: { enabled: true }\n * })\n *\n * await engine.mount('#app')\n * ```\n */\nexport class EngineImpl implements Engine {\n  /** Vue应用实例 */\n  private _app?: App\n\n  /** 引擎是否已挂载 */\n  private _mounted = false\n\n  /** 引擎是否已准备就绪 */\n  private _isReady = false\n\n  /** 挂载目标元素 */\n  private _mountTarget?: string | Element\n\n  /** 配置管理器 - 负责管理所有配置项 */\n  readonly config: ConfigManager\n\n  /** 插件管理器 - 负责插件的加载、卸载和生命周期管理（懒加载） */\n  private _plugins?: PluginManager\n\n  /** 中间件管理器 - 提供请求/响应处理管道（懒加载） */\n  private _middleware?: MiddlewareManager\n\n  /** 事件管理器 - 负责事件的发布订阅机制（懒加载） */\n  private _events?: EventManager\n\n  /** 状态管理器 - 管理应用的全局状态（懒加载） */\n  private _state?: StateManager\n\n  /** 环境管理器 - 检测和管理运行环境信息 */\n  readonly environment: EnvironmentManager\n\n  /** 生命周期管理器 - 管理组件和应用的生命周期钩子 */\n  readonly lifecycle: LifecycleManager\n\n  /** 指令管理器 - 管理Vue自定义指令（懒加载） */\n  private _directives?: DirectiveManager\n\n  /** 错误管理器 - 统一的错误处理和报告（懒加载） */\n  private _errors?: ErrorManager\n\n  /** 日志记录器 - 提供分级日志记录功能 */\n  readonly logger: Logger\n\n  /** 通知管理器 - 管理用户通知和提示（懒加载） */\n  private _notifications?: NotificationSystem\n\n  /** 缓存管理器实例 - 懒加载，提供多级缓存策略 */\n  private _cache?: CacheManager\n\n  /** 性能管理器实例 - 懒加载，监控和优化应用性能 */\n  private _performance?: PerformanceManager\n\n  /** 安全管理器实例 - 懒加载，提供安全防护机制 */\n  private _security?: SecurityManager\n\n  /** 管理器注册表 - 管理所有管理器的依赖关系和初始化顺序 */\n  private readonly managerRegistry: ManagerRegistry\n\n  /** 路由适配器 - 可选的路由集成接口 */\n  router?: RouterAdapter\n\n  /** 状态适配器 - 可选的状态管理集成接口 */\n  store?: StateAdapter\n\n  /** 国际化适配器 - 可选的多语言支持接口 */\n  i18n?: I18nAdapter\n\n  /** 主题适配器 - 可选的主题切换接口 */\n  theme?: ThemeAdapter\n\n  /**\n   * 懒加载事件管理器访问器\n   */\n  get events(): EventManager {\n    if (!this._events) {\n      const startTime = Date.now()\n      this._events = createEventManager(this.logger)\n      const initTime = Date.now() - startTime\n      this.managerRegistry.markInitialized('events')\n      this.logger.debug('Event manager initialized lazily', { initTime: `${initTime}ms` })\n    }\n    return this._events\n  }\n\n  /**\n   * 懒加载状态管理器访问器\n   */\n  get state(): StateManager {\n    if (!this._state) {\n      const startTime = Date.now()\n      this._state = createStateManager(this.logger)\n      const initTime = Date.now() - startTime\n      this.managerRegistry.markInitialized('state')\n      this.logger.debug('State manager initialized lazily', { initTime: `${initTime}ms` })\n    }\n    return this._state\n  }\n\n  /**\n   * 懒加载错误管理器访问器\n   */\n  get errors(): ErrorManager {\n    if (!this._errors) {\n      const startTime = Date.now()\n      this._errors = createErrorManager()\n      const initTime = Date.now() - startTime\n      this.managerRegistry.markInitialized('errors')\n      this.logger.debug('Error manager initialized lazily', { initTime: `${initTime}ms` })\n      // 设置错误处理\n      this.ensureErrorHandling()\n    }\n    return this._errors\n  }\n\n  /**\n   * 懒加载指令管理器访问器\n   */\n  get directives(): DirectiveManager {\n    if (!this._directives) {\n      const startTime = Date.now()\n      this._directives = createDirectiveManager()\n      const initTime = Date.now() - startTime\n      this.managerRegistry.markInitialized('directives')\n      this.logger.debug('Directive manager initialized lazily', { initTime: `${initTime}ms` })\n    }\n    return this._directives\n  }\n\n  /**\n   * 懒加载通知管理器访问器\n   */\n  get notifications(): NotificationSystem {\n    if (!this._notifications) {\n      const startTime = Date.now()\n      this._notifications = createNotificationSystem(this)\n      const initTime = Date.now() - startTime\n      this.managerRegistry.markInitialized('notifications')\n      this.logger.debug('Notification system initialized lazily', { initTime: `${initTime}ms` })\n    }\n    return this._notifications\n  }\n\n  /**\n   * 懒加载中间件管理器访问器\n   */\n  get middleware(): MiddlewareManager {\n    if (!this._middleware) {\n      const startTime = Date.now()\n      this._middleware = createMiddlewareManager(this.logger)\n      const initTime = Date.now() - startTime\n      this.managerRegistry.markInitialized('middleware')\n      this.logger.debug('Middleware manager initialized lazily', { initTime: `${initTime}ms` })\n    }\n    return this._middleware\n  }\n\n  /**\n   * 懒加载插件管理器访问器\n   */\n  get plugins(): PluginManager {\n    if (!this._plugins) {\n      const startTime = Date.now()\n      this._plugins = createPluginManager(this)\n      const initTime = Date.now() - startTime\n      this.managerRegistry.markInitialized('plugins')\n      this.logger.debug('Plugin manager initialized lazily', { initTime: `${initTime}ms` })\n    }\n    return this._plugins\n  }\n\n  /**\n   * 懒加载缓存管理器访问器\n   *\n   * 使用懒加载模式来优化应用启动性能，只有在实际需要缓存功能时才初始化\n   * 缓存管理器。这种方式可以显著减少应用的初始化时间。\n   *\n   * @returns {CacheManager} 缓存管理器实例\n   *\n   * @example\n   * ```typescript\n   * // 第一次访问时会自动初始化\n   * const cache = engine.cache\n   * cache.set('key', 'value')\n   * ```\n   */\n  get cache(): CacheManager {\n    if (!this._cache) {\n      const startTime = Date.now()\n      // 从配置中获取缓存设置，使用默认配置作为备用\n      this._cache = createCacheManager(\n        this.config?.get('cache', {}) as CacheConfig\n      )\n      const initTime = Date.now() - startTime\n      // 在管理器注册表中标记为已初始化\n      this.managerRegistry.markInitialized('cache')\n      this.logger.debug('Cache manager initialized lazily', {\n        initTime: `${initTime}ms`,\n      })\n    }\n    return this._cache as CacheManager\n  }\n\n  /**\n   * 懒加载性能管理器访问器\n   *\n   * 性能管理器用于监控和优化应用性能，包括：\n   * - 应用加载时间监控\n   * - 组件渲染性能监控\n   * - 内存使用情况监控\n   * - 网络请求性能监控\n   *\n   * @returns {PerformanceManager} 性能管理器实例\n   */\n  get performance(): PerformanceManager {\n    if (!this._performance) {\n      const startTime = Date.now()\n      // 创建性能管理器并传入引擎实例作为上下文\n      this._performance = createPerformanceManager(undefined, this)\n      const initTime = Date.now() - startTime\n      this.managerRegistry.markInitialized('performance')\n      this.logger.debug('Performance manager initialized lazily', {\n        initTime: `${initTime}ms`,\n      })\n    }\n    return this._performance as PerformanceManager\n  }\n\n  /**\n   * 懒加载安全管理器访问器\n   *\n   * 安全管理器提供应用安全防护功能，包括：\n   * - XSS 攻击防护\n   * - CSRF 攻击防护\n   * - 内容安全策略 (CSP)\n   * - 输入验证和清理\n   * - 敏感操作权限检查\n   *\n   * @returns {SecurityManager} 安全管理器实例\n   */\n  get security(): SecurityManager {\n    if (!this._security) {\n      const startTime = Date.now()\n      // 创建安全管理器并传入引擎实例作为上下文\n      this._security = createSecurityManager(undefined, this)\n      const initTime = Date.now() - startTime\n      this.managerRegistry.markInitialized('security')\n      this.logger.debug('Security manager initialized lazily', {\n        initTime: `${initTime}ms`,\n      })\n    }\n    return this._security as SecurityManager\n  }\n\n  /**\n   * 构造函数 - 按照依赖顺序初始化所有管理器\n   *\n   * 初始化顺序非常重要：\n   * 1. 配置管理器 - 其他组件需要读取配置\n   * 2. 日志器 - 所有组件都需要记录日志\n   * 3. 管理器注册表 - 管理组件依赖关系\n   * 4. 环境管理器 - 提供运行环境信息\n   * 5. 生命周期管理器 - 管理组件生命周期\n   * 6. 其他核心管理器 - 按依赖关系顺序初始化\n   *\n   * @param config 引擎配置对象\n   */\n  constructor(config: EngineConfig = {}) {\n    try {\n      // 1. 首先创建配置管理器 - 所有其他组件都可能需要读取配置\n      this.config = createConfigManager({\n        debug: false,\n        ...config,\n      })\n\n      // 设置默认配置Schema，确保配置项的类型安全\n      this.config?.setSchema(defaultConfigSchema)\n\n      // 2. 基于配置创建日志器 - 所有组件都需要记录日志\n      const logLevel = this.config?.get('debug', false) ? 'debug' : 'info'\n      this.logger = createLogger(logLevel)\n\n      // 3. 创建管理器注册表 - 管理所有管理器的依赖关系和初始化顺序\n      this.managerRegistry = new ManagerRegistry(this.logger)\n      this.registerManagers()\n\n      // 4. 初始化环境管理器（优先级最高，其他管理器可能依赖环境信息）\n      this.environment = createEnvironmentManager(this.logger)\n\n      // 5. 初始化生命周期管理器 - 管理整个应用的生命周期钩子\n      this.lifecycle = createLifecycleManager(this.logger)\n\n      // 6. 不再立即初始化管理器，改为懒加载（大幅提升启动性能）\n      // 核心管理器（events、state、plugins等）将在首次访问时初始化\n\n      // 设置配置变化监听器，实现响应式配置\n      this.setupConfigWatchers()\n\n      // 异步执行初始化后的生命周期钩子，避免构造函数阻塞\n      Promise.resolve().then(() => {\n        this.lifecycle.execute('afterInit', this).catch(error => {\n          this.logger.error('Error in afterInit lifecycle hooks', error)\n        })\n      })\n    } catch (error) {\n      // 构造函数错误处理，确保资源清理\n      console.error('Failed to initialize engine:', error)\n      this.emergencyCleanup()\n      throw error\n    }\n  }\n\n  /**\n   * 确保错误处理已设置（延迟初始化）\n   * @private\n   */\n  private ensureErrorHandling(): void {\n    // 只在首次访问errors时设置一次\n    if (!this._errors) return\n\n    // 检查是否已经设置\n    if ((this._errors as any)._handlingSetup) return\n      ; (this._errors as any)._handlingSetup = true\n\n    // 注册全局错误监听器\n    this._errors.onError(errorInfo => {\n      // 1. 记录详细的错误信息到日志系统\n      this.logger.error('Global error captured', errorInfo)\n\n      // 2. 发送错误事件，允许其他模块做相应处理\n      if (this._events) {\n        this._events.emit('engine:error', errorInfo)\n      }\n\n      // 3. 在开发环境下显示错误通知，帮助开发者快速发现问题\n      if (this.config?.get('debug', false) && this._notifications) {\n        this._notifications.show({\n          type: 'error',\n          title: 'Error Captured',\n          content: errorInfo.message,\n          duration: 5000, // 5秒后自动消失\n        })\n      }\n    })\n  }\n\n  /**\n   * 设置配置变化监听器\n   *\n   * @private\n   */\n  private setupConfigWatchers(): void {\n    // 存储防抖函数引用，便于清理\n    if (!this.configWatchers) {\n      this.configWatchers = new Map()\n    }\n\n    // 使用防抖优化配置监听，避免频繁触发\n    const debouncedDebugChange = this.debounce((newValue: unknown) => {\n      this.logger.setLevel(newValue ? 'debug' : 'info')\n      this.logger.info('Debug mode changed', { debug: newValue })\n    }, 300)\n    this.configWatchers.set('debug', debouncedDebugChange)\n\n    // 监听调试模式变化\n    this.config?.watch('debug', debouncedDebugChange)\n\n    // 使用防抖优化日志级别监听\n    const debouncedLevelChange = this.debounce((newValue: unknown) => {\n      const allowed: LogLevel[] = ['debug', 'info', 'warn', 'error']\n      const level = typeof newValue === 'string' && (allowed as string[]).includes(newValue)\n        ? (newValue as LogLevel)\n        : this.logger.getLevel()\n      this.logger.setLevel(level)\n      this.logger.info('Log level changed', { level })\n    }, 300)\n    this.configWatchers.set('logger.level', debouncedLevelChange)\n\n    // 监听日志级别变化\n    this.config?.watch('logger.level', debouncedLevelChange)\n  }\n\n  /** 存储配置监听器的防抖函数，用于清理 */\n  private configWatchers?: Map<string, { cancel: () => void }>\n\n  /**\n   * 防抖函数 - 优化性能和内存\n   * @private\n   * @template T 函数类型\n   * @param func 要防抖的函数\n   * @param wait 等待时间（毫秒）\n   * @returns 防抖后的函数\n   */\n  private debounce<T extends (...args: unknown[]) => void>(\n    func: T,\n    wait: number\n  ): ((...args: Parameters<T>) => void) & { cancel: () => void } {\n    let timeoutId: number | undefined\n\n    const debounced = (...args: Parameters<T>): void => {\n      if (timeoutId !== undefined) {\n        clearTimeout(timeoutId)\n      }\n\n      timeoutId = window.setTimeout(() => {\n        func(...args)\n        timeoutId = undefined\n      }, wait)\n    }\n\n    // 添加取消方法，用于清理\n    debounced.cancel = (): void => {\n      if (timeoutId !== undefined) {\n        clearTimeout(timeoutId)\n        timeoutId = undefined\n      }\n    }\n\n    return debounced\n  }\n\n  // 核心方法\n  async init(): Promise<void> {\n    try {\n      // 执行初始化前的生命周期钩子\n      await this.lifecycle.execute('beforeInit', this)\n\n      // 执行插件初始化\n      await this.plugins.initializeAll()\n\n      // 标记引擎为就绪状态\n      this._isReady = true\n\n      // 执行初始化后的生命周期钩子\n      await this.lifecycle.execute('afterInit', this)\n\n      this.logger.info('Engine initialization completed successfully')\n    } catch (error) {\n      this.logger.error('Engine initialization failed', error)\n      this._isReady = false\n      throw error\n    }\n  }\n\n  isReady(): boolean {\n    return this._isReady\n  }\n\n  // 创建Vue应用\n  createApp(rootComponent: Component): App {\n    if (this._app) {\n      this.logger.warn('Vue app already created')\n      return this._app\n    }\n\n    this._app = createApp(rootComponent)\n\n    // 自动安装引擎\n    this.install(this._app)\n\n    // 触发应用创建事件，让扩展系统知道 Vue 应用已创建\n    this.events.emit('app:created', this._app)\n\n    // Vue app created with engine (日志已禁用)\n    return this._app\n  }\n\n  install(app: App): void {\n    if (this._app && this._app !== app) {\n      this.logger.warn('Engine already installed to different app')\n      return\n    }\n\n    this._app = app\n\n    // 安装全局属性\n    app.config.globalProperties.$engine = this\n\n    // 提供引擎注入\n    app.provide('engine', this)\n\n    // 注册全局指令（只在directives已初始化时）\n    if (this._directives) {\n      const directiveNames = this._directives.getNames()\n      directiveNames.forEach(name => {\n        const eng = this._directives!.get(name)\n        if (eng) {\n          const vueDir = convertEngineToVueDirective(eng)\n          app.directive(name, vueDir as Directive)\n        }\n      })\n    }\n\n    // 设置Vue错误处理（懒加载errors manager）\n    app.config.errorHandler = (error, component, info) => {\n      this.errors.captureError(error as Error, component || undefined, info)\n    }\n\n    // 安装适配器（只安装已经设置的适配器）\n    if (this.router && typeof this.router.install === 'function') {\n      this.router.install(this)\n    }\n    if (this.store && typeof this.store.install === 'function') {\n      this.store.install(this)\n    }\n    if (this.i18n && typeof this.i18n.install === 'function') {\n      this.i18n.install(this)\n    }\n    if (this.theme && typeof this.theme.install === 'function') {\n      this.theme.install(this)\n    }\n\n    // Engine installed to Vue app (日志已禁用)\n    // 只在events已初始化时触发\n    if (this._events) {\n      this._events.emit('engine:installed', { app })\n    }\n  }\n\n  async use(plugin: Plugin): Promise<void> {\n    await this.plugins.register(plugin)\n  }\n\n  async mount(selector: string | Element): Promise<void> {\n    if (!this._app) {\n      throw new Error(\n        'Engine must have a Vue app before mounting. Use createApp() first.'\n      )\n    }\n\n    if (this._mounted) {\n      this.logger.warn('Engine already mounted')\n      return\n    }\n\n    // 执行挂载前的生命周期钩子\n    await this.lifecycle.execute('beforeMount', this)\n\n    this._mountTarget = selector\n    this._app.mount(selector)\n    this._mounted = true\n\n    // Engine mounted (日志已禁用)\n    this.events.emit('engine:mounted', { target: selector })\n\n    // 执行挂载后的生命周期钩子\n    await this.lifecycle.execute('afterMount', this)\n  }\n\n  async unmount(): Promise<void> {\n    if (!this._app || !this._mounted) {\n      this.logger.warn('Engine not mounted')\n      return\n    }\n\n    // 执行卸载前的生命周期钩子\n    await this.lifecycle.execute('beforeUnmount', this)\n\n    this._app.unmount()\n    this._mounted = false\n\n    this.logger.info('Engine unmounted')\n    this.events.emit('engine:unmounted')\n\n    // 执行卸载后的生命周期钩子\n    await this.lifecycle.execute('afterUnmount', this)\n  }\n\n  // 扩展方法\n  setRouter(router: RouterAdapter): void {\n    this.router = router\n    if (this._app) {\n      router.install(this)\n    }\n    this.logger.info('Router adapter set')\n  }\n\n  setStore(store: StateAdapter): void {\n    this.store = store\n    if (this._app) {\n      store.install(this)\n    }\n    this.logger.info('Store adapter set')\n  }\n\n  setI18n(i18n: I18nAdapter): void {\n    this.i18n = i18n\n    if (this._app) {\n      i18n.install(this)\n    }\n    this.logger.info('I18n adapter set')\n  }\n\n  setTheme(theme: ThemeAdapter): void {\n    this.theme = theme\n    if (this._app) {\n      theme.install(this)\n    }\n    this.logger.info('Theme adapter set')\n  }\n\n  // 获取Vue应用实例\n  getApp(): App | undefined {\n    return this._app\n  }\n\n  // 检查是否已挂载\n  isMounted(): boolean {\n    return this._mounted\n  }\n\n  // 获取挂载目标\n  getMountTarget(): string | Element | undefined {\n    return this._mountTarget\n  }\n\n  /**\n   * 销毁引擎 - 完全清理所有资源和内存\n   * \n   * 按照依赖关系的反向顺序清理资源，确保没有内存泄漏\n   * @returns Promise<void>\n   */\n  async destroy(): Promise<void> {\n    try {\n      // 执行销毁前的生命周期钩子\n      await this.lifecycle.execute('beforeDestroy', this)\n\n      // 如果已挂载，先卸载\n      if (this._mounted) {\n        await this.unmount()\n      }\n\n      // 发送销毁事件\n      this.events.emit('engine:destroy')\n\n      // 清理所有核心管理器\n      await this.cleanupManagers()\n\n      // 清理懒加载的管理器（如果已初始化）\n      if (this._cache) {\n        if ('destroy' in this._cache && typeof this._cache.destroy === 'function') {\n          (this._cache as any).destroy()\n        } else {\n          this._cache.clear()\n        }\n        this._cache = undefined\n      }\n\n      if (this._performance) {\n        if ('destroy' in this._performance && typeof this._performance.destroy === 'function') {\n          (this._performance as any).destroy()\n        }\n        this._performance = undefined\n      }\n\n      if (this._security) {\n        if ('destroy' in this._security && typeof this._security.destroy === 'function') {\n          (this._security as any).destroy()\n        }\n        this._security = undefined\n      }\n\n      // 清理 Vue 应用\n      if (this._app) {\n        delete (this._app.config.globalProperties as any).$engine\n        this._app = undefined\n      }\n      this._mountTarget = undefined\n\n      // 禁用配置自动保存\n      this.config?.disableAutoSave()\n\n      // 重置引擎状态\n      this._isReady = false\n      this._mounted = false\n\n      // 清理管理器注册表\n      this.managerRegistry.clear()\n\n      this.logger.info('Engine destroyed successfully')\n\n      // 执行销毁后的生命周期钩子\n      await this.lifecycle.execute('afterDestroy', this)\n\n      // 最后清理日志器引用\n      // @ts-expect-error - 清理引用\n      this.logger = undefined\n    } catch (error) {\n      console.error('Error during engine destruction:', error)\n      // 紧急清理\n      this.emergencyCleanup()\n    }\n  }\n\n  // 配置相关方法\n  updateConfig(config: Partial<Record<string, unknown>>): void {\n    this.config?.merge(config)\n    this.logger.info('Engine configuration updated', {\n      keys: Object.keys(config),\n    })\n  }\n\n  getConfig<T = unknown>(path: string, defaultValue?: T): T {\n    return this.config?.get(path, defaultValue) as T\n  }\n\n  setConfig(path: string, value: unknown): void {\n    this.config?.set(path, value)\n    this.logger.debug('Engine configuration set', { path, value })\n  }\n\n  // 获取管理器初始化统计\n  getManagerStats(): Record<string, unknown> {\n    return this.managerRegistry.getInitializationStats() as unknown as Record<string, unknown>\n  }\n\n  // 验证管理器依赖图\n  validateManagers(): { valid: boolean; errors: string[] } {\n    const { valid, errors } = this.managerRegistry.validateDependencyGraph()\n    return { valid, errors }\n  }\n\n  // 私有方法：注册管理器（更新为懒加载模式）\n  private registerManagers(): void {\n    // 注册立即初始化的核心管理器\n    this.managerRegistry.register('config', [])\n    this.managerRegistry.register('logger', ['config'])\n    this.managerRegistry.register('environment', ['logger'])\n    this.managerRegistry.register('lifecycle', ['logger'])\n\n    // 注册懒加载管理器（所有业务管理器都改为懒加载）\n    this.managerRegistry.register('events', ['logger'], true)\n    this.managerRegistry.register('state', ['logger'], true)\n    this.managerRegistry.register('errors', [], true)\n    this.managerRegistry.register('directives', [], true)\n    this.managerRegistry.register('notifications', ['logger'], true)\n    this.managerRegistry.register('middleware', ['logger'], true)\n    this.managerRegistry.register('plugins', ['events', 'state', 'middleware'], true)\n    this.managerRegistry.register('cache', ['config'], true)\n    this.managerRegistry.register('performance', ['config', 'logger'], true)\n    this.managerRegistry.register('security', ['config', 'logger'], true)\n\n    this.logger.debug('Managers registered in registry (lazy-load mode)')\n  }\n\n  /**\n   * 清理所有管理器 - 优化版（支持懒加载的管理器）\n   * @private\n   */\n  private async cleanupManagers(): Promise<void> {\n    try {\n      // 清理配置监听器的防抖函数\n      if (this.configWatchers) {\n        for (const watcher of this.configWatchers.values()) {\n          watcher.cancel()\n        }\n        this.configWatchers.clear()\n        this.configWatchers = undefined\n      }\n\n      // 按照反向顺序清理已初始化的懒加载管理器\n      const cleanupOrder: Array<{ key: string; name: string }> = [\n        { key: '_plugins', name: 'plugins' },\n        { key: '_middleware', name: 'middleware' },\n        { key: '_notifications', name: 'notifications' },\n        { key: '_directives', name: 'directives' },\n        { key: '_errors', name: 'errors' },\n        { key: '_state', name: 'state' },\n        { key: '_events', name: 'events' },\n      ]\n\n      for (const { key, name } of cleanupOrder) {\n        const manager = (this as any)[key]\n        if (manager) {\n          // 检查是否有 destroy 方法\n          if ('destroy' in manager && typeof manager.destroy === 'function') {\n            await Promise.resolve(manager.destroy())\n          } else if ('clear' in manager && typeof manager.clear === 'function') {\n            manager.clear()\n          }\n          (this as any)[key] = undefined\n          this.logger?.debug(`Manager \"${name}\" cleaned up`)\n        }\n      }\n    } catch (error) {\n      this.logger?.error('Error cleaning up managers:', error)\n    }\n  }\n\n  /**\n   * 紧急清理 - 在发生严重错误时使用\n   * @private\n   */\n  private emergencyCleanup(): void {\n    try {\n      // 清理所有可能的资源（懒加载和立即加载的）\n      const managersToClean = [\n        this._events, this._state, this._errors, this._directives,\n        this._notifications, this._middleware, this._plugins,\n        this._cache, this._performance, this._security\n      ]\n\n      for (const manager of managersToClean) {\n        if (manager && typeof manager === 'object') {\n          if ('destroy' in manager && typeof manager.destroy === 'function') {\n            try {\n              (manager as any).destroy()\n            } catch {\n              // 忽略清理错误\n            }\n          } else if ('clear' in manager && typeof manager.clear === 'function') {\n            try {\n              (manager as any).clear()\n            } catch {\n              // 忽略清理错误\n            }\n          }\n        }\n      }\n\n      // 清理 Vue 应用\n      if (this._app) {\n        try {\n          delete (this._app.config.globalProperties as any).$engine\n        } catch {\n          // 忽略错误\n        }\n      }\n\n      // 重置状态\n      this._isReady = false\n      this._mounted = false\n    } catch (error) {\n      console.error('Emergency cleanup failed:', error)\n    }\n  }\n}\n"],"names":[],"mappings":"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"}