{"version":3,"file":"logger.js","sources":["../../src/logger/logger.ts"],"sourcesContent":["/**\n * 统一的日志系统\n * 📝 整合了所有日志功能，提供高性能、可扩展的日志解决方案\n *\n * 合并了以下文件：\n * - logger/logger.ts\n * - utils/logging-system.ts\n */\n\nimport type { Logger as ILogger, LogEntry, LoggerOptions, LogLevel } from '../types/logger'\n\n// ============================================\n// 类型定义\n// ============================================\n\nexport interface LogConfig extends LoggerOptions {\n  // 基础配置\n  level?: LogLevel\n  enabled?: boolean\n  maxLogs?: number\n\n  // 输出配置\n  console?: boolean\n  remote?: boolean\n  file?: boolean\n\n  // 远程日志配置\n  remoteUrl?: string\n  remoteHeaders?: Record<string, string>\n  remoteBatchSize?: number\n  remoteInterval?: number\n\n  // 格式化配置\n  format?: 'json' | 'text' | 'pretty'\n  timestamp?: boolean\n  context?: boolean\n\n  // 性能配置\n  async?: boolean\n  bufferSize?: number\n  flushInterval?: number\n\n  // 过滤器\n  filters?: Array<(entry: LogEntry) => boolean>\n\n  // 插件\n  plugins?: LogPlugin[]\n}\n\nexport interface LogPlugin {\n  name: string\n  process: (entry: LogEntry) => LogEntry | null\n  flush?: () => void\n}\n\nexport interface LogTransport {\n  name: string\n  write: (entry: LogEntry) => void | Promise<void>\n  flush?: () => void | Promise<void>\n}\n\nexport interface LogStats {\n  total: number\n  byLevel: Record<LogLevel, number>\n  errors: number\n  dropped: number\n  buffered: number\n}\n\n// ============================================\n// 统一日志系统\n// ============================================\n\nexport class UnifiedLogger implements ILogger {\n  private config: Required<LogConfig>\n  private logs: LogEntry[] = []\n  private buffer: LogEntry[] = []\n  private transports: Map<string, LogTransport> = new Map()\n  private plugins: LogPlugin[] = []\n  private stats: LogStats\n  private flushTimer?: NodeJS.Timeout\n  private remoteQueue: LogEntry[] = []\n  private remoteTimer?: NodeJS.Timeout\n\n  // 内存优化：限制数组最大长度\n  private readonly MAX_LOGS_ABSOLUTE = 1000 // 绝对上限\n  private readonly MAX_BUFFER = 200 // 缓冲区上限\n  private readonly MAX_REMOTE_QUEUE = 500 // 远程队列上限\n\n  constructor(config: LogConfig = {}) {\n    this.config = this.normalizeConfig(config)\n    this.stats = this.initStats()\n\n    // 初始化传输器\n    this.initTransports()\n\n    // 初始化插件 - 防御性：限制插件数量\n    if (config.plugins) {\n      this.plugins = config.plugins.slice(0, 10) // 最多10个插件\n    }\n\n    // 启动定期刷新\n    if (this.config?.async && this.config?.flushInterval > 0) {\n      this.startFlushTimer()\n    }\n\n    // 启动远程日志批量发送\n    if (this.config?.remote && this.config?.remoteInterval > 0) {\n      this.startRemoteTimer()\n    }\n  }\n\n  /**\n   * 标准化配置 - 优化版：更严格的默认值\n   */\n  private normalizeConfig(config: LogConfig): Required<LogConfig> {\n    return {\n      level: config.level ?? 'warn',\n      enabled: config.enabled ?? true,\n      maxLogs: Math.min(config.maxLogs ?? 100, this.MAX_LOGS_ABSOLUTE), // 限制最大日志数\n      console: config.console ?? true,\n      remote: config.remote ?? false,\n      file: config.file ?? false,\n      remoteUrl: config.remoteUrl ?? '',\n      remoteHeaders: config.remoteHeaders ?? {},\n      remoteBatchSize: Math.min(config.remoteBatchSize ?? 50, 100), // 限制批次大小\n      remoteInterval: Math.max(config.remoteInterval ?? 10000, 5000), // 最小5秒间隔\n      format: config.format ?? 'text',\n      timestamp: config.timestamp ?? false,\n      context: config.context ?? false,\n      async: config.async ?? false,\n      bufferSize: Math.min(config.bufferSize ?? 50, this.MAX_BUFFER), // 限制缓冲区大小\n      flushInterval: Math.max(config.flushInterval ?? 2000, 1000), // 最小1秒刷新\n      filters: config.filters?.slice(0, 5) ?? [], // 最多5个过滤器\n      plugins: config.plugins?.slice(0, 10) ?? [], // 最多10个插件\n      showTimestamp: config.showTimestamp ?? false,\n      showContext: config.showContext ?? false,\n      prefix: config.prefix ?? ''\n    }\n  }\n\n  /**\n   * 初始化统计信息\n   */\n  private initStats(): LogStats {\n    return {\n      total: 0,\n      byLevel: {\n        debug: 0,\n        info: 0,\n        warn: 0,\n        error: 0\n      },\n      errors: 0,\n      dropped: 0,\n      buffered: 0\n    }\n  }\n\n  /**\n   * 初始化传输器\n   */\n  private initTransports(): void {\n    // 控制台传输器\n    if (this.config?.console) {\n      this.transports.set('console', new ConsoleTransport(this.config))\n    }\n\n    // 远程传输器\n    if (this.config?.remote && this.config?.remoteUrl) {\n      this.transports.set('remote', new RemoteTransport(this.config))\n    }\n\n    // 文件传输器（浏览器环境使用 IndexedDB）\n    if (this.config?.file && typeof window !== 'undefined') {\n      this.transports.set('file', new IndexedDBTransport(this.config))\n    }\n  }\n\n  // ============================================\n  // 核心日志方法\n  // ============================================\n\n  debug(message: string, ...args: unknown[]): void {\n    this.log('debug', message, ...args)\n  }\n\n  info(message: string, ...args: unknown[]): void {\n    this.log('info', message, ...args)\n  }\n\n  warn(message: string, ...args: unknown[]): void {\n    this.log('warn', message, ...args)\n  }\n\n  error(message: string, error?: unknown, ...args: unknown[]): void {\n    this.log('error', message, error, ...args)\n  }\n\n  /**\n   * 核心日志方法\n   */\n  private log(level: LogLevel, message: string, ...args: unknown[]): void {\n    if (!this.config?.enabled) return\n    if (!this.shouldLog(level)) return\n\n    // 创建日志条目\n    let entry: LogEntry = {\n      timestamp: Date.now(),\n      level,\n      message,\n      data: args.length > 0 ? args : undefined\n    }\n\n    // 应用插件\n    for (const plugin of this.plugins) {\n      const result = plugin.process(entry)\n      if (!result) return // 插件过滤掉了日志\n      entry = result\n    }\n\n    // 应用过滤器\n    for (const filter of this.config?.filters) {\n      if (!filter(entry)) {\n        this.stats.dropped++\n        return\n      }\n    }\n\n    // 更新统计\n    this.updateStats(level)\n\n    // 异步模式：加入缓冲区\n    if (this.config?.async) {\n      // 检查缓冲区大小限制\n      if (this.buffer.length >= this.MAX_BUFFER) {\n        // 强制刷新\n        this.flush()\n      }\n\n      this.buffer.push(entry)\n      this.stats.buffered++\n\n      if (this.buffer.length >= this.config?.bufferSize) {\n        this.flush()\n      }\n    } else {\n      // 同步模式：立即写入\n      this.writeEntry(entry)\n    }\n\n    // 保存到历史记录\n    this.addToHistory(entry)\n  }\n\n  /**\n   * 写入日志条目\n   */\n  private writeEntry(entry: LogEntry): void {\n    // 写入到所有传输器\n    for (const transport of this.transports.values()) {\n      try {\n        transport.write(entry)\n      } catch (error) {\n        this.stats.errors++\n        // 避免递归\n        if (this.config?.console) {\n          console.error('Logger transport error:', error)\n        }\n      }\n    }\n  }\n\n  /**\n   * 添加到历史记录 - 优化版：使用环形缓冲区避免数组扩容\n   */\n  private addToHistory(entry: LogEntry): void {\n    // 双重限制：配置的maxLogs和绝对上限\n    const effectiveMax = Math.min(this.config?.maxLogs, this.MAX_LOGS_ABSOLUTE)\n\n    if (this.logs.length >= effectiveMax) {\n      // 已满：移除最旧的，添加新的\n      this.logs.shift()\n    }\n\n    this.logs.push(entry)\n  }\n\n  /**\n   * 检查是否应该记录\n   */\n  private shouldLog(level: LogLevel): boolean {\n    const levels: LogLevel[] = ['debug', 'info', 'warn', 'error']\n    const configIndex = levels.indexOf(this.config?.level)\n    const levelIndex = levels.indexOf(level)\n    return levelIndex >= configIndex\n  }\n\n  /**\n   * 更新统计信息\n   */\n  private updateStats(level: LogLevel): void {\n    this.stats.total++\n    this.stats.byLevel[level]++\n  }\n\n  // ============================================\n  // 批处理和刷新\n  // ============================================\n\n  /**\n   * 刷新缓冲区\n   */\n  flush(): void {\n    if (this.buffer.length === 0) return\n\n    const entries = this.buffer.splice(0, this.buffer.length)\n    this.stats.buffered = 0\n\n    for (const entry of entries) {\n      this.writeEntry(entry)\n    }\n\n    // 刷新所有传输器\n    for (const transport of this.transports.values()) {\n      if (transport.flush) {\n        transport.flush()\n      }\n    }\n\n    // 刷新插件\n    for (const plugin of this.plugins) {\n      if (plugin.flush) {\n        plugin.flush()\n      }\n    }\n  }\n\n  /**\n   * 启动定期刷新\n   */\n  private startFlushTimer(): void {\n    this.flushTimer = setInterval(() => {\n      this.flush()\n    }, this.config?.flushInterval)\n  }\n\n  /**\n   * 启动远程日志定时器\n   */\n  private startRemoteTimer(): void {\n    this.remoteTimer = setInterval(() => {\n      this.flushRemote()\n    }, this.config?.remoteInterval)\n  }\n\n  /**\n   * 刷新远程日志 - 优化版：限制队列大小避免无限增长\n   */\n  private async flushRemote(): Promise<void> {\n    if (this.remoteQueue.length === 0) return\n\n    // 检查队列大小限制\n    if (this.remoteQueue.length > this.MAX_REMOTE_QUEUE) {\n      // 队列过大：移除最旧的日志\n      const excess = this.remoteQueue.length - this.MAX_REMOTE_QUEUE\n      this.remoteQueue.splice(0, excess)\n      this.stats.dropped += excess\n    }\n\n    const batch = this.remoteQueue.splice(0, this.config?.remoteBatchSize)\n\n    try {\n      await fetch(this.config?.remoteUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          ...this.config?.remoteHeaders\n        },\n        body: JSON.stringify(batch)\n      })\n    } catch {\n      this.stats.errors++\n      // 恢复失败的日志到队列（但限制数量）\n      const toRestore = batch.slice(0, Math.min(batch.length, 50))\n      this.remoteQueue.unshift(...toRestore)\n\n      // 超过部分丢弃\n      if (batch.length > toRestore.length) {\n        this.stats.dropped += (batch.length - toRestore.length)\n      }\n    }\n  }\n\n  // ============================================\n  // 高级功能\n  // ============================================\n\n  /**\n   * 创建子日志器\n   */\n  child(context: Record<string, unknown>): UnifiedLogger {\n    const childConfig = { ...this.config }\n    const childLogger = new UnifiedLogger(childConfig)\n\n    // 添加上下文插件\n    childLogger.use({\n      name: 'context',\n      process(entry: LogEntry): LogEntry {\n        return {\n          ...entry,\n          context: { ...context, ...entry.context }\n        }\n      }\n    })\n\n    return childLogger\n  }\n\n  /**\n   * 使用插件\n   */\n  use(plugin: LogPlugin): void {\n    this.plugins.push(plugin)\n  }\n\n  /**\n   * 添加传输器\n   */\n  addTransport(name: string, transport: LogTransport): void {\n    this.transports.set(name, transport)\n  }\n\n  /**\n   * 移除传输器\n   */\n  removeTransport(name: string): void {\n    this.transports.delete(name)\n  }\n\n  /**\n   * 设置日志级别\n   */\n  setLevel(level: LogLevel): void {\n    if (this.config) {\n      this.config.level = level\n    }\n  }\n\n  /**\n   * 获取日志级别\n   */\n  getLevel(): LogLevel {\n    return this.config?.level\n  }\n\n  /**\n   * 获取日志历史\n   */\n  getLogs(filter?: Partial<LogEntry>): LogEntry[] {\n    if (!filter) return [...this.logs]\n\n    return this.logs.filter(log => {\n      if (filter.level && log.level !== filter.level) return false\n      if (filter.message && !log.message.includes(filter.message)) return false\n      return true\n    })\n  }\n\n  /**\n   * 清空日志\n   */\n  clearLogs(): void {\n    // 使用更高效的方式清空数组\n    this.logs.length = 0\n    this.buffer.length = 0\n    this.remoteQueue.length = 0\n\n    // 清理插件缓存\n    for (const plugin of this.plugins) {\n      if (typeof plugin.flush === 'function') {\n        plugin.flush()\n      }\n    }\n  }\n\n  /**\n   * 清空日志（别名方法，与 Logger 接口兼容）\n   */\n  clear(): void {\n    this.clearLogs()\n    this.resetStats()\n  }\n\n  /**\n   * 设置最大日志数\n   */\n  setMaxLogs(max: number): void {\n    if (this.config) {\n      this.config.maxLogs = max\n    }\n    // 如果当前日志数超过新限制，删除老日志\n    while (this.logs.length > max) {\n      this.logs.shift()\n    }\n  }\n\n  /**\n   * 获取最大日志数\n   */\n  getMaxLogs(): number {\n    return this.config?.maxLogs\n  }\n\n  /**\n   * 获取统计信息\n   */\n  getStats(): LogStats {\n    return { ...this.stats }\n  }\n\n  /**\n   * 重置统计信息\n   */\n  resetStats(): void {\n    this.stats = this.initStats()\n  }\n\n  /**\n   * 销毁日志器\n   */\n  destroy(): void {\n    // 清理定时器\n    if (this.flushTimer) {\n      clearInterval(this.flushTimer)\n      this.flushTimer = undefined\n    }\n\n    if (this.remoteTimer) {\n      clearInterval(this.remoteTimer)\n      this.remoteTimer = undefined\n    }\n\n    // 最后一次刷新\n    this.flush()\n\n    // 清理日志数据\n    this.clearLogs()\n\n    // 清理传输器\n    for (const transport of this.transports.values()) {\n      if (typeof (transport as any).destroy === 'function') {\n        (transport as any).destroy()\n      }\n    }\n    this.transports.clear()\n\n    // 清理插件\n    for (const plugin of this.plugins) {\n      if (typeof plugin.flush === 'function') {\n        plugin.flush()\n      }\n    }\n    this.plugins.length = 0\n  }\n}\n\n// ============================================\n// 传输器实现\n// ============================================\n\n/**\n * 控制台传输器\n */\nclass ConsoleTransport implements LogTransport {\n  name = 'console'\n\n  constructor(private config: Required<LogConfig>) { }\n\n  write(entry: LogEntry): void {\n    const { level, message, data } = entry\n    const timestamp = this.config?.timestamp\n      ? new Date(entry.timestamp).toISOString()\n      : ''\n\n    const prefix = this.config?.format === 'pretty'\n      ? this.getPrettyPrefix(level, timestamp)\n      : timestamp\n\n    const dataArray = Array.isArray(data) ? data : []\n    const args = [prefix, message, ...dataArray]\n\n    switch (level) {\n      case 'debug':\n\n        break\n      case 'info':\n        console.info(...args)\n        break\n      case 'warn':\n        console.warn(...args)\n        break\n      case 'error':\n        console.error(...args)\n        break\n    }\n  }\n\n  private getPrettyPrefix(level: LogLevel, timestamp: string): string {\n    const colors = {\n      debug: '\\x1B[36m', // Cyan\n      info: '\\x1B[32m', // Green\n      warn: '\\x1B[33m', // Yellow\n      error: '\\x1B[31m' // Red\n    }\n\n    const reset = '\\x1B[0m'\n    const color = colors[level]\n\n    return `${color}[${level.toUpperCase()}]${reset} ${timestamp}`\n  }\n}\n\n/**\n * 远程传输器\n */\nclass RemoteTransport implements LogTransport {\n  name = 'remote'\n  private queue: LogEntry[] = []\n  private maxQueueSize = 10000 // 防止队列无限增长\n\n  constructor(private config: Required<LogConfig>) { }\n\n  write(entry: LogEntry): void {\n    // 防止队列无限增长导致内存泄漏\n    if (this.queue.length >= this.maxQueueSize) {\n      this.queue.shift() // 移除最旧的条目\n    }\n\n    this.queue.push(entry)\n\n    if (this.queue.length >= this.config?.remoteBatchSize) {\n      this.flush()\n    }\n  }\n\n  async flush(): Promise<void> {\n    if (this.queue.length === 0) return\n\n    const batch = this.queue.splice(0, this.queue.length)\n\n    try {\n      await fetch(this.config?.remoteUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          ...this.config?.remoteHeaders\n        },\n        body: JSON.stringify(batch)\n      })\n    } catch (error) {\n      // 恢复失败的日志，但限制数量\n      const restoreCount = Math.min(batch.length, this.maxQueueSize - this.queue.length)\n      this.queue.unshift(...batch.slice(0, restoreCount))\n      throw error\n    }\n  }\n\n  // 添加销毁方法\n  destroy(): void {\n    this.queue.length = 0\n  }\n}\n\n/**\n * IndexedDB 传输器（用于浏览器环境的文件存储）\n */\nclass IndexedDBTransport implements LogTransport {\n  name = 'indexeddb'\n  private db?: IDBDatabase\n  private dbName = 'LoggerDB'\n  private storeName = 'logs'\n  private cleanupTimer?: NodeJS.Timeout\n\n  constructor(private config: Required<LogConfig>) {\n    this.initDB()\n    // 定期清理旧日志\n    this.cleanupTimer = setInterval(() => {\n      this.cleanup()\n    }, 60000) // 每分钟清理一次\n  }\n\n  private async initDB(): Promise<void> {\n    const request = indexedDB.open(this.dbName, 1)\n\n    request.onupgradeneeded = (event) => {\n      const db = (event.target as IDBOpenDBRequest).result\n      if (!db.objectStoreNames.contains(this.storeName)) {\n        const store = db.createObjectStore(this.storeName, {\n          keyPath: 'id',\n          autoIncrement: true\n        })\n        store.createIndex('timestamp', 'timestamp')\n        store.createIndex('level', 'level')\n      }\n    }\n\n    this.db = await new Promise((resolve, reject) => {\n      request.onsuccess = () => resolve(request.result)\n      request.onerror = () => reject(request.error)\n    })\n  }\n\n  async write(entry: LogEntry): Promise<void> {\n    if (!this.db) await this.initDB()\n    if (!this.db) return\n\n    const transaction = this.db.transaction([this.storeName], 'readwrite')\n    const store = transaction.objectStore(this.storeName)\n    store.add(entry)\n\n    // 清理旧日志\n    await this.cleanup()\n  }\n\n  private async cleanup(): Promise<void> {\n    if (!this.db) return\n\n    const transaction = this.db.transaction([this.storeName], 'readwrite')\n    const store = transaction.objectStore(this.storeName)\n    const count = await this.getCount(store)\n\n    if (count > this.config?.maxLogs) {\n      const deleteCount = count - this.config?.maxLogs\n      const request = store.openCursor()\n      let deleted = 0\n\n      request.onsuccess = (event) => {\n        const cursor = (event.target as IDBRequest).result\n        if (cursor && deleted < deleteCount) {\n          cursor.delete()\n          deleted++\n          cursor.continue()\n        }\n      }\n    }\n  }\n\n  private getCount(store: IDBObjectStore): Promise<number> {\n    return new Promise((resolve, reject) => {\n      const request = store.count()\n      request.onsuccess = () => resolve(request.result)\n      request.onerror = () => reject(request.error)\n    })\n  }\n\n  // 添加销毁方法\n  destroy(): void {\n    if (this.cleanupTimer) {\n      clearInterval(this.cleanupTimer)\n      this.cleanupTimer = undefined\n    }\n    if (this.db) {\n      this.db.close()\n      this.db = undefined\n    }\n  }\n}\n\n// ============================================\n// 内置插件\n// ============================================\n\n/**\n * 性能插件 - 记录日志耗时\n */\nexport class PerformancePlugin implements LogPlugin {\n  name = 'performance'\n  private timings = new Map<string, number>()\n  private maxTimings = 1000 // 限制缓存大小\n\n  process(entry: LogEntry): LogEntry {\n    const start = performance.now()\n    const id = `${entry.timestamp}-${entry.level}`\n\n    // 限制 Map 大小防止内存泄漏\n    if (this.timings.size >= this.maxTimings) {\n      const firstKey = this.timings.keys().next().value\n      if (firstKey !== undefined) {\n        this.timings.delete(firstKey)\n      }\n    }\n\n    this.timings.set(id, start)\n\n    return {\n      ...entry,\n      metadata: {\n        ...entry.metadata,\n        logTime: performance.now() - start\n      }\n    }\n  }\n\n  flush(): void {\n    this.timings.clear()\n  }\n}\n\n/**\n * 错误追踪插件 - 增强错误信息\n */\nexport class ErrorTrackingPlugin implements LogPlugin {\n  name = 'error-tracking'\n\n  process(entry: LogEntry): LogEntry {\n    if (entry.level !== 'error') return entry\n\n    const dataArray = Array.isArray(entry.data) ? entry.data : [entry.data]\n    const error = dataArray[0]\n    if (error instanceof Error) {\n      return {\n        ...entry,\n        metadata: {\n          ...entry.metadata,\n          errorStack: error.stack,\n          errorName: error.name,\n          errorMessage: error.message\n        }\n      }\n    }\n\n    return entry\n  }\n}\n\n/**\n * 采样插件 - 按比例采样日志\n */\nexport class SamplingPlugin implements LogPlugin {\n  name = 'sampling'\n\n  constructor(private sampleRate: number = 1) { }\n\n  process(entry: LogEntry): LogEntry | null {\n    if (Math.random() <= this.sampleRate) {\n      return entry\n    }\n    return null\n  }\n}\n\n// ============================================\n// 工厂函数\n// ============================================\n\nexport function createUnifiedLogger(config?: LogConfig): UnifiedLogger {\n  return new UnifiedLogger(config)\n}\n\n/**\n * 创建日志器（兼容 LogLevel 字符串和 LogConfig 对象）\n * @param levelOrConfig 日志级别字符串或配置对象\n */\nexport function createLogger(levelOrConfig?: LogLevel | LogConfig): UnifiedLogger {\n  if (typeof levelOrConfig === 'string') {\n    return new UnifiedLogger({ level: levelOrConfig })\n  }\n  return new UnifiedLogger(levelOrConfig)\n}\n\n// 向后兼容\nexport { UnifiedLogger as Logger }\n\n// ============================================\n// getLogger 工厂函数\n// ============================================\n\n// 全局日志器实例缓存\nconst loggerInstances = new Map<string, UnifiedLogger>()\n\n/**\n * 获取或创建命名日志器实例\n * @param name 日志器名称\n * @param config 可选的配置\n * @returns 日志器实例\n */\nexport function getLogger(name: string = 'default', config?: LogConfig): UnifiedLogger {\n  // 如果已存在，直接返回\n  if (loggerInstances.has(name) && !config) {\n    const existing = loggerInstances.get(name)\n    if (existing) return existing\n  }\n\n  // 创建新实例\n  const logger = new UnifiedLogger({\n    ...config,\n    // 添加默认前缀\n    format: config?.format ?? 'pretty'\n  })\n\n  // 缓存实例\n  loggerInstances.set(name, logger)\n\n  return logger\n}\n"],"names":[],"mappings":"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"}