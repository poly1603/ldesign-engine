{"version":3,"file":"event-manager.js","sources":["../../src/events/event-manager.ts"],"sourcesContent":["import type {\n  EventHandler,\n  EventManager,\n  EventMap,\n  Logger,\n} from '../types'\n\ninterface EventListener {\n  handler: EventHandler\n  once: boolean\n  priority: number\n}\n\n// 事件对象池，用于减少内存分配\nclass EventObjectPool {\n  private pool: EventListener[] = []\n  private maxSize = 100\n\n  get(): EventListener {\n    return this.pool.pop() || { handler: () => { }, once: false, priority: 0 }\n  }\n\n  release(obj: EventListener): void {\n    if (this.pool.length < this.maxSize) {\n      // 重置对象状态\n      obj.handler = () => { }\n      obj.once = false\n      obj.priority = 0\n      this.pool.push(obj)\n    }\n  }\n\n  clear(): void {\n    this.pool.length = 0\n  }\n}\n\nexport class EventManagerImpl<TEventMap extends EventMap = EventMap>\n  implements EventManager<TEventMap> {\n  private events: Map<string, EventListener[]> = new Map()\n  private maxListeners = 50\n  private sortedListenersCache: Map<string, EventListener[]> = new Map()\n  private eventStats: Map<string, { count: number; lastEmit: number }> =\n    new Map()\n  private eventPool = new EventObjectPool() // 事件对象池\n\n  // 性能优化：使用WeakMap减少内存占用\n  private weakSortedCache = new WeakMap<EventListener[], EventListener[]>()\n  private maxEventStats = 1000 // 限制统计数据数量\n  private cleanupInterval = 60000 // 降低到1分钟\n  private cleanupTimer: number | null = null // 存储定时器引用\n\n  constructor(private logger?: Logger) {\n    // 更频繁地清理统计数据\n    this.setupCleanupTimer()\n  }\n\n  private setupCleanupTimer(): void {\n    // 清理旧定时器（防止重复创建）\n    if (this.cleanupTimer !== null) {\n      clearInterval(this.cleanupTimer)\n    }\n\n    // 使用 window.setInterval 获得正确类型，便于清理\n    this.cleanupTimer = window.setInterval(() => {\n      this.cleanupStats()\n      // 检测内存使用情况\n      this.checkMemoryUsage()\n    }, this.cleanupInterval)\n  }\n\n  // 重载：类型安全事件 + 通用字符串事件\n  on<K extends keyof TEventMap>(\n    event: K,\n    handler: EventHandler<TEventMap[K]>\n  ): void\n  on<K extends keyof TEventMap>(\n    event: K,\n    handler: EventHandler<TEventMap[K]>,\n    priority: number\n  ): void\n  on(event: string, handler: EventHandler): void\n  on(event: string, handler: EventHandler, priority: number): void\n  on(event: unknown, handler: unknown, priority = 0): void {\n    this.addEventListener(String(event), handler as EventHandler, false, priority)\n  }\n\n  // 重载：类型安全事件 + 通用字符串事件\n  off<K extends keyof TEventMap>(\n    event: K,\n    handler?: EventHandler<TEventMap[K]>\n  ): void\n  off(event: string, handler?: EventHandler): void\n  off(event: unknown, handler?: unknown): void {\n    const key = String(event)\n    if (!this.events.has(key)) {\n      return\n    }\n\n    const listeners = this.events.get(key)\n    if (!listeners) {\n      return\n    }\n\n    if (!handler) {\n      // 移除所有监听器\n      this.events.delete(key)\n      this.sortedListenersCache.delete(key)\n      return\n    }\n\n    // 移除指定监听器\n    const index = listeners.findIndex(listener => listener.handler === handler)\n    if (index > -1) {\n      listeners.splice(index, 1)\n      if (listeners.length === 0) {\n        this.events.delete(key)\n        this.sortedListenersCache.delete(key)\n      } else {\n        this.sortedListenersCache.delete(key)\n      }\n    }\n  }\n\n  // 重载：类型安全事件 + 通用字符串事件\n  emit<K extends keyof TEventMap>(event: K, data: TEventMap[K]): void\n  emit(event: string, ...args: unknown[]): void\n  emit(event: unknown, ...args: unknown[]): void {\n    const key = String(event)\n    this.updateEventStats(key)\n\n    const listeners = this.events.get(key)\n    if (!listeners || listeners.length === 0) {\n      return\n    }\n\n    // 优化：使用WeakMap缓存以避免重复排序\n    let listenersToExecute = this.weakSortedCache.get(listeners)\n    if (!listenersToExecute) {\n      // 只有在没有缓存时才排序 - 优化：使用更高效的排序\n      // 对于少量监听器，使用插入排序更快\n      if (listeners.length < 10) {\n        listenersToExecute = this.insertionSort([...listeners])\n      } else {\n        listenersToExecute = [...listeners].sort((a, b) => b.priority - a.priority)\n      }\n      this.weakSortedCache.set(listeners, listenersToExecute)\n    }\n\n    // 使用位图标记需要移除的一次性监听器，避免多次数组操作\n    const removeIndexes = new Uint8Array(listenersToExecute.length)\n    let hasOnceListeners = false\n\n    // 单次循环处理事件触发和标记移除\n    for (let i = 0; i < listenersToExecute.length; i++) {\n      const listener = listenersToExecute[i]\n\n      try {\n        listener.handler(args[0] as unknown)\n      } catch (error) {\n        this.logger?.error(`Error in event handler for \"${key}\":`, error)\n      }\n\n      // 标记需要移除的一次性监听器\n      if (listener.once) {\n        removeIndexes[i] = 1\n        hasOnceListeners = true\n      }\n    }\n\n    // 只有在有一次性监听器时才执行批量移除\n    if (hasOnceListeners) {\n      this.batchRemoveIndexedListeners(key, listeners, removeIndexes)\n    }\n  }\n\n  // 重载：类型安全事件 + 通用字符串事件\n  once<K extends keyof TEventMap>(\n    event: K,\n    handler: EventHandler<TEventMap[K]>\n  ): void\n  once<K extends keyof TEventMap>(\n    event: K,\n    handler: EventHandler<TEventMap[K]>,\n    priority: number\n  ): void\n  once(event: string, handler: EventHandler): void\n  once(event: string, handler: EventHandler, priority: number): void\n  once(event: unknown, handler: unknown, priority = 0): void {\n    this.addEventListener(String(event), handler as EventHandler, true, priority)\n  }\n\n  private addEventListener(\n    event: string,\n    handler: EventHandler,\n    once: boolean,\n    priority: number\n  ): void {\n    if (!this.events.has(event)) {\n      this.events.set(event, [])\n    }\n\n    const listeners = this.events.get(event)\n    if (!listeners) return\n\n    // 检查监听器数量限制\n    if (listeners.length >= this.maxListeners) {\n      this.logger?.warn(\n        `MaxListenersExceededWarning: Possible EventManager memory leak detected. ` +\n        `${listeners.length + 1} \"${event}\" listeners added. ` +\n        `Use setMaxListeners() to increase limit.`\n      )\n    }\n\n    // 使用对象池来减少内存分配\n    const listener = this.eventPool.get()\n    listener.handler = handler\n    listener.once = once\n    listener.priority = priority\n\n    listeners.push(listener)\n\n    // 清除该事件的缓存\n    this.sortedListenersCache.delete(event)\n  }\n\n  // 获取事件的监听器数量\n  listenerCount(event: string): number {\n    const listeners = this.events.get(event)\n    return listeners ? listeners.length : 0\n  }\n\n  // 获取所有事件名称\n  eventNames(): string[] {\n    return Array.from(this.events.keys())\n  }\n\n  // 获取指定事件的所有监听器\n  listeners(event: string): EventHandler[] {\n    const listeners = this.events.get(event)\n    return listeners ? listeners.map(l => l.handler) : []\n  }\n\n  // 设置最大监听器数量\n  setMaxListeners(n: number): void {\n    this.maxListeners = n\n  }\n\n  // 获取最大监听器数量\n  getMaxListeners(): number {\n    return this.maxListeners\n  }\n\n  // 移除所有监听器\n  removeAllListeners(event?: string): void {\n    if (event) {\n      this.events.delete(event)\n      this.sortedListenersCache.delete(event)\n    } else {\n      this.events.clear()\n      this.sortedListenersCache.clear()\n    }\n  }\n\n  // 在指定事件前添加监听器\n  prependListener(event: string, handler: EventHandler, priority = 1000): void {\n    this.addEventListener(event, handler, false, priority)\n  }\n\n  /**\n   * 性能优化：更新事件统计\n   */\n  private updateEventStats(event: string): void {\n    const stats = this.eventStats.get(event)\n    const now = Date.now()\n\n    if (stats) {\n      stats.count++\n      stats.lastEmit = now\n    } else {\n      this.eventStats.set(event, { count: 1, lastEmit: now })\n    }\n  }\n\n  /**\n   * 新方法：按索引批量移除监听器\n   */\n  private batchRemoveIndexedListeners(\n    event: string,\n    listeners: EventListener[],\n    removeIndexes: Uint8Array\n  ): void {\n    // 按索引删除，倒序遍历避免索引偏移问题\n    for (let i = removeIndexes.length - 1; i >= 0; i--) {\n      if (removeIndexes[i] === 1) {\n        // 使用对象池回收监听器对象\n        this.eventPool.release(listeners[i])\n        listeners.splice(i, 1)\n      }\n    }\n\n    // 处理空事件监听器列表\n    if (listeners.length === 0) {\n      this.events.delete(event)\n      this.sortedListenersCache.delete(event)\n    } else {\n      // 只有在必要时才更新缓存\n      this.sortedListenersCache.delete(event)\n      this.weakSortedCache.delete(listeners)\n    }\n  }\n\n  /**\n   * 性能优化：批量移除监听器\n   */\n  private batchRemoveListeners(\n    event: string,\n    listenersToRemove: EventListener[]\n  ): void {\n    const listeners = this.events.get(event)\n    if (!listeners) return\n\n    // 使用 Set 提高查找性能\n    const removeSet = new Set(listenersToRemove.map(l => l.handler))\n\n    // 过滤掉需要移除的监听器，并释放到对象池\n    const filteredListeners = listeners.filter(l => {\n      if (removeSet.has(l.handler)) {\n        // 释放监听器对象到池中\n        this.eventPool.release(l)\n        return false\n      }\n      return true\n    })\n\n    if (filteredListeners.length === 0) {\n      this.events.delete(event)\n      this.sortedListenersCache.delete(event)\n    } else {\n      this.events.set(event, filteredListeners)\n      this.sortedListenersCache.delete(event) // 清除缓存\n      this.weakSortedCache.delete(listeners)\n    }\n  }\n\n  /**\n   * 性能优化：清理过期的统计数据 - 改进版\n   */\n  private cleanupStats(): void {\n    const now = Date.now()\n    const maxAge = 300000 // 5分钟\n\n    // 检查事件统计数量\n    if (this.eventStats.size > this.maxEventStats) {\n      // 根据最后触发时间排序并只保留最近的事件\n      const sortedEvents = Array.from(this.eventStats.entries())\n        .sort((a, b) => b[1].lastEmit - a[1].lastEmit)\n        .slice(0, this.maxEventStats - 100) // 留出一些缓冲空间\n\n      this.eventStats.clear()\n      for (const [event, stats] of sortedEvents) {\n        this.eventStats.set(event, stats)\n      }\n    } else {\n      // 正常的过期检查\n      for (const [event, stats] of this.eventStats.entries()) {\n        if (now - stats.lastEmit > maxAge) {\n          this.eventStats.delete(event)\n        }\n      }\n    }\n  }\n\n  /**\n   * 检查内存使用\n   */\n  private checkMemoryUsage(): void {\n    // 如果事件监听器总数超过警戒线，记录警告\n    const stats = this.getStats()\n    if (stats.totalListeners > 1000) {\n      this.logger?.warn('High number of event listeners detected', {\n        totalListeners: stats.totalListeners,\n        events: Object.entries(stats.events)\n          .filter(([, count]) => count > 20)\n          .map(([event, count]) => `${event}: ${count}`)\n      })\n    }\n  }\n\n  /**\n   * 获取事件统计信息\n   */\n  getEventStats(): Map<string, { count: number; lastEmit: number }> {\n    return new Map(this.eventStats)\n  }\n\n  /**\n   * 清理所有资源 - 增强版\n   */\n  cleanup(): void {\n    this.events.clear()\n    this.sortedListenersCache.clear()\n    this.eventStats.clear()\n  }\n\n  /**\n   * 销毁方法 - 确保完全清理\n   */\n  destroy(): void {\n    // 清理定时器\n    if (this.cleanupTimer !== null) {\n      clearInterval(this.cleanupTimer)\n      this.cleanupTimer = null\n    }\n\n    // 清理所有数据\n    this.events.clear()\n    this.sortedListenersCache.clear()\n    this.eventStats.clear()\n    this.eventPool.clear()\n  }\n\n  prependOnceListener(\n    event: string,\n    handler: EventHandler,\n    priority = 1000\n  ): void {\n    this.addEventListener(event, handler, true, priority)\n  }\n\n  namespace(ns: string): EventNamespace {\n    return new EventNamespace(this, ns)\n  }\n\n  /**\n   * 新增：批量事件操作\n   * 一次性添加多个事件监听器\n   */\n  addListeners(listeners: Array<{\n    event: string\n    handler: EventHandler\n    options?: { once?: boolean; priority?: number }\n  }>): void {\n    for (const { event, handler, options } of listeners) {\n      this.addEventListener(event, handler, !!options?.once, options?.priority ?? 0)\n    }\n  }\n\n  /**\n   * 新增：事件管道\n   * 支持事件的链式处理\n   */\n  pipe(sourceEvent: string, targetEvent: string, transform?: (data: unknown) => unknown): void {\n    this.on(sourceEvent, (data) => {\n      const transformedData = transform ? transform(data) : data\n      this.emit(targetEvent, transformedData)\n    })\n  }\n\n  /**\n   * 新增：条件事件监听\n   * 只有满足条件时才触发监听器\n   */\n  onWhen(\n    event: string,\n    condition: (data: unknown) => boolean,\n    handler: EventHandler,\n    options?: { once?: boolean; priority?: number }\n  ): void {\n    this.addEventListener(event, (data) => {\n      if (condition(data)) {\n        handler(data)\n      }\n    }, !!options?.once, options?.priority ?? 0)\n  }\n\n  /**\n   * 新增：事件防抖\n   * 在指定时间内只触发一次事件\n   */\n  debounce(event: string, delay: number = 300): EventDebouncer {\n    return new EventDebouncer(this, event, delay)\n  }\n\n  /**\n   * 新增：事件节流\n   * 在指定时间间隔内最多触发一次事件\n   */\n  throttle(event: string, interval: number = 300): EventThrottler {\n    return new EventThrottler(this, event, interval)\n  }\n\n  /**\n   * 插入排序 - 对小数组更高效\n   */\n  private insertionSort(arr: EventListener[]): EventListener[] {\n    for (let i = 1; i < arr.length; i++) {\n      const current = arr[i]\n      let j = i - 1\n      while (j >= 0 && arr[j].priority < current.priority) {\n        arr[j + 1] = arr[j]\n        j--\n      }\n      arr[j + 1] = current\n    }\n    return arr\n  }\n\n  getStats(): {\n    totalEvents: number\n    totalListeners: number\n    events: Record<string, number>\n  } {\n    const stats: Record<string, number> = {}\n    let totalListeners = 0\n\n    for (const [event, listeners] of this.events.entries()) {\n      stats[event] = listeners.length\n      totalListeners += listeners.length\n    }\n\n    return {\n      totalEvents: this.events.size,\n      totalListeners,\n      events: stats,\n    }\n  }\n}\n\nexport const ENGINE_EVENTS = {\n  CREATED: 'engine:created',\n  INSTALLED: 'engine:installed',\n  MOUNTED: 'engine:mounted',\n  UNMOUNTED: 'engine:unmounted',\n  DESTROYED: 'engine:destroy',\n  ERROR: 'engine:error',\n\n  PLUGIN_REGISTERED: 'plugin:registered',\n  PLUGIN_UNREGISTERED: 'plugin:unregistered',\n  PLUGIN_ERROR: 'plugin:error',\n\n  MIDDLEWARE_ADDED: 'middleware:added',\n  MIDDLEWARE_REMOVED: 'middleware:removed',\n  MIDDLEWARE_ERROR: 'middleware:error',\n\n  STATE_CHANGED: 'state:changed',\n  STATE_CLEARED: 'state:cleared',\n\n  CONFIG_CHANGED: 'config:changed',\n\n  ROUTE_CHANGED: 'route:changed',\n  ROUTE_ERROR: 'route:error',\n\n  THEME_CHANGED: 'theme:changed',\n\n  LOCALE_CHANGED: 'locale:changed',\n} as const\n\n/**\n * 事件命名空间类 - 功能增强\n * 提供命名空间隔离的事件管理\n */\nexport class EventNamespace {\n  constructor(\n    private eventManager: EventManagerImpl,\n    private namespace: string\n  ) { }\n\n  private getNamespacedEvent(event: string): string {\n    return `${this.namespace}:${event}`\n  }\n\n  on(event: string, handler: EventHandler, priority?: number): void {\n    this.eventManager.on(this.getNamespacedEvent(event), handler, priority ?? 0)\n  }\n\n  once(event: string, handler: EventHandler, priority?: number): void {\n    this.eventManager.once(this.getNamespacedEvent(event), handler, priority ?? 0)\n  }\n\n  emit(event: string, data?: unknown): void {\n    this.eventManager.emit(this.getNamespacedEvent(event), data)\n  }\n\n  off(event: string, handler?: EventHandler): void {\n    this.eventManager.off(this.getNamespacedEvent(event), handler)\n  }\n\n  clear(): void {\n    // 清理该命名空间下的所有事件\n    const namespacedPrefix = `${this.namespace}:`\n    const eventsToRemove: string[] = []\n\n    for (const event of this.eventManager.eventNames()) {\n      if (event.startsWith(namespacedPrefix)) {\n        eventsToRemove.push(event)\n      }\n    }\n\n    for (const event of eventsToRemove) {\n      this.eventManager.removeAllListeners(event)\n    }\n  }\n}\n\n/**\n * 事件防抖器类 - 功能增强\n */\nexport class EventDebouncer {\n  private timeoutId?: number\n  private lastArgs?: unknown\n\n  constructor(\n    private eventManager: EventManagerImpl,\n    private event: string,\n    private delay: number\n  ) { }\n\n  emit(data?: unknown): void {\n    this.lastArgs = data\n\n    if (this.timeoutId) {\n      window.clearTimeout(this.timeoutId)\n    }\n\n    this.timeoutId = window.setTimeout(() => {\n      this.eventManager.emit(this.event, this.lastArgs)\n      this.timeoutId = undefined\n    }, this.delay)\n  }\n\n  cancel(): void {\n    if (this.timeoutId) {\n      window.clearTimeout(this.timeoutId)\n      this.timeoutId = undefined\n    }\n  }\n\n  flush(): void {\n    if (this.timeoutId) {\n      window.clearTimeout(this.timeoutId)\n      this.eventManager.emit(this.event, this.lastArgs)\n      this.timeoutId = undefined\n    }\n  }\n\n  destroy(): void {\n    this.cancel()\n    this.lastArgs = undefined\n  }\n}\n\n/**\n * 事件节流器类 - 功能增强\n */\nexport class EventThrottler {\n  private lastEmitTime = 0\n  private timeoutId?: number\n  private lastArgs?: unknown\n\n  constructor(\n    private eventManager: EventManagerImpl,\n    private event: string,\n    private interval: number\n  ) { }\n\n  emit(data?: unknown): void {\n    const now = Date.now()\n    this.lastArgs = data\n\n    if (now - this.lastEmitTime >= this.interval) {\n      this.eventManager.emit(this.event, data)\n      this.lastEmitTime = now\n    } else if (!this.timeoutId) {\n      // 设置延迟触发，确保最后一次调用会被执行\n      const remainingTime = this.interval - (now - this.lastEmitTime)\n      this.timeoutId = window.setTimeout(() => {\n        this.eventManager.emit(this.event, this.lastArgs)\n        this.lastEmitTime = Date.now()\n        this.timeoutId = undefined\n      }, remainingTime)\n    }\n  }\n\n  cancel(): void {\n    if (this.timeoutId) {\n      window.clearTimeout(this.timeoutId)\n      this.timeoutId = undefined\n    }\n  }\n\n  destroy(): void {\n    this.cancel()\n    this.lastArgs = undefined\n    this.lastEmitTime = 0\n  }\n}\n\n// 在 EventManagerImpl 类中添加 destroy 方法（应该在类内部，这里作为补充导出）\nexport interface EventManagerWithDestroy<TEventMap extends EventMap = EventMap> extends EventManager<TEventMap> {\n  destroy: () => void;\n}\n\nexport function createEventManager<TEventMap extends EventMap = EventMap>(\n  logger?: Logger\n): EventManagerWithDestroy<TEventMap> {\n  const manager = new EventManagerImpl<TEventMap>(logger);\n\n  // 添加 destroy 方法\n  (manager as any).destroy = function () {\n    // 清理定时器\n    if (this.cleanupTimer !== null) {\n      clearInterval(this.cleanupTimer)\n      this.cleanupTimer = null\n    }\n\n    // 清理所有事件监听器\n    this.events.clear()\n\n    // 清理缓存\n    this.sortedListenersCache.clear()\n\n    // 清理统计信息\n    this.eventStats.clear()\n\n    // 清理对象池\n    this.eventPool.clear()\n  };\n\n  return manager as EventManagerWithDestroy<TEventMap>;\n}\n"],"names":[],"mappings":"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"}