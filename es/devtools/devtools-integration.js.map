{"version":3,"file":"devtools-integration.js","sources":["../../src/devtools/devtools-integration.ts"],"sourcesContent":["/**\n * Vue DevTools 集成\n *\n * 提供与 Vue DevTools 的深度集成,允许在开发工具中查看和调试引擎状态\n */\n\nimport type { App } from 'vue'\nimport type { Engine } from '../types'\nimport process from 'node:process'\n\nimport { getLogger } from '../logger/logger'\n\nexport interface DevToolsTimelineEvent {\n  time: number\n  title: string\n  subtitle?: string\n  data?: Record<string, unknown>\n  groupId?: string\n  logType?: 'default' | 'warning' | 'error'\n}\n\nexport interface DevToolsInspectorState {\n  key: string\n  value: unknown\n  editable?: boolean\n  type?: string\n}\n\nexport interface DevToolsInspectorTreeNode {\n  id: string\n  label: string\n  children?: DevToolsInspectorTreeNode[]\n}\n\nexport interface DevToolsOptions {\n  /**\n   * 是否启用 DevTools 集成\n   * @default process.env.NODE_ENV !== 'production'\n   */\n  enabled?: boolean\n\n  /**\n   * 时间线事件的最大数量\n   * @default 1000\n   */\n  maxTimelineEvents?: number\n\n  /**\n   * 是否记录性能事件\n   * @default true\n   */\n  trackPerformance?: boolean\n\n  /**\n   * 是否记录状态变化\n   * @default true\n   */\n  trackStateChanges?: boolean\n\n  /**\n   * 是否记录错误\n   * @default true\n   */\n  trackErrors?: boolean\n}\n\n/**\n * DevTools 集成管理器\n */\nexport class DevToolsIntegration {\n  private logger = getLogger('DevToolsIntegration')\n\n  private app?: App\n  private engine?: Engine\n  private options: Required<DevToolsOptions>\n  private timelineEvents: DevToolsTimelineEvent[] = []\n   \n  private devtoolsApi: any = null\n\n  constructor(options: DevToolsOptions = {}) {\n    this.options = {\n      enabled: (typeof process !== 'undefined' && process.env?.NODE_ENV !== 'production') || false,\n      maxTimelineEvents: 1000,\n      trackPerformance: true,\n      trackStateChanges: true,\n      trackErrors: true,\n      ...options\n    }\n  }\n\n  /**\n   * 初始化 DevTools 集成\n   */\n  init(app: App, engine: Engine): void {\n    if (!this.options.enabled) {\n      return\n    }\n\n    this.app = app\n    this.engine = engine\n\n    // 等待 DevTools 准备就绪\n    if (typeof window !== 'undefined') {\n      this.setupDevTools()\n    }\n  }\n\n  /**\n   * 设置 DevTools\n   */\n  private setupDevTools(): void {\n    // 检查 Vue DevTools 是否可用\n    const target = typeof window !== 'undefined' ? window : globalThis\n     \n    const devtoolsHook = (target as any).__VUE_DEVTOOLS_GLOBAL_HOOK__\n\n    if (!devtoolsHook) {\n      this.logger.warn('[Engine DevTools] Vue DevTools not detected')\n      return\n    }\n\n    this.devtoolsApi = devtoolsHook\n\n    // 注册自定义检查器\n    this.registerInspector()\n\n    // 注册时间线层\n    this.registerTimeline()\n\n    // 设置事件监听\n    this.setupEventListeners()\n  }\n\n  /**\n   * 注册自定义检查器\n   */\n  private registerInspector(): void {\n    if (!this.devtoolsApi || !this.app) {\n      return\n    }\n\n    try {\n       \n      this.devtoolsApi.on.setupDevtoolsPlugin?.((api: any) => {\n        api.addInspector({\n          id: 'ldesign-engine',\n          label: 'LDesign Engine',\n          icon: 'settings',\n          treeFilterPlaceholder: 'Search engine state...'\n        })\n\n        // 提供检查器树\n         \n        api.on.getInspectorTree((payload: any) => {\n          if (payload.inspectorId === 'ldesign-engine') {\n            payload.rootNodes = this.getInspectorTree()\n          }\n        })\n\n        // 提供检查器状态\n         \n        api.on.getInspectorState((payload: any) => {\n          if (payload.inspectorId === 'ldesign-engine') {\n            payload.state = this.getInspectorState(payload.nodeId)\n          }\n        })\n\n        // 处理状态编辑\n         \n        api.on.editInspectorState((payload: any) => {\n          if (payload.inspectorId === 'ldesign-engine') {\n            this.editInspectorState(payload)\n          }\n        })\n      })\n    } catch (error) {\n      this.logger.error('[Engine DevTools] Failed to register inspector:', error)\n    }\n  }\n\n  /**\n   * 注册时间线层\n   */\n  private registerTimeline(): void {\n    if (!this.devtoolsApi) {\n      return\n    }\n\n    try {\n       \n      this.devtoolsApi.on.setupDevtoolsPlugin?.((api: any) => {\n        // 性能时间线\n        if (this.options.trackPerformance) {\n          api.addTimelineLayer({\n            id: 'ldesign-performance',\n            label: 'Performance',\n            color: 0x41B883\n          })\n        }\n\n        // 状态变化时间线\n        if (this.options.trackStateChanges) {\n          api.addTimelineLayer({\n            id: 'ldesign-state',\n            label: 'State Changes',\n            color: 0x42B983\n          })\n        }\n\n        // 错误时间线\n        if (this.options.trackErrors) {\n          api.addTimelineLayer({\n            id: 'ldesign-errors',\n            label: 'Errors',\n            color: 0xFF5252\n          })\n        }\n      })\n    } catch (error) {\n      this.logger.error('[Engine DevTools] Failed to register timeline:', error)\n    }\n  }\n\n  /**\n   * 设置事件监听\n   */\n  private setupEventListeners(): void {\n    if (!this.engine) {\n      return\n    }\n\n    // 监听性能事件\n    if (this.options.trackPerformance) {\n      // 这里可以集成性能管理器的事件\n    }\n\n    // 监听状态变化\n    if (this.options.trackStateChanges) {\n      // 这里可以集成状态管理器的事件\n    }\n\n    // 监听错误\n    if (this.options.trackErrors) {\n      // 这里可以集成错误管理器的事件\n    }\n  }\n\n  /**\n   * 获取检查器树\n   */\n  private getInspectorTree(): DevToolsInspectorTreeNode[] {\n    if (!this.engine) {\n      return []\n    }\n\n    return [\n      {\n        id: 'config',\n        label: 'Configuration',\n        children: []\n      },\n      {\n        id: 'state',\n        label: 'State',\n        children: []\n      },\n      {\n        id: 'performance',\n        label: 'Performance',\n        children: []\n      },\n      {\n        id: 'errors',\n        label: 'Errors',\n        children: []\n      }\n    ]\n  }\n\n  /**\n   * 获取检查器状态\n   */\n  private getInspectorState(nodeId: string): Record<string, DevToolsInspectorState[]> {\n    if (!this.engine) {\n      return {}\n    }\n\n    const state: Record<string, DevToolsInspectorState[]> = {}\n\n    switch (nodeId) {\n      case 'config':\n        state.Configuration = this.getConfigState()\n        break\n      case 'state':\n        state.State = this.getStateState()\n        break\n      case 'performance':\n        state.Performance = this.getPerformanceState()\n        break\n      case 'errors':\n        state.Errors = this.getErrorsState()\n        break\n    }\n\n    return state\n  }\n\n  /**\n   * 获取配置状态\n   */\n  private getConfigState(): DevToolsInspectorState[] {\n    // 实现配置状态获取\n    return []\n  }\n\n  /**\n   * 获取状态状态\n   */\n  private getStateState(): DevToolsInspectorState[] {\n    // 实现状态状态获取\n    return []\n  }\n\n  /**\n   * 获取性能状态\n   */\n  private getPerformanceState(): DevToolsInspectorState[] {\n    // 实现性能状态获取\n    return []\n  }\n\n  /**\n   * 获取错误状态\n   */\n  private getErrorsState(): DevToolsInspectorState[] {\n    // 实现错误状态获取\n    return []\n  }\n\n  /**\n   * 编辑检查器状态\n   */\n  private editInspectorState(): void {\n    // 实现状态编辑\n  }\n\n  /**\n   * 添加时间线事件\n   */\n  addTimelineEvent(layerId: string, event: DevToolsTimelineEvent): void {\n    if (!this.options.enabled || !this.devtoolsApi) {\n      return\n    }\n\n    // 添加到事件列表\n    this.timelineEvents.push(event)\n\n    // 限制事件数量\n    if (this.timelineEvents.length > this.options.maxTimelineEvents) {\n      this.timelineEvents.shift()\n    }\n\n    // 发送到 DevTools\n    try {\n       \n      this.devtoolsApi.on.setupDevtoolsPlugin?.((api: any) => {\n        api.addTimelineEvent({\n          layerId,\n          event: {\n            time: event.time,\n            data: event.data,\n            title: event.title,\n            subtitle: event.subtitle,\n            groupId: event.groupId,\n            logType: event.logType || 'default'\n          }\n        })\n      })\n    } catch (error) {\n      this.logger.error('[Engine DevTools] Failed to add timeline event:', error)\n    }\n  }\n\n  /**\n   * 销毁 DevTools 集成\n   */\n  destroy(): void {\n    this.app = undefined\n    this.engine = undefined\n    this.timelineEvents = []\n    this.devtoolsApi = null\n  }\n}\n\n/**\n * 创建 DevTools 集成实例\n */\nexport function createDevToolsIntegration(options?: DevToolsOptions): DevToolsIntegration {\n  return new DevToolsIntegration(options)\n}\n"],"names":[],"mappings":"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"}