{"version":3,"file":"dependency-resolver.js","sources":["../../src/plugins/dependency-resolver.ts"],"sourcesContent":["/**\r\n * Plugin Dependency Resolver\r\n * \r\n * 提供插件依赖解析功能：\r\n * - 拓扑排序确定加载顺序\r\n * - 循环依赖检测\r\n * - 可选依赖支持\r\n * - 版本兼容性检查\r\n * - 依赖图可视化\r\n */\r\n\r\nimport type { Logger, Plugin  } from '../types'\r\n\r\n\r\n// 依赖类型\r\nexport type DependencyType = 'required' | 'optional' | 'peer'\r\n\r\n// 版本范围\r\nexport interface VersionRange {\r\n  min?: string\r\n  max?: string\r\n  exact?: string\r\n}\r\n\r\n// 增强的插件依赖信息\r\nexport interface PluginDependency {\r\n  name: string\r\n  type?: DependencyType\r\n  version?: string | VersionRange\r\n  condition?: () => boolean // 条件依赖\r\n}\r\n\r\n// 插件节点\r\nexport interface PluginNode {\r\n  plugin: Plugin\r\n  dependencies: PluginDependency[]\r\n  dependents: Set<string>\r\n  depth: number\r\n  visited: boolean\r\n  processing: boolean\r\n}\r\n\r\n// 依赖解析结果\r\nexport interface ResolutionResult {\r\n  success: boolean\r\n  order?: Plugin[]\r\n  cycles?: string[][]\r\n  missing?: string[]\r\n  incompatible?: Array<{\r\n    plugin: string\r\n    dependency: string\r\n    reason: string\r\n  }>\r\n  warnings?: string[]\r\n}\r\n\r\n// 依赖图\r\nexport interface DependencyGraph {\r\n  nodes: Map<string, PluginNode>\r\n  edges: Map<string, Set<string>>\r\n  roots: Set<string>\r\n  leaves: Set<string>\r\n}\r\n\r\n/**\r\n * 插件依赖解析器\r\n */\r\nexport class DependencyResolver {\r\n  private graph: DependencyGraph = {\r\n    nodes: new Map(),\r\n    edges: new Map(),\r\n    roots: new Set(),\r\n    leaves: new Set()\r\n  }\r\n  \r\n  private cycles: string[][] = []\r\n  private missing: Set<string> = new Set()\r\n  private incompatible: Array<{\r\n    plugin: string\r\n    dependency: string\r\n    reason: string\r\n  }> = []\r\n  \r\n  constructor(private logger?: Logger) {}\r\n\r\n  /**\r\n   * 解析插件依赖并返回加载顺序\r\n   */\r\n  resolve(plugins: Plugin[]): ResolutionResult {\r\n    this.reset()\r\n    \r\n    // 构建依赖图\r\n    this.buildGraph(plugins)\r\n    \r\n    // 检测循环依赖\r\n    this.detectCycles()\r\n    \r\n    if (this.cycles.length > 0) {\r\n      this.logger?.error('Circular dependencies detected', this.cycles)\r\n      return {\r\n        success: false,\r\n        cycles: this.cycles,\r\n        missing: Array.from(this.missing),\r\n        incompatible: this.incompatible\r\n      }\r\n    }\r\n    \r\n    // 检查缺失依赖\r\n    this.checkMissingDependencies()\r\n    \r\n    if (this.missing.size > 0 && !this.hasOnlyOptionalMissing()) {\r\n      this.logger?.error('Missing required dependencies', Array.from(this.missing))\r\n      return {\r\n        success: false,\r\n        missing: Array.from(this.missing),\r\n        incompatible: this.incompatible\r\n      }\r\n    }\r\n    \r\n    // 检查版本兼容性\r\n    this.checkVersionCompatibility(plugins)\r\n    \r\n    if (this.incompatible.length > 0) {\r\n      const criticalIncompatible = this.incompatible.filter(\r\n        i => !this.isOptionalDependency(i.plugin, i.dependency)\r\n      )\r\n      \r\n      if (criticalIncompatible.length > 0) {\r\n        this.logger?.error('Incompatible plugin versions', criticalIncompatible)\r\n        return {\r\n          success: false,\r\n          incompatible: this.incompatible,\r\n          missing: Array.from(this.missing)\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 执行拓扑排序\r\n    const order = this.topologicalSort()\r\n    \r\n    if (!order) {\r\n      return {\r\n        success: false,\r\n        cycles: this.cycles,\r\n        missing: Array.from(this.missing),\r\n        incompatible: this.incompatible\r\n      }\r\n    }\r\n    \r\n    // 生成警告信息\r\n    const warnings = this.generateWarnings()\r\n    \r\n    this.logger?.info('Plugin dependency resolution completed', {\r\n      totalPlugins: plugins.length,\r\n      loadOrder: order.map(p => p.name),\r\n      warnings: warnings.length\r\n    })\r\n    \r\n    return {\r\n      success: true,\r\n      order,\r\n      warnings,\r\n      missing: Array.from(this.missing).filter(m => this.isOptionalDependency('', m)),\r\n      incompatible: this.incompatible.filter(i => this.isOptionalDependency(i.plugin, i.dependency))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 构建依赖图\r\n   */\r\n  private buildGraph(plugins: Plugin[]): void {\r\n    // 创建节点\r\n    for (const plugin of plugins) {\r\n      const dependencies = this.parseDependencies(plugin)\r\n      \r\n      const node: PluginNode = {\r\n        plugin,\r\n        dependencies,\r\n        dependents: new Set(),\r\n        depth: 0,\r\n        visited: false,\r\n        processing: false\r\n      }\r\n      \r\n      this.graph.nodes.set(plugin.name, node)\r\n      this.graph.edges.set(plugin.name, new Set())\r\n    }\r\n    \r\n    // 建立边和依赖关系\r\n    for (const [name, node] of this.graph.nodes) {\r\n      for (const dep of node.dependencies) {\r\n        if (this.graph.nodes.has(dep.name)) {\r\n          this.graph.edges.get(name)!.add(dep.name)\r\n          this.graph.nodes.get(dep.name)!.dependents.add(name)\r\n        } else if (dep.type === 'required') {\r\n          this.missing.add(dep.name)\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 识别根节点和叶节点\r\n    for (const [name, node] of this.graph.nodes) {\r\n      if (node.dependencies.length === 0 || \r\n          node.dependencies.every(d => d.type === 'optional')) {\r\n        this.graph.roots.add(name)\r\n      }\r\n      \r\n      if (node.dependents.size === 0) {\r\n        this.graph.leaves.add(name)\r\n      }\r\n    }\r\n    \r\n    // 计算深度\r\n    this.calculateDepth()\r\n  }\r\n\r\n  /**\r\n   * 解析插件依赖\r\n   */\r\n  private parseDependencies(plugin: Plugin): PluginDependency[] {\r\n    const deps: PluginDependency[] = []\r\n    \r\n    // 处理简单依赖数组\r\n    if (plugin.dependencies) {\r\n      for (const dep of plugin.dependencies) {\r\n        if (typeof dep === 'string') {\r\n          deps.push({ name: dep, type: 'required' })\r\n        } else if (typeof dep === 'object') {\r\n          deps.push(dep as PluginDependency)\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 处理对等依赖\r\n    if ((plugin as any).peerDependencies) {\r\n      for (const dep of (plugin as any).peerDependencies) {\r\n        if (typeof dep === 'string') {\r\n          deps.push({ name: dep, type: 'peer' })\r\n        } else if (typeof dep === 'object') {\r\n          deps.push({ ...dep, type: 'peer' })\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 处理可选依赖\r\n    if ((plugin as any).optionalDependencies) {\r\n      for (const dep of (plugin as any).optionalDependencies) {\r\n        if (typeof dep === 'string') {\r\n          deps.push({ name: dep, type: 'optional' })\r\n        } else if (typeof dep === 'object') {\r\n          deps.push({ ...dep, type: 'optional' })\r\n        }\r\n      }\r\n    }\r\n    \r\n    return deps\r\n  }\r\n\r\n  /**\r\n   * 检测循环依赖（使用 DFS）\r\n   */\r\n  private detectCycles(): void {\r\n    const visited = new Set<string>()\r\n    const stack = new Set<string>()\r\n    \r\n    const dfs = (nodeName: string, path: string[] = []): void => {\r\n      if (stack.has(nodeName)) {\r\n        // 发现循环\r\n        const cycleStart = path.indexOf(nodeName)\r\n        if (cycleStart !== -1) {\r\n          const cycle = path.slice(cycleStart)\r\n          cycle.push(nodeName)\r\n          this.cycles.push(cycle)\r\n          return\r\n        }\r\n      }\r\n      \r\n      if (visited.has(nodeName)) {\r\n        return\r\n      }\r\n      \r\n      visited.add(nodeName)\r\n      stack.add(nodeName)\r\n      path.push(nodeName)\r\n      \r\n      const edges = this.graph.edges.get(nodeName)\r\n      if (edges) {\r\n        for (const neighbor of edges) {\r\n          dfs(neighbor, [...path])\r\n        }\r\n      }\r\n      \r\n      stack.delete(nodeName)\r\n    }\r\n    \r\n    // 从每个节点开始 DFS\r\n    for (const nodeName of this.graph.nodes.keys()) {\r\n      if (!visited.has(nodeName)) {\r\n        dfs(nodeName)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 拓扑排序（使用 Kahn's 算法）\r\n   */\r\n  private topologicalSort(): Plugin[] | null {\r\n    const inDegree = new Map<string, number>()\r\n    const queue: string[] = []\r\n    const sorted: Plugin[] = []\r\n    \r\n    // 计算入度\r\n    for (const [name] of this.graph.nodes) {\r\n      inDegree.set(name, 0)\r\n    }\r\n    \r\n    for (const [, edges] of this.graph.edges) {\r\n      for (const target of edges) {\r\n        inDegree.set(target, (inDegree.get(target) || 0) + 1)\r\n      }\r\n    }\r\n    \r\n    // 找出入度为 0 的节点\r\n    for (const [name, degree] of inDegree) {\r\n      if (degree === 0) {\r\n        queue.push(name)\r\n      }\r\n    }\r\n    \r\n    // 执行拓扑排序\r\n    while (queue.length > 0) {\r\n      const current = queue.shift()!\r\n      const node = this.graph.nodes.get(current)\r\n      \r\n      if (node) {\r\n        sorted.push(node.plugin)\r\n        \r\n        // 更新相邻节点的入度\r\n        const edges = this.graph.edges.get(current)\r\n        if (edges) {\r\n          for (const neighbor of edges) {\r\n            const newDegree = (inDegree.get(neighbor) || 0) - 1\r\n            inDegree.set(neighbor, newDegree)\r\n            \r\n            if (newDegree === 0) {\r\n              queue.push(neighbor)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 检查是否所有节点都被排序\r\n    if (sorted.length !== this.graph.nodes.size) {\r\n      this.logger?.error('Topological sort failed - graph has cycles or disconnected components')\r\n      return null\r\n    }\r\n    \r\n    return sorted\r\n  }\r\n\r\n  /**\r\n   * 计算节点深度\r\n   */\r\n  private calculateDepth(): void {\r\n    const visited = new Set<string>()\r\n    \r\n    const calculateNodeDepth = (nodeName: string): number => {\r\n      if (visited.has(nodeName)) {\r\n        const node = this.graph.nodes.get(nodeName)\r\n        return node?.depth || 0\r\n      }\r\n      \r\n      visited.add(nodeName)\r\n      const node = this.graph.nodes.get(nodeName)\r\n      if (!node) return 0\r\n      \r\n      let maxDepth = 0\r\n      const edges = this.graph.edges.get(nodeName)\r\n      \r\n      if (edges) {\r\n        for (const dep of edges) {\r\n          const depthValue = calculateNodeDepth(dep) + 1\r\n          maxDepth = Math.max(maxDepth, depthValue)\r\n        }\r\n      }\r\n      \r\n      node.depth = maxDepth\r\n      return maxDepth\r\n    }\r\n    \r\n    for (const nodeName of this.graph.nodes.keys()) {\r\n      calculateNodeDepth(nodeName)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 检查缺失的依赖\r\n   */\r\n  private checkMissingDependencies(): void {\r\n    for (const [, node] of this.graph.nodes) {\r\n      for (const dep of node.dependencies) {\r\n        if (!this.graph.nodes.has(dep.name)) {\r\n          // 检查条件依赖\r\n          if (dep.condition && !dep.condition()) {\r\n            continue\r\n          }\r\n          \r\n          if (dep.type === 'required') {\r\n            this.missing.add(dep.name)\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 检查版本兼容性\r\n   */\r\n  private checkVersionCompatibility(plugins: Plugin[]): void {\r\n    const pluginVersions = new Map<string, string>()\r\n    \r\n    // 收集插件版本\r\n    for (const plugin of plugins) {\r\n      pluginVersions.set(plugin.name, plugin.version || '0.0.0')\r\n    }\r\n    \r\n    // 检查每个依赖的版本要求\r\n    for (const [pluginName, node] of this.graph.nodes) {\r\n      for (const dep of node.dependencies) {\r\n        const depVersion = pluginVersions.get(dep.name)\r\n        \r\n        if (!depVersion) continue\r\n        \r\n        if (dep.version) {\r\n          const compatible = this.isVersionCompatible(depVersion, dep.version)\r\n          \r\n          if (!compatible) {\r\n            this.incompatible.push({\r\n              plugin: pluginName,\r\n              dependency: dep.name,\r\n              reason: `Required ${this.formatVersionRequirement(dep.version)}, got ${depVersion}`\r\n            })\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 检查版本兼容性\r\n   */\r\n  private isVersionCompatible(\r\n    version: string, \r\n    requirement: string | VersionRange\r\n  ): boolean {\r\n    if (typeof requirement === 'string') {\r\n      // 简单版本匹配\r\n      if (requirement.startsWith('^')) {\r\n        // 兼容主版本\r\n        const reqMajor = requirement.slice(1).split('.')[0]\r\n        const verMajor = version.split('.')[0]\r\n        return reqMajor === verMajor\r\n      } else if (requirement.startsWith('~')) {\r\n        // 兼容次版本\r\n        const reqParts = requirement.slice(1).split('.')\r\n        const verParts = version.split('.')\r\n        return reqParts[0] === verParts[0] && reqParts[1] === verParts[1]\r\n      } else {\r\n        // 精确匹配\r\n        return version === requirement\r\n      }\r\n    } else {\r\n      // 范围匹配\r\n      const verParts = version.split('.').map(Number)\r\n      \r\n      if (requirement.exact) {\r\n        return version === requirement.exact\r\n      }\r\n      \r\n      if (requirement.min) {\r\n        const minParts = requirement.min.split('.').map(Number)\r\n        for (let i = 0; i < minParts.length; i++) {\r\n          if ((verParts[i] || 0) < minParts[i]) return false\r\n          if ((verParts[i] || 0) > minParts[i]) break\r\n        }\r\n      }\r\n      \r\n      if (requirement.max) {\r\n        const maxParts = requirement.max.split('.').map(Number)\r\n        for (let i = 0; i < maxParts.length; i++) {\r\n          if ((verParts[i] || 0) > maxParts[i]) return false\r\n          if ((verParts[i] || 0) < maxParts[i]) break\r\n        }\r\n      }\r\n      \r\n      return true\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 格式化版本要求\r\n   */\r\n  private formatVersionRequirement(requirement: string | VersionRange): string {\r\n    if (typeof requirement === 'string') {\r\n      return requirement\r\n    }\r\n    \r\n    if (requirement.exact) {\r\n      return `= ${requirement.exact}`\r\n    }\r\n    \r\n    const parts: string[] = []\r\n    if (requirement.min) parts.push(`>= ${requirement.min}`)\r\n    if (requirement.max) parts.push(`<= ${requirement.max}`)\r\n    \r\n    return parts.join(' and ')\r\n  }\r\n\r\n  /**\r\n   * 检查是否只有可选依赖缺失\r\n   */\r\n  private hasOnlyOptionalMissing(): boolean {\r\n    for (const missing of this.missing) {\r\n      let isOptional = false\r\n      \r\n      for (const [, node] of this.graph.nodes) {\r\n        const dep = node.dependencies.find(d => d.name === missing)\r\n        if (dep && dep.type === 'optional') {\r\n          isOptional = true\r\n          break\r\n        }\r\n      }\r\n      \r\n      if (!isOptional) {\r\n        return false\r\n      }\r\n    }\r\n    \r\n    return true\r\n  }\r\n\r\n  /**\r\n   * 检查是否是可选依赖\r\n   */\r\n  private isOptionalDependency(plugin: string, dependency: string): boolean {\r\n    if (!plugin) {\r\n      // 检查所有插件\r\n      for (const [, node] of this.graph.nodes) {\r\n        const dep = node.dependencies.find(d => d.name === dependency)\r\n        if (dep && dep.type === 'optional') {\r\n          return true\r\n        }\r\n      }\r\n      return false\r\n    }\r\n    \r\n    const node = this.graph.nodes.get(plugin)\r\n    if (!node) return false\r\n    \r\n    const dep = node.dependencies.find(d => d.name === dependency)\r\n    return dep?.type === 'optional'\r\n  }\r\n\r\n  /**\r\n   * 生成警告信息\r\n   */\r\n  private generateWarnings(): string[] {\r\n    const warnings: string[] = []\r\n    \r\n    // 可选依赖缺失警告\r\n    for (const missing of this.missing) {\r\n      if (this.isOptionalDependency('', missing)) {\r\n        warnings.push(`Optional dependency \"${missing}\" is not available`)\r\n      }\r\n    }\r\n    \r\n    // 版本兼容性警告\r\n    for (const incomp of this.incompatible) {\r\n      if (this.isOptionalDependency(incomp.plugin, incomp.dependency)) {\r\n        warnings.push(\r\n          `Optional dependency version mismatch: ${incomp.plugin} -> ${incomp.dependency}: ${incomp.reason}`\r\n        )\r\n      }\r\n    }\r\n    \r\n    // 深度警告\r\n    for (const [name, node] of this.graph.nodes) {\r\n      if (node.depth > 5) {\r\n        warnings.push(`Plugin \"${name}\" has a deep dependency chain (depth: ${node.depth})`)\r\n      }\r\n    }\r\n    \r\n    return warnings\r\n  }\r\n\r\n  /**\r\n   * 获取依赖图的可视化表示\r\n   */\r\n  getVisualization(format: 'mermaid' | 'dot' | 'json' = 'json'): string {\r\n    switch (format) {\r\n      case 'mermaid':\r\n        return this.toMermaid()\r\n      case 'dot':\r\n        return this.toDot()\r\n      default:\r\n        return this.toJson()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 转换为 Mermaid 图\r\n   */\r\n  private toMermaid(): string {\r\n    const lines: string[] = ['graph TD']\r\n    \r\n    for (const [from, edges] of this.graph.edges) {\r\n      for (const to of edges) {\r\n        const fromNode = this.graph.nodes.get(from)\r\n        const dep = fromNode?.dependencies.find(d => d.name === to)\r\n        const style = dep?.type === 'optional' ? '-.->|optional|' : '-->'\r\n        lines.push(`  ${from}${style}${to}`)\r\n      }\r\n    }\r\n    \r\n    // 标记缺失的依赖\r\n    for (const missing of this.missing) {\r\n      lines.push(`  ${missing}[${missing} - MISSING]`)\r\n      lines.push(`  style ${missing} fill:#f96`)\r\n    }\r\n    \r\n    return lines.join('\\n')\r\n  }\r\n\r\n  /**\r\n   * 转换为 DOT 图\r\n   */\r\n  private toDot(): string {\r\n    const lines: string[] = ['digraph Dependencies {']\r\n    \r\n    for (const [from, edges] of this.graph.edges) {\r\n      for (const to of edges) {\r\n        const fromNode = this.graph.nodes.get(from)\r\n        const dep = fromNode?.dependencies.find(d => d.name === to)\r\n        const style = dep?.type === 'optional' ? 'style=dashed' : ''\r\n        lines.push(`  \"${from}\" -> \"${to}\" [${style}];`)\r\n      }\r\n    }\r\n    \r\n    // 标记缺失的依赖\r\n    for (const missing of this.missing) {\r\n      lines.push(`  \"${missing}\" [style=filled,fillcolor=red,label=\"${missing} (MISSING)\"];`)\r\n    }\r\n    \r\n    lines.push('}')\r\n    return lines.join('\\n')\r\n  }\r\n\r\n  /**\r\n   * 转换为 JSON\r\n   */\r\n  private toJson(): string {\r\n    const result = {\r\n      nodes: Array.from(this.graph.nodes.entries()).map(([name, node]) => ({\r\n        name,\r\n        version: node.plugin.version,\r\n        depth: node.depth,\r\n        dependencies: node.dependencies,\r\n        dependents: Array.from(node.dependents)\r\n      })),\r\n      edges: Array.from(this.graph.edges.entries()).map(([from, tos]) => ({\r\n        from,\r\n        to: Array.from(tos)\r\n      })),\r\n      roots: Array.from(this.graph.roots),\r\n      leaves: Array.from(this.graph.leaves),\r\n      cycles: this.cycles,\r\n      missing: Array.from(this.missing),\r\n      incompatible: this.incompatible\r\n    }\r\n    \r\n    return JSON.stringify(result, null, 2)\r\n  }\r\n\r\n  /**\r\n   * 重置解析器状态\r\n   */\r\n  private reset(): void {\r\n    this.graph = {\r\n      nodes: new Map(),\r\n      edges: new Map(),\r\n      roots: new Set(),\r\n      leaves: new Set()\r\n    }\r\n    this.cycles = []\r\n    this.missing = new Set()\r\n    this.incompatible = []\r\n  }\r\n}\r\n\r\n/**\r\n * 创建依赖解析器实例\r\n */\r\nexport function createDependencyResolver(logger?: Logger): DependencyResolver {\r\n  return new DependencyResolver(logger)\r\n}"],"names":["node","dep"],"mappings":"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"}