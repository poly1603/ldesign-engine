{"version":3,"file":"plugin-shared-state.js","sources":["../../src/plugins/plugin-shared-state.ts"],"sourcesContent":["/**\r\n * Plugin Shared State System\r\n * \r\n * Provides reactive state sharing between plugins with:\r\n * - Namespace isolation\r\n * - Type safety\r\n * - Cross-plugin communication\r\n * - State synchronization\r\n */\r\n\r\nimport type { Logger, Plugin } from '../types'\r\nimport { computed, type ComputedRef, reactive, ref, type Ref, watch, type WatchCallback } from 'vue'\r\nimport { ReactiveStateManager } from '../state/reactive-state'\r\n\r\n// Plugin state access levels\r\nexport type AccessLevel = 'private' | 'protected' | 'public'\r\n\r\n// Plugin state metadata\r\nexport interface PluginStateMetadata {\r\n  pluginName: string\r\n  key: string\r\n  access: AccessLevel\r\n  description?: string\r\n  type?: string\r\n  readonly?: boolean\r\n  persist?: boolean\r\n}\r\n\r\n// Shared state entry\r\nexport interface SharedStateEntry<T = unknown> {\r\n  value: Ref<T>\r\n  metadata: PluginStateMetadata\r\n  watchers: Set<WatchCallback<T, T>>\r\n  dependencies: Set<string>\r\n}\r\n\r\n// Plugin state context\r\nexport interface PluginStateContext {\r\n  pluginName: string\r\n  permissions: Set<string>\r\n  dependencies: string[]\r\n}\r\n\r\n// Inter-plugin message\r\nexport interface PluginMessage<T = unknown> {\r\n  from: string\r\n  to: string | '*'\r\n  type: string\r\n  data: T\r\n  timestamp: number\r\n}\r\n\r\n/**\r\n * Plugin Shared State Manager\r\n * \r\n * Manages shared state between plugins with proper isolation and access control\r\n */\r\nexport class PluginSharedStateManager {\r\n  // Namespace-isolated states\r\n  private namespaces = new Map<string, ReactiveStateManager>()\r\n  \r\n  // Shared state registry\r\n  private sharedStates = new Map<string, SharedStateEntry>()\r\n  \r\n  // Plugin contexts\r\n  private pluginContexts = new Map<string, PluginStateContext>()\r\n  \r\n  // Message bus for inter-plugin communication\r\n  private messageBus = reactive<PluginMessage[]>([])\r\n  private messageHandlers = new Map<string, Set<(message: PluginMessage) => void>>()\r\n  \r\n  // Global computed states\r\n  private globalComputed = new Map<string, ComputedRef<unknown>>()\r\n  \r\n  constructor(private logger?: Logger) {}\r\n\r\n  /**\r\n   * Register a plugin with the shared state system\r\n   */\r\n  registerPlugin(plugin: Plugin): void {\r\n    const context: PluginStateContext = {\r\n      pluginName: plugin.name,\r\n      permissions: new Set(),\r\n      dependencies: (plugin.metadata?.dependencies as string[] | undefined) || []\r\n    }\r\n    \r\n    this.pluginContexts.set(plugin.name, context)\r\n    \r\n    // Create isolated namespace for the plugin\r\n    const namespace = new ReactiveStateManager(this.logger)\r\n    this.namespaces.set(plugin.name, namespace)\r\n    \r\n    this.logger?.debug(`Plugin \"${plugin.name}\" registered in shared state system`)\r\n  }\r\n\r\n  /**\r\n   * Unregister a plugin from the shared state system\r\n   */\r\n  unregisterPlugin(pluginName: string): void {\r\n    // Clean up namespace\r\n    const namespace = this.namespaces.get(pluginName)\r\n    if (namespace) {\r\n      namespace.dispose()\r\n      this.namespaces.delete(pluginName)\r\n    }\r\n    \r\n    // Clean up shared states owned by this plugin\r\n    for (const [key, entry] of this.sharedStates) {\r\n      if (entry.metadata.pluginName === pluginName) {\r\n        this.sharedStates.delete(key)\r\n      }\r\n    }\r\n    \r\n    // Clean up message handlers\r\n    this.messageHandlers.delete(pluginName)\r\n    \r\n    // Remove plugin context\r\n    this.pluginContexts.delete(pluginName)\r\n    \r\n    this.logger?.debug(`Plugin \"${pluginName}\" unregistered from shared state system`)\r\n  }\r\n\r\n  /**\r\n   * Get a plugin's isolated namespace\r\n   */\r\n  getNamespace(pluginName: string): ReactiveStateManager | undefined {\r\n    return this.namespaces.get(pluginName)\r\n  }\r\n\r\n  /**\r\n   * Create a shared state that can be accessed by other plugins\r\n   */\r\n  createSharedState<T = unknown>(\r\n    pluginName: string,\r\n    key: string,\r\n    initialValue: T,\r\n    options?: {\r\n      access?: AccessLevel\r\n      description?: string\r\n      readonly?: boolean\r\n      persist?: boolean\r\n    }\r\n  ): Ref<T> {\r\n    const fullKey = `${pluginName}:${key}`\r\n    \r\n    // Check if already exists\r\n    if (this.sharedStates.has(fullKey)) {\r\n      throw new Error(`Shared state \"${fullKey}\" already exists`)\r\n    }\r\n    \r\n    const valueRef = ref(initialValue) as Ref<T>\r\n    \r\n    const metadata: PluginStateMetadata = {\r\n      pluginName,\r\n      key,\r\n      access: options?.access || 'protected',\r\n      description: options?.description,\r\n      type: typeof initialValue,\r\n      readonly: options?.readonly || false,\r\n      persist: options?.persist || false\r\n    }\r\n    \r\n    const entry: SharedStateEntry<T> = {\r\n      value: valueRef,\r\n      metadata,\r\n      watchers: new Set(),\r\n      dependencies: new Set()\r\n    }\r\n    \r\n    this.sharedStates.set(fullKey, entry as SharedStateEntry)\r\n    \r\n    // Setup persistence if needed\r\n    if (options?.persist) {\r\n      this.setupPersistence(fullKey, valueRef)\r\n    }\r\n    \r\n    this.logger?.debug(`Created shared state \"${fullKey}\"`, metadata)\r\n    \r\n    return valueRef\r\n  }\r\n\r\n  /**\r\n   * Access a shared state from another plugin\r\n   */\r\n  accessSharedState<T = unknown>(\r\n    requestingPlugin: string,\r\n    ownerPlugin: string,\r\n    key: string\r\n  ): Ref<T> | undefined {\r\n    const fullKey = `${ownerPlugin}:${key}`\r\n    const entry = this.sharedStates.get(fullKey)\r\n    \r\n    if (!entry) {\r\n      this.logger?.warn(`Shared state \"${fullKey}\" not found`)\r\n      return undefined\r\n    }\r\n    \r\n    // Check access permissions\r\n    if (!this.checkAccess(requestingPlugin, entry.metadata)) {\r\n      this.logger?.warn(`Access denied to shared state \"${fullKey}\" for plugin \"${requestingPlugin}\"`)\r\n      return undefined\r\n    }\r\n    \r\n    // Track dependency\r\n    entry.dependencies.add(requestingPlugin)\r\n    \r\n    // Return readonly ref if the state is marked as readonly\r\n    if (entry.metadata.readonly) {\r\n      return computed(() => entry.value.value) as ComputedRef<T>\r\n    }\r\n    \r\n    return entry.value as Ref<T>\r\n  }\r\n\r\n  /**\r\n   * Watch a shared state for changes\r\n   */\r\n  watchSharedState<T = unknown>(\r\n    pluginName: string,\r\n    ownerPlugin: string,\r\n    key: string,\r\n    callback: WatchCallback<T, T>\r\n  ): () => void {\r\n    const state = this.accessSharedState<T>(pluginName, ownerPlugin, key)\r\n    \r\n    if (!state) {\r\n      throw new Error(`Cannot watch non-existent shared state \"${ownerPlugin}:${key}\"`)\r\n    }\r\n    \r\n    return watch(state, callback)\r\n  }\r\n\r\n  /**\r\n   * Create a computed state that derives from multiple shared states\r\n   */\r\n  createGlobalComputed<T = unknown>(\r\n    key: string,\r\n    getter: () => T,\r\n    options?: {\r\n      cache?: boolean\r\n      description?: string\r\n    }\r\n  ): ComputedRef<T> {\r\n    if (this.globalComputed.has(key)) {\r\n      throw new Error(`Global computed state \"${key}\" already exists`)\r\n    }\r\n    \r\n    const computedState = computed(getter)\r\n    this.globalComputed.set(key, computedState as ComputedRef<unknown>)\r\n    \r\n    this.logger?.debug(`Created global computed state \"${key}\"`, options)\r\n    \r\n    return computedState\r\n  }\r\n\r\n  /**\r\n   * Get a global computed state\r\n   */\r\n  getGlobalComputed<T = unknown>(key: string): ComputedRef<T> | undefined {\r\n    return this.globalComputed.get(key) as ComputedRef<T> | undefined\r\n  }\r\n\r\n  /**\r\n   * Send a message to another plugin or broadcast to all\r\n   */\r\n  sendMessage<T = unknown>(\r\n    from: string,\r\n    to: string | '*',\r\n    type: string,\r\n    data: T\r\n  ): void {\r\n    const message: PluginMessage<T> = {\r\n      from,\r\n      to,\r\n      type,\r\n      data,\r\n      timestamp: Date.now()\r\n    }\r\n    \r\n    this.messageBus.push(message as PluginMessage)\r\n    \r\n    // Trigger handlers\r\n    if (to === '*') {\r\n      // Broadcast to all plugins\r\n      for (const [pluginName, handlers] of this.messageHandlers) {\r\n        if (pluginName !== from) {\r\n          handlers.forEach(handler => handler(message as PluginMessage))\r\n        }\r\n      }\r\n    } else {\r\n      // Send to specific plugin\r\n      const handlers = this.messageHandlers.get(to)\r\n      if (handlers) {\r\n        handlers.forEach(handler => handler(message as PluginMessage))\r\n      }\r\n    }\r\n    \r\n    this.logger?.debug(`Message sent from \"${from}\" to \"${to}\"`, { type, data })\r\n  }\r\n\r\n  /**\r\n   * Subscribe to messages for a plugin\r\n   */\r\n  onMessage(\r\n    pluginName: string,\r\n    handler: (message: PluginMessage) => void,\r\n    filter?: (message: PluginMessage) => boolean\r\n  ): () => void {\r\n    if (!this.messageHandlers.has(pluginName)) {\r\n      this.messageHandlers.set(pluginName, new Set())\r\n    }\r\n    \r\n    const wrappedHandler = filter \r\n      ? (msg: PluginMessage) => filter(msg) && handler(msg)\r\n      : handler\r\n    \r\n    this.messageHandlers.get(pluginName)!.add(wrappedHandler)\r\n    \r\n    // Return unsubscribe function\r\n    return () => {\r\n      const handlers = this.messageHandlers.get(pluginName)\r\n      if (handlers) {\r\n        handlers.delete(wrappedHandler)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a reactive bridge between plugins\r\n   */\r\n  createBridge<T = unknown>(\r\n    sourcePlugin: string,\r\n    sourceKey: string,\r\n    targetPlugin: string,\r\n    targetKey: string,\r\n    transformer?: (value: T) => unknown\r\n  ): () => void {\r\n    const source = this.accessSharedState<T>(targetPlugin, sourcePlugin, sourceKey)\r\n    const target = this.getNamespace(targetPlugin)\r\n    \r\n    if (!source || !target) {\r\n      throw new Error('Cannot create bridge: source or target not found')\r\n    }\r\n    \r\n    // Watch source and update target\r\n    return watch(source, (newValue) => {\r\n      const transformed = transformer ? transformer(newValue) : newValue\r\n      target.set(targetKey, transformed)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Synchronize state between multiple plugins\r\n   */\r\n  synchronize(\r\n    plugins: string[],\r\n    key: string,\r\n    options?: {\r\n      bidirectional?: boolean\r\n      debounce?: number\r\n    }\r\n  ): () => void {\r\n    const unsubscribes: Array<() => void> = []\r\n    const { bidirectional = true, debounce: debounceMs = 0 } = options || {}\r\n    \r\n    let syncing = false\r\n    const syncFn = (value: unknown) => {\r\n      if (syncing) return\r\n      syncing = true\r\n      \r\n      plugins.forEach(plugin => {\r\n        const namespace = this.getNamespace(plugin)\r\n        if (namespace) {\r\n          namespace.set(key, value)\r\n        }\r\n      })\r\n      \r\n      setTimeout(() => syncing = false, 0)\r\n    }\r\n    \r\n    const debouncedSync = debounceMs > 0 \r\n      ? this.debounce(syncFn, debounceMs)\r\n      : syncFn\r\n    \r\n    // Setup watchers\r\n    plugins.forEach(plugin => {\r\n      const namespace = this.getNamespace(plugin)\r\n      if (namespace && bidirectional) {\r\n        const unsubscribe = namespace.watch(key, debouncedSync)\r\n        unsubscribes.push(unsubscribe)\r\n      }\r\n    })\r\n    \r\n    return () => {\r\n      unsubscribes.forEach(fn => fn())\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get state dependency graph\r\n   */\r\n  getDependencyGraph(): Record<string, string[]> {\r\n    const graph: Record<string, string[]> = {}\r\n    \r\n    for (const [key, entry] of this.sharedStates) {\r\n      graph[key] = Array.from(entry.dependencies)\r\n    }\r\n    \r\n    return graph\r\n  }\r\n\r\n  /**\r\n   * Get state statistics\r\n   */\r\n  getStats(): {\r\n    totalPlugins: number\r\n    totalSharedStates: number\r\n    totalGlobalComputed: number\r\n    totalMessages: number\r\n    memoryUsage: string\r\n  } {\r\n    const memoryUsage = JSON.stringify({\r\n      states: Array.from(this.sharedStates.values()).map(e => e.value.value),\r\n      messages: this.messageBus\r\n    }).length\r\n    \r\n    return {\r\n      totalPlugins: this.pluginContexts.size,\r\n      totalSharedStates: this.sharedStates.size,\r\n      totalGlobalComputed: this.globalComputed.size,\r\n      totalMessages: this.messageBus.length,\r\n      memoryUsage: `${(memoryUsage / 1024).toFixed(2)} KB`\r\n    }\r\n  }\r\n\r\n  // Helper methods\r\n  \r\n  private checkAccess(requestingPlugin: string, metadata: PluginStateMetadata): boolean {\r\n    // Public states can be accessed by anyone\r\n    if (metadata.access === 'public') {\r\n      return true\r\n    }\r\n    \r\n    // Private states can only be accessed by the owner\r\n    if (metadata.access === 'private') {\r\n      return requestingPlugin === metadata.pluginName\r\n    }\r\n    \r\n    // Protected states can be accessed by the owner and its dependencies\r\n    if (metadata.access === 'protected') {\r\n      const context = this.pluginContexts.get(requestingPlugin)\r\n      if (!context) return false\r\n      \r\n      return requestingPlugin === metadata.pluginName || \r\n             context.dependencies.includes(metadata.pluginName)\r\n    }\r\n    \r\n    return false\r\n  }\r\n\r\n  private setupPersistence<T>(key: string, valueRef: Ref<T>): void {\r\n    if (typeof window === 'undefined') return\r\n    \r\n    const storageKey = `plugin-state:${key}`\r\n    \r\n    // Load initial value\r\n    const stored = localStorage.getItem(storageKey)\r\n    if (stored) {\r\n      try {\r\n        valueRef.value = JSON.parse(stored)\r\n      } catch (error) {\r\n        this.logger?.error(`Failed to load persisted state for \"${key}\"`, error)\r\n      }\r\n    }\r\n    \r\n    // Save on change\r\n    watch(valueRef, (newValue) => {\r\n      try {\r\n        localStorage.setItem(storageKey, JSON.stringify(newValue))\r\n      } catch (error) {\r\n        this.logger?.error(`Failed to persist state for \"${key}\"`, error)\r\n      }\r\n    })\r\n  }\r\n\r\n  private debounce<T extends (...args: unknown[]) => void>(\r\n    func: T,\r\n    wait: number\r\n  ): T {\r\n    let timeout: NodeJS.Timeout | undefined\r\n    return ((...args: Parameters<T>) => {\r\n      if (timeout) clearTimeout(timeout)\r\n      timeout = setTimeout(() => func(...args), wait)\r\n    }) as T\r\n  }\r\n\r\n  /**\r\n   * Dispose and clean up all resources\r\n   */\r\n  dispose(): void {\r\n    // Dispose all namespaces\r\n    for (const namespace of this.namespaces.values()) {\r\n      namespace.dispose()\r\n    }\r\n    this.namespaces.clear()\r\n    \r\n    // Clear all shared states\r\n    this.sharedStates.clear()\r\n    \r\n    // Clear all handlers\r\n    this.messageHandlers.clear()\r\n    \r\n    // Clear computed states\r\n    this.globalComputed.clear()\r\n    \r\n    // Clear contexts\r\n    this.pluginContexts.clear()\r\n    \r\n    // Clear message bus\r\n    this.messageBus.length = 0\r\n  }\r\n}\r\n\r\n/**\r\n * Create a plugin shared state manager\r\n */\r\nexport function createPluginSharedStateManager(logger?: Logger): PluginSharedStateManager {\r\n  return new PluginSharedStateManager(logger)\r\n}\r\n\r\n/**\r\n * Plugin state composable for Vue components\r\n */\r\nexport function usePluginState<T = unknown>(\r\n  pluginName: string,\r\n  key: string,\r\n  defaultValue?: T\r\n): {\r\n  state: Ref<T | undefined>\r\n  setState: (value: T) => void\r\n  watchState: (callback: WatchCallback<T | undefined, T | undefined>) => () => void\r\n} {\r\n  const state = ref<T | undefined>(defaultValue)\r\n  \r\n  const setState = (value: T) => {\r\n    state.value = value\r\n  }\r\n  \r\n  const watchState = (callback: WatchCallback<T | undefined, T | undefined>) => {\r\n    const stopWatch = watch(state, callback as any)\r\n    return stopWatch\r\n  }\r\n  \r\n  return { \r\n    state: state as Ref<T | undefined>, \r\n    setState, \r\n    watchState \r\n  }\r\n}"],"names":[],"mappings":"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"}