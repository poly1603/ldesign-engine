{"version":3,"file":"loading.js","sources":["../../../src/directives/modules/loading.ts"],"sourcesContent":["/**\r\n * 加载状态指令\r\n * 显示加载状态和加载动画\r\n */\r\n\r\nimport type { VueDirectiveBinding } from '../base/vue-directive-adapter'\r\nimport { DirectiveBase } from '../base/directive-base'\r\nimport { defineDirective, directiveUtils } from '../base/vue-directive-adapter'\r\n\r\nexport interface LoadingOptions {\r\n  loading?: boolean\r\n  text?: string\r\n  spinner?: string\r\n  background?: string\r\n  fullscreen?: boolean\r\n  lock?: boolean\r\n}\r\n\r\nexport class LoadingDirective extends DirectiveBase {\r\n  constructor() {\r\n    super({\r\n      name: 'loading',\r\n      description: '显示加载状态',\r\n      version: '1.0.0',\r\n      category: 'feedback',\r\n      tags: ['loading', 'spinner', 'progress'],\r\n    })\r\n  }\r\n\r\n  public mounted(el: HTMLElement, binding: VueDirectiveBinding): void {\r\n    const config = this.parseConfig(binding)\r\n    this.toggleLoading(el, config)\r\n    this.log('Loading directive mounted', el)\r\n  }\r\n\r\n  public updated(el: HTMLElement, binding: VueDirectiveBinding): void {\r\n    const config = this.parseConfig(binding)\r\n    this.toggleLoading(el, config)\r\n    this.log('Loading directive updated', el)\r\n  }\r\n\r\n  public unmounted(el: HTMLElement): void {\r\n    this.removeLoading(el)\r\n    this.log('Loading directive unmounted', el)\r\n  }\r\n\r\n  private toggleLoading(el: HTMLElement, config: LoadingOptions): void {\r\n    if (config.loading) {\r\n      this.addLoading(el, config)\r\n    } else {\r\n      this.removeLoading(el)\r\n    }\r\n  }\r\n\r\n  private addLoading(el: HTMLElement, config: LoadingOptions): void {\r\n    // Remove existing overlay if any\r\n    this.removeLoading(el)\r\n\r\n    const overlay = this.createOverlay(config)\r\n\r\n    if (config.fullscreen) {\r\n      document.body.appendChild(overlay)\r\n      if (config.lock) {\r\n        document.body.style.overflow = 'hidden'\r\n      }\r\n    } else {\r\n      if (getComputedStyle(el).position === 'static') {\r\n        el.style.position = 'relative'\r\n      }\r\n      el.appendChild(overlay)\r\n    }\r\n\r\n    directiveUtils.storeData(el, 'loading-overlay', overlay)\r\n  }\r\n\r\n  private removeLoading(el: HTMLElement): void {\r\n    const overlay = directiveUtils.getData(el, 'loading-overlay') as HTMLElement\r\n    if (overlay && overlay.parentNode) {\r\n      overlay.parentNode.removeChild(overlay)\r\n    }\r\n    document.body.style.overflow = ''\r\n    directiveUtils.removeData(el, 'loading-overlay')\r\n  }\r\n\r\n  private createOverlay(config: LoadingOptions): HTMLElement {\r\n    const overlay = document.createElement('div')\r\n    overlay.className = 'v-loading-overlay'\r\n    overlay.style.position = config.fullscreen ? 'fixed' : 'absolute'\r\n    overlay.style.top = '0'\r\n    overlay.style.left = '0'\r\n    overlay.style.right = '0'\r\n    overlay.style.bottom = '0'\r\n    overlay.style.display = 'flex'\r\n    overlay.style.flexDirection = 'column'\r\n    overlay.style.alignItems = 'center'\r\n    overlay.style.justifyContent = 'center'\r\n    overlay.style.background = config.background || 'rgba(255, 255, 255, 0.9)'\r\n    overlay.style.zIndex = '9999'\r\n\r\n    const spinner = document.createElement('div')\r\n    spinner.className = 'v-loading-spinner'\r\n    spinner.innerHTML = config.spinner || this.getDefaultSpinner()\r\n    overlay.appendChild(spinner)\r\n\r\n    if (config.text) {\r\n      const text = document.createElement('div')\r\n      text.className = 'v-loading-text'\r\n      text.textContent = config.text\r\n      text.style.marginTop = '12px'\r\n      text.style.color = '#666'\r\n      text.style.fontSize = '14px'\r\n      overlay.appendChild(text)\r\n    }\r\n\r\n    return overlay\r\n  }\r\n\r\n  private getDefaultSpinner(): string {\r\n    const svg = '<svg width=\"40\" height=\"40\" viewBox=\"0 0 40 40\" xmlns=\"http://www.w3.org/2000/svg\">'\r\n    const circle = '<circle cx=\"20\" cy=\"20\" r=\"18\" stroke=\"#3498db\" stroke-width=\"3\" fill=\"none\" stroke-dasharray=\"90\" stroke-dashoffset=\"15\">'\r\n    const animate = '<animateTransform attributeName=\"transform\" type=\"rotate\" from=\"0 20 20\" to=\"360 20 20\" dur=\"1s\" repeatCount=\"indefinite\"/>'\r\n    return `${svg + circle + animate}</circle></svg>`\r\n  }\r\n\r\n  private parseConfig(binding: VueDirectiveBinding): LoadingOptions {\r\n    const value = binding.value\r\n    if (typeof value === 'boolean') {\r\n      return { loading: value }\r\n    }\r\n    if (typeof value === 'object' && value !== null) {\r\n      return value as LoadingOptions\r\n    }\r\n    return { loading: false }\r\n  }\r\n\r\n  public getExample(): string {\r\n    return `\r\n<!-- Basic loading -->\r\n<div v-loading=\"isLoading\">\r\n  Content here\r\n</div>\r\n\r\n<!-- With text -->\r\n<div v-loading=\"{\r\n  loading: isLoading,\r\n  text: 'Loading data...'\r\n}\">\r\n  Content here\r\n</div>\r\n\r\n<!-- Fullscreen loading -->\r\n<button @click=\"showFullscreenLoading\" v-loading=\"{\r\n  loading: fullscreenLoading,\r\n  fullscreen: true,\r\n  lock: true,\r\n  text: 'Please wait...'\r\n}\">\r\n  Show Fullscreen Loading\r\n</button>\r\n\r\n<!-- Custom background -->\r\n<div v-loading=\"{\r\n  loading: true,\r\n  background: 'rgba(0, 0, 0, 0.8)'\r\n}\">\r\n  Dark loading overlay\r\n</div>\r\n\r\n<script setup>\r\nimport { ref } from 'vue'\r\n\r\nconst isLoading = ref(false)\r\nconst fullscreenLoading = ref(false)\r\n\r\nconst showFullscreenLoading = () => {\r\n  fullscreenLoading.value = true\r\n  setTimeout(() => {\r\n    fullscreenLoading.value = false\r\n  }, 3000)\r\n}\r\n</script>\r\n    `\r\n  }\r\n}\r\n\r\n// Export the directive definition\r\nexport const vLoading = defineDirective(new LoadingDirective())\r\n\r\n// Export default for convenience\r\nexport default vLoading\n"],"names":[],"mappings":"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"}