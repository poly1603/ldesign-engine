{"version":3,"file":"notification-manager.js","sources":["../../src/notifications/notification-manager.ts"],"sourcesContent":["import type {\r\n  EngineNotification,\r\n  Logger,\r\n  NotificationAction,\r\n  NotificationManager,\r\n  NotificationOptions,\r\n  NotificationPosition,\r\n  NotificationProgress,\r\n  NotificationTheme,\r\n  NotificationType,\r\n} from '../types'\r\nimport type { NotificationStyleManager } from './style-manager'\r\nimport { createStyleManager } from './style-manager'\r\n\r\ninterface NotificationItem extends NotificationOptions {\r\n  id: string\r\n  createdAt: number\r\n  visible: boolean\r\n  element?: HTMLElement\r\n  timeoutId?: number\r\n  isAnimating?: boolean\r\n}\r\n\r\nexport class NotificationManagerImpl implements NotificationManager {\r\n  private notifications = new Map<string, NotificationItem>()\r\n  private containers = new Map<NotificationPosition, HTMLElement>()\r\n  private maxNotifications = 5\r\n  private defaultDuration = 4000\r\n  private defaultPosition: NotificationPosition = 'top-right'\r\n  private defaultTheme: NotificationTheme = 'light'\r\n  private idCounter = 0\r\n  private styleManager: NotificationStyleManager\r\n  private logger?: Logger\r\n  private cleanupInterval?: number\r\n  private themeUnsubscribe?: () => void\r\n  private defaultOptions: Partial<NotificationOptions> = {\r\n    position: 'top-right',\r\n    duration: 4000,\r\n    theme: 'light',\r\n    type: 'info',\r\n    closable: true,\r\n    persistent: false\r\n  }\r\n\r\n  constructor(logger?: Logger) {\r\n    this.logger = logger\r\n    this.styleManager = createStyleManager()\r\n    this.initializeContainers()\r\n    this.setupThemeWatcher()\r\n    this.injectStyles()\r\n    \r\n    // 设置定期清理\r\n    this.startCleanup()\r\n  }\r\n\r\n  /**\r\n   * 初始化所有位置的容器\r\n   */\r\n  private initializeContainers(): void {\r\n    if (typeof document === 'undefined') {\r\n      return // SSR环境\r\n    }\r\n\r\n    const positions: NotificationPosition[] = [\r\n      'top-left',\r\n      'top-center',\r\n      'top-right',\r\n      'bottom-left',\r\n      'bottom-center',\r\n      'bottom-right',\r\n    ]\r\n\r\n    positions.forEach(position => {\r\n      this.createContainer(position)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 创建指定位置的容器\r\n   */\r\n  private createContainer(position: NotificationPosition): HTMLElement {\r\n    const existing = this.containers.get(position)\r\n    if (existing) {\r\n      return existing\r\n    }\r\n\r\n    const container = document.createElement('div')\r\n    container.id = `engine-notifications-${position}`\r\n    container.className = 'engine-notifications-container'\r\n\r\n    const styles = this.styleManager.getContainerStyles(position)\r\n    this.styleManager.applyStyles(container, styles)\r\n\r\n    document.body.appendChild(container)\r\n    this.containers.set(position, container)\r\n\r\n    return container\r\n  }\r\n\r\n  /**\r\n   * 设置主题监听器\r\n   */\r\n  private setupThemeWatcher(): void {\r\n    if (this.defaultTheme === 'auto') {\r\n      this.themeUnsubscribe = this.styleManager.watchSystemTheme(systemTheme => {\r\n        this.styleManager.setTheme(systemTheme)\r\n        this.updateAllNotificationStyles()\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 更新所有通知的样式\r\n   */\r\n  private updateAllNotificationStyles(): void {\r\n    this.notifications.forEach(notification => {\r\n      if (notification.element && notification.visible) {\r\n        this.updateNotificationStyles(notification)\r\n      }\r\n    })\r\n  }\r\n\r\n  show(options: NotificationOptions): string {\r\n    const id = this.generateId()\r\n    const notification: NotificationItem = {\r\n      id,\r\n      createdAt: Date.now(),\r\n      visible: true,\r\n      type: options.type || 'info',\r\n      duration: options.duration ?? this.defaultDuration,\r\n      closable: options.closable ?? true,\r\n      position: options.position || this.defaultPosition,\r\n      theme: options.theme || this.defaultTheme,\r\n      ...options,\r\n    }\r\n\r\n    // 检查通知数量限制\r\n    const position = notification.position || this.defaultPosition\r\n    this.enforceMaxNotifications(position)\r\n\r\n    // 添加通知\r\n    this.notifications.set(id, notification)\r\n\r\n    // 渲染通知\r\n    this.renderNotification(notification)\r\n\r\n    // 设置自动关闭\r\n    if (\r\n      notification.duration &&\r\n      notification.duration > 0 &&\r\n      !notification.persistent\r\n    ) {\r\n      notification.timeoutId = window.setTimeout(() => {\r\n        this.hide(id)\r\n      }, notification.duration)\r\n    }\r\n\r\n    // 触发显示回调\r\n    if (notification.onShow) {\r\n      try {\r\n        notification.onShow()\r\n      } catch (error) {\r\n        this.logger?.error('Error in notification onShow callback', error)\r\n      }\r\n    }\r\n\r\n    this.logger?.debug('Notification shown', { id, options })\r\n    return id\r\n  }\r\n\r\n  async hide(id: string): Promise<void> {\r\n    const notification = this.notifications.get(id)\r\n    if (!notification || !notification.visible) {\r\n      return\r\n    }\r\n\r\n    notification.visible = false\r\n\r\n    // 清除自动关闭定时器\r\n    if (notification.timeoutId) {\r\n      clearTimeout(notification.timeoutId)\r\n      notification.timeoutId = undefined\r\n    }\r\n\r\n    // 触发关闭回调\r\n    if (notification.onClose) {\r\n      try {\r\n        notification.onClose()\r\n      } catch (error) {\r\n        this.logger?.error('Error in notification onClose callback', error)\r\n      }\r\n    }\r\n\r\n    // 执行退出动画并移除元素\r\n    await this.removeNotificationElement(notification)\r\n    this.notifications.delete(id)\r\n\r\n    this.logger?.debug('Notification hidden', { id })\r\n  }\r\n\r\n  async hideAll(): Promise<void> {\r\n    const hidePromises = Array.from(this.notifications.keys()).map(id =>\r\n      this.hide(id)\r\n    )\r\n    await Promise.all(hidePromises)\r\n  }\r\n\r\n  getAll(): EngineNotification[] {\r\n    return Array.from(this.notifications.values())\r\n      .filter(\r\n        (notification): notification is NotificationItem & { id: string } =>\r\n          !!notification.id && notification.visible !== false\r\n      )\r\n      .map(notification => ({\r\n        id: notification.id,\r\n        title: notification.title || '',\r\n        message: notification.message,\r\n        type: notification.type || 'info',\r\n        position: notification.position || 'top-right',\r\n        duration: notification.duration || 3000,\r\n        theme: notification.theme || 'light',\r\n        animation: notification.animation || 'fade',\r\n        icon: notification.icon,\r\n        actions: notification.actions || [],\r\n        group: notification.group,\r\n        persistent: notification.persistent || false,\r\n        closable: notification.closable !== false,\r\n        priority: notification.priority || 0,\r\n        metadata: notification.metadata,\r\n        timestamp: notification.createdAt || Date.now(),\r\n        isVisible: notification.visible !== false,\r\n        isAnimating: notification.isAnimating || false,\r\n        showProgress: !!notification.progress,\r\n        progress: notification.progress,\r\n        createdAt: notification.createdAt,\r\n        visible: notification.visible,\r\n        element: notification.element,\r\n        timeoutId: notification.timeoutId,\r\n      })) as EngineNotification[]\r\n  }\r\n\r\n  // 添加缺失的方法以满足测试需求\r\n  destroy(): void {\r\n    this.clear()\r\n    if (this.cleanupInterval) {\r\n      clearInterval(this.cleanupInterval)\r\n      this.cleanupInterval = undefined\r\n    }\r\n    // 清理主题监听器\r\n    this.cleanupThemeWatcher()\r\n    // 调用内部销毁流程\r\n    void this.destroyInternal()\r\n  }\r\n\r\n  setPosition(position: NotificationPosition): void {\r\n    this.defaultOptions.position = position\r\n  }\r\n\r\n  getPosition(): NotificationPosition {\r\n    return this.defaultOptions.position || 'top-right'\r\n  }\r\n\r\n  setTheme(theme: NotificationTheme): void {\r\n    this.defaultOptions.theme = theme\r\n    this.setThemeInternal(theme)\r\n  }\r\n\r\n  getTheme(): NotificationTheme {\r\n    return this.getThemeInternal()\r\n  }\r\n\r\n  setMaxNotifications(max: number): void {\r\n    this.setMaxNotificationsInternal(max)\r\n  }\r\n\r\n  getMaxNotifications(): number {\r\n    return this.maxNotifications\r\n  }\r\n\r\n  setDefaultDuration(duration: number): void {\r\n    this.defaultOptions.duration = duration\r\n  }\r\n\r\n  getDefaultDuration(): number {\r\n    return this.defaultOptions.duration || 3000\r\n  }\r\n\r\n  getStats() {\r\n    // 使用内部统计方法，避免重复计算并满足严格检查\r\n    return this.getStatsInternal()\r\n  }\r\n\r\n  private generateId(): string {\r\n    return `notification-${++this.idCounter}-${Date.now()}`\r\n  }\r\n\r\n  private enforceMaxNotifications(position: NotificationPosition): void {\r\n    const visibleNotifications = Array.from(this.notifications.values())\r\n      .filter(n => n.visible && n.position === position)\r\n      .sort((a, b) => {\r\n        // 优先移除低优先级的通知\r\n        if (a.priority !== b.priority) {\r\n          return (a.priority || 0) - (b.priority || 0)\r\n        }\r\n        return a.createdAt - b.createdAt\r\n      })\r\n\r\n    while (visibleNotifications.length >= this.maxNotifications) {\r\n      const toRemove = visibleNotifications.shift()\r\n      if (toRemove) {\r\n        this.hide(toRemove.id)\r\n      }\r\n    }\r\n  }\r\n\r\n  private async renderNotification(\r\n    notification: NotificationItem\r\n  ): Promise<void> {\r\n    const position = notification.position || this.defaultPosition\r\n    const container = this.createContainer(position)\r\n    if (!container) {\r\n      return\r\n    }\r\n\r\n    const element = this.createNotificationElement(notification)\r\n    notification.element = element\r\n\r\n    // 添加CSS类用于动画\r\n    element.classList.add('notification-enter')\r\n\r\n    // 根据位置添加对应的类\r\n    if (notification.position?.includes('left')) {\r\n      element.classList.add('notification-position-left')\r\n    } else if (notification.position?.includes('center')) {\r\n      element.classList.add('notification-position-center')\r\n    }\r\n\r\n    // 根据位置决定插入位置\r\n    if (notification.position?.startsWith('bottom')) {\r\n      container.insertBefore(element, container.firstChild)\r\n    } else {\r\n      container.appendChild(element)\r\n    }\r\n\r\n    // 强制重排，然后触发进入动画\r\n    void element.offsetHeight // 强制重排\r\n\r\n    return new Promise(resolve => {\r\n      // 添加进入动画类\r\n      element.classList.add('notification-enter-active')\r\n      element.classList.remove('notification-enter')\r\n\r\n      // 监听动画结束\r\n      const handleTransitionEnd = () => {\r\n        element.removeEventListener('transitionend', handleTransitionEnd)\r\n        element.classList.remove('notification-enter-active')\r\n        resolve()\r\n      }\r\n\r\n      element.addEventListener('transitionend', handleTransitionEnd)\r\n\r\n      // 备用超时，防止动画卡住\r\n      setTimeout(() => {\r\n        element.removeEventListener('transitionend', handleTransitionEnd)\r\n        element.classList.remove('notification-enter-active')\r\n        resolve()\r\n      }, 500)\r\n    })\r\n  }\r\n\r\n  private createNotificationElement(\r\n    notification: NotificationItem\r\n  ): HTMLElement {\r\n    const element = document.createElement('div')\r\n    element.id = `notification-${notification.id}`\r\n    element.className = 'engine-notification'\r\n\r\n    // 应用样式\r\n    const styles = this.styleManager.getNotificationStyles(\r\n      notification.type,\r\n      notification.theme\r\n    )\r\n    this.styleManager.applyStyles(element, styles.notification)\r\n\r\n    // 应用自定义样式\r\n    if (notification.style) {\r\n      this.styleManager.applyStyles(element, notification.style)\r\n    }\r\n\r\n    // 应用自定义类名\r\n    if (notification.className) {\r\n      element.className += ` ${notification.className}`\r\n    }\r\n\r\n    // 设置最大宽度\r\n    if (notification.maxWidth) {\r\n      element.style.maxWidth = `${notification.maxWidth}px`\r\n    }\r\n\r\n    // 设置 z-index\r\n    if (notification.zIndex) {\r\n      element.style.zIndex = notification.zIndex.toString()\r\n    }\r\n\r\n    // 创建主要内容容器\r\n    const content = document.createElement('div')\r\n    const contentStyles = this.styleManager.getNotificationStyles(\r\n      notification.type,\r\n      notification.theme\r\n    )\r\n    this.styleManager.applyStyles(content, contentStyles.content)\r\n\r\n    // 创建图标\r\n    const iconContainer = this.createIconElement(notification)\r\n    if (iconContainer) {\r\n      content.appendChild(iconContainer)\r\n    }\r\n\r\n    // 创建文本内容\r\n    const textContent = document.createElement('div')\r\n    textContent.style.flex = '1'\r\n    textContent.style.minWidth = '0'\r\n\r\n    // 标题\r\n    if (notification.title) {\r\n      const titleElement = document.createElement('div')\r\n      titleElement.className = 'engine-notification-title'\r\n\r\n      if (notification.allowHTML) {\r\n        titleElement.innerHTML = notification.title\r\n      } else {\r\n        titleElement.textContent = notification.title\r\n      }\r\n\r\n      this.styleManager.applyStyles(titleElement, contentStyles.title)\r\n      textContent.appendChild(titleElement)\r\n    }\r\n\r\n    // 消息内容\r\n    const messageElement = document.createElement('div')\r\n    messageElement.className = 'engine-notification-message'\r\n\r\n    if (notification.allowHTML && notification.message) {\r\n      messageElement.innerHTML = notification.message\r\n    } else if (notification.message) {\r\n      messageElement.textContent = notification.message\r\n    } else {\r\n      messageElement.textContent = ''\r\n    }\r\n\r\n    this.styleManager.applyStyles(messageElement, contentStyles.message)\r\n    textContent.appendChild(messageElement)\r\n\r\n    content.appendChild(textContent)\r\n\r\n    // 添加进度条\r\n    if (notification.progress) {\r\n      const progressContainer = this.createProgressElement(\r\n        notification.progress,\r\n        notification.theme\r\n      )\r\n      textContent.appendChild(progressContainer)\r\n    }\r\n\r\n    // 添加操作按钮\r\n    if (notification.actions && notification.actions.length > 0) {\r\n      const actionsContainer = this.createActionsElement(\r\n        notification.actions,\r\n        notification\r\n      )\r\n      textContent.appendChild(actionsContainer)\r\n    }\r\n\r\n    // 关闭按钮\r\n    if (notification.closable) {\r\n      const closeButton = this.createCloseButton(notification)\r\n      element.appendChild(closeButton)\r\n    }\r\n\r\n    // 添加点击事件\r\n    if (notification.onClick) {\r\n      element.style.cursor = 'pointer'\r\n      const clickHandler = (e: MouseEvent) => {\r\n        // 避免关闭按钮和操作按钮触发\r\n        if (\r\n          (e.target as HTMLElement).closest(\r\n            '.engine-notification-close, .engine-notification-actions'\r\n        )\r\n        ) {\r\n          return\r\n        }\r\n        if (notification.onClick) {\r\n          try {\r\n            notification.onClick()\r\n          } catch (error) {\r\n            this.logger?.error('Error in notification onClick callback', error)\r\n          }\r\n        }\r\n      }\r\n      element.addEventListener('click', clickHandler)\r\n      // 存储处理器以便清理\r\n      ;(element as any).__clickHandler = clickHandler\r\n    }\r\n\r\n    element.appendChild(content)\r\n    return element\r\n  }\r\n\r\n  /**\r\n   * 创建图标元素\r\n   */\r\n  private createIconElement(\r\n    notification: NotificationItem\r\n  ): HTMLElement | null {\r\n    const iconContainer = document.createElement('div')\r\n    iconContainer.className = 'engine-notification-icon'\r\n\r\n    const styles = this.styleManager.getNotificationStyles(\r\n      notification.type,\r\n      notification.theme\r\n    )\r\n    this.styleManager.applyStyles(iconContainer, styles.icon)\r\n\r\n    if (notification.icon) {\r\n      if (typeof notification.icon === 'string') {\r\n        iconContainer.innerHTML = notification.icon\r\n      } else {\r\n        iconContainer.appendChild(notification.icon)\r\n      }\r\n    } else {\r\n      iconContainer.innerHTML = this.getTypeIcon(notification.type)\r\n    }\r\n\r\n    // 根据类型设置颜色（触发内部颜色计算器的使用）\r\n    iconContainer.style.color = this.getTypeColor(notification.type)\r\n\r\n    return iconContainer\r\n  }\r\n\r\n  /**\r\n   * 创建进度条元素\r\n   */\r\n  private createProgressElement(\r\n    progress: NotificationProgress,\r\n    theme?: NotificationTheme\r\n  ): HTMLElement {\r\n    const container = document.createElement('div')\r\n    container.className = 'engine-notification-progress'\r\n\r\n    const styles = this.styleManager.getNotificationStyles('info', theme)\r\n    this.styleManager.applyStyles(container, styles.progress)\r\n\r\n    const bar = document.createElement('div')\r\n    bar.className = 'engine-notification-progress-bar'\r\n\r\n    const barStyles = this.styleManager.getProgressBarStyles(\r\n      progress.value,\r\n      progress.color,\r\n      theme\r\n    )\r\n    this.styleManager.applyStyles(bar, barStyles)\r\n\r\n    container.appendChild(bar)\r\n\r\n    if (progress.showText) {\r\n      const text = document.createElement('div')\r\n      text.className = 'engine-notification-progress-text'\r\n      text.textContent = `${Math.round(progress.value)}%`\r\n      text.style.fontSize = '11px'\r\n      text.style.marginTop = '4px'\r\n      text.style.textAlign = 'center'\r\n      container.appendChild(text)\r\n    }\r\n\r\n    return container\r\n  }\r\n\r\n  /**\r\n   * 创建操作按钮容器\r\n   */\r\n  private createActionsElement(\r\n    actions: NotificationAction[],\r\n    notification: NotificationItem\r\n  ): HTMLElement {\r\n    const container = document.createElement('div')\r\n    container.className = 'engine-notification-actions'\r\n\r\n    const styles = this.styleManager.getNotificationStyles(\r\n      notification.type,\r\n      notification.theme\r\n    )\r\n    this.styleManager.applyStyles(container, styles.actions)\r\n\r\n    actions.forEach(action => {\r\n      const button = document.createElement('button')\r\n      button.className = 'engine-notification-action'\r\n      button.textContent = action.label\r\n\r\n      const buttonStyles = this.styleManager.getActionButtonStyles(\r\n        action.style,\r\n        notification.theme\r\n      )\r\n      this.styleManager.applyStyles(button, buttonStyles)\r\n\r\n      if (action.loading) {\r\n        button.disabled = true\r\n        button.textContent = '...'\r\n      }\r\n\r\n      const actionHandler = async (e: MouseEvent) => {\r\n        e.stopPropagation()\r\n\r\n        try {\r\n          button.disabled = true\r\n          button.textContent = '...'\r\n\r\n          await action.action()\r\n\r\n          // 执行完操作后可能需要关闭通知\r\n          this.hide(notification.id)\r\n        } catch (error) {\r\n          this.logger?.error('Error in notification action', error)\r\n        } finally {\r\n          button.disabled = false\r\n          button.textContent = action.label\r\n        }\r\n      }\r\n      button.addEventListener('click', actionHandler)\r\n      // 存储处理器以便清理\r\n      ;(button as any).__actionHandler = actionHandler\r\n\r\n      container.appendChild(button)\r\n    })\r\n\r\n    return container\r\n  }\r\n\r\n  /**\r\n   * 创建关闭按钮\r\n   */\r\n  private createCloseButton(notification: NotificationItem): HTMLElement {\r\n    const button = document.createElement('button')\r\n    button.className = 'engine-notification-close'\r\n    button.innerHTML = '×'\r\n    button.setAttribute('aria-label', 'Close notification')\r\n\r\n    const styles = this.styleManager.getNotificationStyles(\r\n      notification.type,\r\n      notification.theme\r\n    )\r\n    this.styleManager.applyStyles(button, styles.closeButton)\r\n\r\n    const closeHandler = (e: MouseEvent) => {\r\n      e.stopPropagation()\r\n      this.hide(notification.id)\r\n    }\r\n    \r\n    const enterHandler = () => {\r\n      button.style.opacity = '0.8'\r\n    }\r\n    \r\n    const leaveHandler = () => {\r\n      button.style.opacity = '0.5'\r\n    }\r\n    \r\n    button.addEventListener('click', closeHandler)\r\n    button.addEventListener('mouseenter', enterHandler)\r\n    button.addEventListener('mouseleave', leaveHandler)\r\n    \r\n    // 存储处理器以便清理\r\n    ;(button as any).__handlers = { closeHandler, enterHandler, leaveHandler }\r\n\r\n    return button\r\n  }\r\n\r\n  /**\r\n   * 更新通知样式\r\n   */\r\n  private updateNotificationStyles(notification: NotificationItem): void {\r\n    if (!notification.element) return\r\n\r\n    const styles = this.styleManager.getNotificationStyles(\r\n      notification.type,\r\n      notification.theme\r\n    )\r\n    this.styleManager.applyStyles(notification.element, styles.notification)\r\n  }\r\n\r\n  /**\r\n   * 注入CSS样式\r\n   */\r\n  private injectStyles(): void {\r\n    if (typeof document === 'undefined') return\r\n\r\n    const styleId = 'notification-animations'\r\n    if (document.getElementById(styleId)) return\r\n\r\n    const style = document.createElement('style')\r\n    style.id = styleId\r\n    style.textContent = `\r\n      .notification-enter {\r\n        height: 0 !important;\r\n        opacity: 0 !important;\r\n        overflow: hidden !important;\r\n        margin-bottom: 0 !important;\r\n        padding-top: 0 !important;\r\n        padding-bottom: 0 !important;\r\n        transform: translateX(100%) !important;\r\n      }\r\n\r\n      .notification-enter.notification-position-left {\r\n        transform: translateX(-100%) !important;\r\n      }\r\n\r\n      .notification-enter.notification-position-center {\r\n        transform: translateY(-100%) !important;\r\n      }\r\n\r\n      .notification-enter-active {\r\n        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1) !important;\r\n        height: auto !important;\r\n        opacity: 1 !important;\r\n        overflow: visible !important;\r\n        margin-bottom: 12px !important;\r\n        padding-top: 16px !important;\r\n        padding-bottom: 16px !important;\r\n        transform: translateX(0) translateY(0) !important;\r\n      }\r\n\r\n      .notification-leave {\r\n        transition: all 0.35s cubic-bezier(0.4, 0, 0.2, 1) !important;\r\n      }\r\n\r\n      .notification-leave-active {\r\n        height: 0 !important;\r\n        opacity: 0 !important;\r\n        overflow: hidden !important;\r\n        margin-bottom: 0 !important;\r\n        padding-top: 0 !important;\r\n        padding-bottom: 0 !important;\r\n        transform: translateX(100%) !important;\r\n      }\r\n\r\n      .notification-leave-active.notification-position-left {\r\n        transform: translateX(-100%) !important;\r\n      }\r\n\r\n      .notification-leave-active.notification-position-center {\r\n        transform: translateY(-100%) !important;\r\n      }\r\n    `\r\n\r\n    document.head.appendChild(style)\r\n  }\r\n\r\n  /**\r\n   * 移除通知元素（带动画）\r\n   */\r\n  private async removeNotificationElement(\r\n    notification: NotificationItem\r\n  ): Promise<void> {\r\n    if (!notification.element) return\r\n\r\n    const position = notification.position || this.defaultPosition\r\n    const container = this.containers.get(position)\r\n    if (!container) return\r\n\r\n    try {\r\n      const elementToRemove = notification.element\r\n      const allElements = Array.from(container.children) as HTMLElement[]\r\n      const elementIndex = allElements.indexOf(elementToRemove)\r\n\r\n      if (elementIndex === -1) return\r\n\r\n      // 获取要移除元素的高度（包括margin）\r\n      const elementHeight = this.getElementTotalHeight(elementToRemove)\r\n\r\n      // 获取需要移动的其他元素\r\n      const elementsToMove = this.getElementsToMove(\r\n        allElements,\r\n        elementIndex,\r\n        position\r\n      )\r\n\r\n      // 立即开始其他元素的移动动画\r\n      if (elementsToMove.length > 0) {\r\n        this.startOtherElementsAnimation(\r\n          elementsToMove,\r\n          elementHeight,\r\n          position\r\n        )\r\n      }\r\n\r\n      // 添加退出动画类\r\n      elementToRemove.classList.add('notification-leave')\r\n\r\n      // 根据位置添加对应的类\r\n      if (notification.position?.includes('left')) {\r\n        elementToRemove.classList.add('notification-position-left')\r\n      } else if (notification.position?.includes('center')) {\r\n        elementToRemove.classList.add('notification-position-center')\r\n      }\r\n\r\n      return new Promise(resolve => {\r\n        // 添加退出动画激活类\r\n        elementToRemove.classList.add('notification-leave-active')\r\n\r\n        // 监听动画结束\r\n        const handleTransitionEnd = () => {\r\n          elementToRemove.removeEventListener(\r\n            'transitionend',\r\n            handleTransitionEnd\r\n          )\r\n          elementToRemove.remove()\r\n          notification.element = undefined\r\n          resolve()\r\n        }\r\n\r\n        elementToRemove.addEventListener('transitionend', handleTransitionEnd)\r\n\r\n        // 备用超时\r\n        setTimeout(() => {\r\n          elementToRemove.removeEventListener(\r\n            'transitionend',\r\n            handleTransitionEnd\r\n          )\r\n          if (elementToRemove.parentNode) {\r\n            elementToRemove.remove()\r\n          }\r\n          notification.element = undefined\r\n          resolve()\r\n        }, 400) // 与CSS动画时长一致\r\n      })\r\n    } catch (error) {\r\n      this.logger?.error('Error in notification exit animation', error)\r\n      // 即使动画失败也要移除元素\r\n      if (notification.element) {\r\n        notification.element.remove()\r\n        notification.element = undefined\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取元素的总高度（包括margin）\r\n   */\r\n  private getElementTotalHeight(element: HTMLElement): number {\r\n    const computedStyle = window.getComputedStyle(element)\r\n    const height = element.offsetHeight\r\n    const marginTop = Number.parseInt(computedStyle.marginTop) || 0\r\n    const marginBottom = Number.parseInt(computedStyle.marginBottom) || 0\r\n    return height + marginTop + marginBottom\r\n  }\r\n\r\n  /**\r\n   * 获取需要移动的元素\r\n   */\r\n  private getElementsToMove(\r\n    allElements: HTMLElement[],\r\n    removedIndex: number,\r\n    position: NotificationPosition\r\n  ): HTMLElement[] {\r\n    const isBottomPosition = position.startsWith('bottom')\r\n\r\n    if (isBottomPosition) {\r\n      // 底部位置：移除元素上方的元素需要向下移动\r\n      return allElements.slice(0, removedIndex)\r\n    } else {\r\n      // 顶部位置：移除元素下方的元素需要向上移动\r\n      return allElements.slice(removedIndex + 1)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 立即开始其他元素的移动动画\r\n   */\r\n  private startOtherElementsAnimation(\r\n    elements: HTMLElement[],\r\n    moveDistance: number,\r\n    position: NotificationPosition\r\n  ): void {\r\n    const isBottomPosition = position.startsWith('bottom')\r\n    const direction = isBottomPosition ? moveDistance : -moveDistance\r\n\r\n    elements.forEach(element => {\r\n      // 设置transition\r\n      element.style.transition = 'transform 0.35s cubic-bezier(0.4, 0, 0.2, 1)'\r\n\r\n      // 立即开始移动\r\n      element.style.transform = `translateY(${direction}px)`\r\n\r\n      // 动画结束后清理\r\n      const cleanup = () => {\r\n        element.style.transition = ''\r\n        element.style.transform = ''\r\n        element.removeEventListener('transitionend', cleanup)\r\n      }\r\n\r\n      element.addEventListener('transitionend', cleanup)\r\n\r\n      // 备用清理\r\n      setTimeout(cleanup, 400)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 根据类型返回颜色\r\n   */\r\n  private getTypeColor(type: NotificationType | undefined): string {\r\n    if (!type) type = 'info'\r\n    switch (type) {\r\n      case 'success':\r\n        return '#10b981'\r\n      case 'error':\r\n        return '#ef4444'\r\n      case 'warning':\r\n        return '#f59e0b'\r\n      case 'info':\r\n      default:\r\n        return '#3b82f6'\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 根据类型返回SVG图标\r\n   */\r\n  private getTypeIcon(type: NotificationType | undefined): string {\r\n    if (!type) type = 'info'\r\n    switch (type) {\r\n      case 'success':\r\n        return `<svg viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\">\r\n          <path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clip-rule=\"evenodd\" />\r\n        </svg>`\r\n      case 'error':\r\n        return `<svg viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n          <path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clip-rule=\"evenodd\" />\r\n        </svg>`\r\n      case 'warning':\r\n        return `<svg viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n          <path fill-rule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clip-rule=\"evenodd\" />\r\n        </svg>`\r\n      case 'info':\r\n      default:\r\n        return `<svg viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n          <path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clip-rule=\"evenodd\" />\r\n        </svg>`\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 设置主题（内部方法）\r\n   */\r\n  private setThemeInternal(theme: NotificationTheme): void {\r\n    this.defaultTheme = theme\r\n    this.styleManager.setTheme(\r\n      theme === 'auto' ? this.styleManager.detectSystemTheme() : theme\r\n    )\r\n    this.updateAllNotificationStyles()\r\n  }\r\n\r\n  /**\r\n   * 内部获取主题方法\r\n   */\r\n  private getThemeInternal(): NotificationTheme {\r\n    return this.defaultTheme\r\n  }\r\n\r\n  /**\r\n   * 内部方法：设置最大通知数量\r\n   */\r\n  private setMaxNotificationsInternal(max: number): void {\r\n    this.maxNotifications = max\r\n    // 对所有位置执行限制检查\r\n    const positions: NotificationPosition[] = [\r\n      'top-left',\r\n      'top-center',\r\n      'top-right',\r\n      'bottom-left',\r\n      'bottom-center',\r\n      'bottom-right',\r\n    ]\r\n    positions.forEach(position => {\r\n      this.enforceMaxNotifications(position)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 内部统计方法\r\n   */\r\n  private getStatsInternal() {\r\n    const byType: Record<NotificationType, number> = {\r\n      success: 0,\r\n      error: 0,\r\n      warning: 0,\r\n      info: 0,\r\n    }\r\n\r\n    const byPosition: Record<NotificationPosition, number> = {\r\n      'top-left': 0,\r\n      'top-center': 0,\r\n      'top-right': 0,\r\n      'bottom-left': 0,\r\n      'bottom-center': 0,\r\n      'bottom-right': 0,\r\n    }\r\n\r\n    let visible = 0\r\n\r\n    Array.from(this.notifications.values()).forEach(notification => {\r\n      if (notification.visible) {\r\n        visible++\r\n      }\r\n\r\n      const type = (notification.type || 'info') as NotificationType\r\n      byType[type]++\r\n\r\n      const position = (notification.position || 'top-right') as NotificationPosition\r\n      byPosition[position]++\r\n    })\r\n\r\n    return {\r\n      total: this.notifications.size,\r\n      visible,\r\n      byType,\r\n      byPosition,\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 内部销毁方法\r\n   */\r\n  private async destroyInternal(): Promise<void> {\r\n    await this.hideAll()\r\n\r\n    // 清理所有容器\r\n    this.containers.forEach(container => {\r\n      // 清理容器内的所有元素事件监听器\r\n      const elements = container.querySelectorAll('.engine-notification')\r\n      elements.forEach(el => this.cleanupElement(el as HTMLElement))\r\n      container.remove()\r\n    })\r\n    this.containers.clear()\r\n\r\n    // 清理所有定时器\r\n    this.notifications.forEach(notification => {\r\n      if (notification.timeoutId) {\r\n        clearTimeout(notification.timeoutId)\r\n        notification.timeoutId = undefined\r\n      }\r\n      if (notification.element) {\r\n        this.cleanupElement(notification.element)\r\n        notification.element = undefined\r\n      }\r\n    })\r\n    this.notifications.clear()\r\n    \r\n    // 清理注入的样式\r\n    const styleElement = document.getElementById('notification-animations')\r\n    if (styleElement) {\r\n      styleElement.remove()\r\n    }\r\n  }\r\n\r\n  // 添加缺失的方法\r\n  update(id: string, options: Partial<NotificationOptions>): void {\r\n    const notification = this.notifications.get(id)\r\n    if (notification) {\r\n      Object.assign(notification, options)\r\n    }\r\n  }\r\n\r\n  get(id: string): EngineNotification | undefined {\r\n    const notification = this.notifications.get(id)\r\n    if (notification && notification.visible) {\r\n      return {\r\n        id: notification.id,\r\n        title: notification.title || '',\r\n        message: notification.message,\r\n        type: notification.type || 'info',\r\n        position: notification.position || 'top-right',\r\n        duration: notification.duration || 3000,\r\n        animation: notification.animation || 'fade',\r\n        theme: notification.theme || 'light',\r\n        icon: notification.icon || '',\r\n        actions: notification.actions || [],\r\n        closable: notification.closable !== false,\r\n        persistent: notification.persistent || false,\r\n        showProgress: !!notification.progress,\r\n        progress: notification.progress,\r\n        group: notification.group,\r\n        priority: notification.priority || 0,\r\n        metadata: notification.metadata || {},\r\n        timestamp: notification.createdAt,\r\n        isVisible: notification.visible,\r\n        isAnimating: notification.isAnimating || false,\r\n      }\r\n    }\r\n    return undefined\r\n  }\r\n\r\n  clear(): void {\r\n    this.hideAll()\r\n  }\r\n  \r\n  /**\r\n   * 启动定期清理\r\n   */\r\n  private startCleanup(): void {\r\n    // 每分钟清理一次过期通知\r\n    this.cleanupInterval = window.setInterval(() => {\r\n      this.cleanupExpiredNotifications()\r\n    }, 60000)\r\n  }\r\n  \r\n  /**\r\n   * 清理过期通知\r\n   */\r\n  private cleanupExpiredNotifications(): void {\r\n    const now = Date.now()\r\n    const expiredNotifications: string[] = []\r\n    \r\n    this.notifications.forEach((notification, id) => {\r\n      // 清理超过10分钟的隐藏通知\r\n      if (!notification.visible && (now - notification.createdAt > 600000)) {\r\n        expiredNotifications.push(id)\r\n      }\r\n    })\r\n    \r\n    expiredNotifications.forEach(id => {\r\n      const notification = this.notifications.get(id)\r\n      if (notification?.element) {\r\n        this.cleanupElement(notification.element)\r\n      }\r\n      this.notifications.delete(id)\r\n    })\r\n  }\r\n  \r\n  /**\r\n   * 清理元素的事件监听器\r\n   */\r\n  private cleanupElement(element: HTMLElement): void {\r\n    if (!element) return\r\n    \r\n    // 清理点击处理器\r\n    const clickHandler = (element as any).__clickHandler\r\n    if (clickHandler) {\r\n      element.removeEventListener('click', clickHandler)\r\n      delete (element as any).__clickHandler\r\n    }\r\n    \r\n    // 清理按钮处理器\r\n    const buttons = element.querySelectorAll('button')\r\n    buttons.forEach(button => {\r\n      const handlers = (button as any).__handlers\r\n      if (handlers) {\r\n        button.removeEventListener('click', handlers.closeHandler || handlers.actionHandler)\r\n        button.removeEventListener('mouseenter', handlers.enterHandler)\r\n        button.removeEventListener('mouseleave', handlers.leaveHandler)\r\n        delete (button as any).__handlers\r\n      }\r\n      const actionHandler = (button as any).__actionHandler\r\n      if (actionHandler) {\r\n        button.removeEventListener('click', actionHandler)\r\n        delete (button as any).__actionHandler\r\n      }\r\n    })\r\n    \r\n    // 清理子元素\r\n    element.innerHTML = ''\r\n  }\r\n  \r\n  /**\r\n   * 清理主题监听器\r\n   */\r\n  private cleanupThemeWatcher(): void {\r\n    // 取消系统主题监听\r\n    if (this.themeUnsubscribe) {\r\n      try { this.themeUnsubscribe() } catch { /* ignore */ }\r\n      this.themeUnsubscribe = undefined\r\n    }\r\n\r\n    // 如果styleManager有清理方法，调用它\r\n    if (this.styleManager && typeof (this.styleManager as any).cleanup === 'function') {\r\n      (this.styleManager as any).cleanup()\r\n    }\r\n  }\r\n\r\n  setDefaultOptions(options: Partial<NotificationOptions>): void {\r\n    Object.assign(this.defaultOptions, options)\r\n  }\r\n\r\n  getDefaultOptions(): Partial<NotificationOptions> {\r\n    return { ...this.defaultOptions }\r\n  }\r\n}\r\n\r\nexport function createNotificationManager(\r\n  logger?: Logger\r\n): NotificationManager {\r\n  return new NotificationManagerImpl(logger)\r\n}\r\n\r\n// 预定义的通知类型\r\nexport const notificationTypes = {\r\n  success: (\r\n    message: string,\r\n    title?: string,\r\n    options?: Partial<NotificationOptions>\r\n  ) => ({\r\n    type: 'success' as const,\r\n    message,\r\n    title,\r\n    ...options,\r\n  }),\r\n\r\n  error: (\r\n    message: string,\r\n    title?: string,\r\n    options?: Partial<NotificationOptions>\r\n  ) => ({\r\n    type: 'error' as const,\r\n    message,\r\n    title,\r\n    duration: 0, // 错误通知默认不自动关闭\r\n    ...options,\r\n  }),\r\n\r\n  warning: (\r\n    message: string,\r\n    title?: string,\r\n    options?: Partial<NotificationOptions>\r\n  ) => ({\r\n    type: 'warning' as const,\r\n    message,\r\n    title,\r\n    ...options,\r\n  }),\r\n\r\n  info: (\r\n    message: string,\r\n    title?: string,\r\n    options?: Partial<NotificationOptions>\r\n  ) => ({\r\n    type: 'info' as const,\r\n    message,\r\n    title,\r\n    ...options,\r\n  }),\r\n}\r\n\r\n// 通知管理器的便捷方法\r\nexport function createNotificationHelpers(manager: NotificationManager) {\r\n  return {\r\n    success: (\r\n      message: string,\r\n      title?: string,\r\n      options?: Partial<NotificationOptions>\r\n    ) => {\r\n      return manager.show(notificationTypes.success(message, title, options))\r\n    },\r\n\r\n    error: (\r\n      message: string,\r\n      title?: string,\r\n      options?: Partial<NotificationOptions>\r\n    ) => {\r\n      return manager.show(notificationTypes.error(message, title, options))\r\n    },\r\n\r\n    warning: (\r\n      message: string,\r\n      title?: string,\r\n      options?: Partial<NotificationOptions>\r\n    ) => {\r\n      return manager.show(notificationTypes.warning(message, title, options))\r\n    },\r\n\r\n    info: (\r\n      message: string,\r\n      title?: string,\r\n      options?: Partial<NotificationOptions>\r\n    ) => {\r\n      return manager.show(notificationTypes.info(message, title, options))\r\n    },\r\n\r\n    // 批量通知\r\n    batch: (notifications: NotificationOptions[]) => {\r\n      return notifications.map(notification => manager.show(notification))\r\n    },\r\n\r\n    // 进度通知\r\n    progress: (\r\n      message: string,\r\n      initialValue: number = 0,\r\n      options?: Partial<NotificationOptions>\r\n    ) => {\r\n      const id = manager.show({\r\n        type: 'info',\r\n        message,\r\n        duration: 0,\r\n        closable: false,\r\n        progress: {\r\n          value: initialValue,\r\n          max: 100,\r\n          showText: true,\r\n        },\r\n        ...options,\r\n      })\r\n\r\n      return {\r\n        id,\r\n        update: (_value: number, _newMessage?: string) => {\r\n          // 这里需要实现进度更新逻辑\r\n          // 实际实现中需要找到对应的通知并更新进度条\r\n        },\r\n        complete: (successMessage?: string) => {\r\n          manager.hide(id)\r\n          if (successMessage) {\r\n            manager.show({\r\n              type: 'success',\r\n              message: successMessage,\r\n              duration: 3000,\r\n            })\r\n          }\r\n        },\r\n        error: (errorMessage?: string) => {\r\n          manager.hide(id)\r\n          if (errorMessage) {\r\n            manager.show({\r\n              type: 'error',\r\n              message: errorMessage,\r\n              duration: 0,\r\n            })\r\n          }\r\n        },\r\n      }\r\n    },\r\n\r\n    // 确认通知\r\n    confirm: (\r\n      message: string,\r\n      title?: string,\r\n      options?: Partial<NotificationOptions>\r\n    ) => {\r\n      return new Promise<boolean>(resolve => {\r\n        manager.show({\r\n          type: 'warning',\r\n          message,\r\n          title,\r\n          duration: 0,\r\n          closable: false,\r\n          actions: [\r\n            {\r\n              label: '确认',\r\n              style: 'primary',\r\n              action: () => {\r\n                resolve(true)\r\n              },\r\n            },\r\n            {\r\n              label: '取消',\r\n              style: 'secondary',\r\n              action: () => {\r\n                resolve(false)\r\n              },\r\n            },\r\n          ],\r\n          ...options,\r\n        })\r\n      })\r\n    },\r\n\r\n    // 加载通知\r\n    loading: (message: string, options?: Partial<NotificationOptions>) => {\r\n      const id = manager.show({\r\n        type: 'info',\r\n        message,\r\n        duration: 0,\r\n        closable: false,\r\n        icon: `<svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\">\r\n          <circle cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-dasharray=\"31.416\" stroke-dashoffset=\"31.416\">\r\n            <animate attributeName=\"stroke-dasharray\" dur=\"2s\" values=\"0 31.416;15.708 15.708;0 31.416\" repeatCount=\"indefinite\"/>\r\n            <animate attributeName=\"stroke-dashoffset\" dur=\"2s\" values=\"0;-15.708;-31.416\" repeatCount=\"indefinite\"/>\r\n          </circle>\r\n        </svg>`,\r\n        ...options,\r\n      })\r\n\r\n      return {\r\n        id,\r\n        update: (_newMessage: string) => {\r\n          // 更新加载消息\r\n        },\r\n        success: (successMessage: string) => {\r\n          manager.hide(id)\r\n          manager.show({\r\n            type: 'success',\r\n            message: successMessage,\r\n            duration: 3000,\r\n          })\r\n        },\r\n        error: (errorMessage: string) => {\r\n          manager.hide(id)\r\n          manager.show({\r\n            type: 'error',\r\n            message: errorMessage,\r\n            duration: 0,\r\n          })\r\n        },\r\n        hide: () => {\r\n          manager.hide(id)\r\n        },\r\n      }\r\n    },\r\n\r\n    // 分组通知\r\n    group: (groupId: string, notifications: NotificationOptions[]) => {\r\n      return notifications.map(notification =>\r\n        manager.show({\r\n          ...notification,\r\n          group: groupId,\r\n        })\r\n      )\r\n    },\r\n\r\n    // 清除分组\r\n    clearGroup: (groupId: string) => {\r\n      const allNotifications = manager.getAll()\r\n      allNotifications.forEach((notification) => {\r\n        if (notification.group === groupId) {\r\n          // 需要通过某种方式获取通知ID来隐藏\r\n        }\r\n      })\r\n    },\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}