{"version":3,"file":"notification-system.js","sources":["../../src/notifications/notification-system.ts"],"sourcesContent":["/**\r\n * 统一通知系统\r\n * 整合了Dialog、Message和Notification的功能\r\n */\r\n\r\nimport type { Logger } from '../types'\r\nimport type { Engine } from '../types/engine'\r\n\r\n// ==================== 类型定义 ====================\r\n\r\nexport type NotificationType = 'success' | 'error' | 'warning' | 'info' | 'loading'\r\nexport type NotificationPosition = 'top' | 'top-left' | 'top-right' | 'bottom' | 'bottom-left' | 'bottom-right' | 'center'\r\nexport type NotificationStyle = 'dialog' | 'message' | 'toast' | 'notification'\r\n\r\nexport interface NotificationOptions {\r\n  id?: string\r\n  type?: NotificationType\r\n  style?: NotificationStyle\r\n  title?: string\r\n  content: string\r\n  html?: boolean\r\n  duration?: number\r\n  position?: NotificationPosition\r\n  closable?: boolean\r\n  persistent?: boolean\r\n  modal?: boolean\r\n  maskClosable?: boolean\r\n  customClass?: string\r\n  zIndex?: number\r\n  actions?: NotificationAction[]\r\n  onShow?: () => void\r\n  onClose?: (result?: unknown) => void\r\n  beforeClose?: (result?: unknown) => boolean | Promise<boolean>\r\n  icon?: string | boolean\r\n  progress?: NotificationProgress\r\n  sound?: boolean\r\n  vibrate?: boolean\r\n}\r\n\r\nexport interface NotificationAction {\r\n  text: string\r\n  type?: 'primary' | 'secondary' | 'danger'\r\n  handler?: (instance: NotificationInstance) => void | Promise<void>\r\n}\r\n\r\nexport interface NotificationProgress {\r\n  value: number\r\n  max?: number\r\n  indeterminate?: boolean\r\n}\r\n\r\nexport interface NotificationInstance {\r\n  id: string\r\n  options: NotificationOptions\r\n  element: HTMLElement\r\n  visible: boolean\r\n  close: (result?: unknown) => Promise<void>\r\n  update: (options: Partial<NotificationOptions>) => void\r\n  setProgress: (value: number) => void\r\n}\r\n\r\n// ==================== 实现 ====================\r\n\r\nexport class NotificationSystem {\r\n  private instances = new Map<string, NotificationInstance>()\r\n  private containers = new Map<NotificationPosition, HTMLElement>()\r\n  private idCounter = 0\r\n  private zIndexBase = 2000\r\n  private logger?: Logger\r\n  private engine?: Engine\r\n  private styleElement?: HTMLElement\r\n  private keydownHandler?: (e: KeyboardEvent) => void\r\n  private autoCloseTimers = new Map<string, number>()\r\n\r\n  constructor(engine?: Engine) {\r\n    this.engine = engine\r\n    this.logger = engine?.logger\r\n    this.initialize()\r\n  }\r\n\r\n  private initialize(): void {\r\n    this.injectStyles()\r\n    this.setupContainers()\r\n    this.bindGlobalEvents()\r\n  }\r\n\r\n  // ==================== 公共API ====================\r\n\r\n  /**\r\n   * 显示通知\r\n   */\r\n  show(options: NotificationOptions): NotificationInstance {\r\n    const style = options.style || this.inferStyle(options)\r\n    const id = options.id || this.generateId()\r\n    \r\n    const notification = this.createInstance(id, { ...options, style })\r\n    this.instances.set(id, notification)\r\n    \r\n    this.renderNotification(notification)\r\n    this.setupAutoClose(notification)\r\n    \r\n    options.onShow?.()\r\n    this.logger?.debug(`Notification shown: ${id}`)\r\n    \r\n    return notification\r\n  }\r\n\r\n  /**\r\n   * 显示对话框\r\n   */\r\n  dialog(options: Partial<NotificationOptions>): Promise<unknown> {\r\n    return new Promise((resolve) => {\r\n      this.show({\r\n        style: 'dialog',\r\n        modal: true,\r\n        closable: true,\r\n        position: 'center',\r\n        ...options,\r\n        content: options.content || '',\r\n        onClose: (result) => {\r\n          options.onClose?.(result)\r\n          resolve(result)\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 显示确认对话框\r\n   */\r\n  confirm(content: string, options?: Partial<NotificationOptions>): Promise<boolean> {\r\n    return new Promise((resolve) => {\r\n      this.show({\r\n        style: 'dialog',\r\n        modal: true,\r\n        title: '确认',\r\n        content,\r\n        position: 'center',\r\n        actions: [\r\n          { text: '取消', type: 'secondary', handler: () => resolve(false) },\r\n          { text: '确定', type: 'primary', handler: () => resolve(true) }\r\n        ],\r\n        ...options\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 显示输入对话框\r\n   */\r\n  async prompt(content: string, defaultValue = '', options?: Partial<NotificationOptions>): Promise<string | null> {\r\n    return new Promise((resolve) => {\r\n      const inputValue = defaultValue\r\n      \r\n      const instance = this.show({\r\n        style: 'dialog',\r\n        modal: true,\r\n        title: '输入',\r\n        content: `\r\n          <div>${content}</div>\r\n          <input type=\"text\" class=\"notification-input\" value=\"${defaultValue}\" />\r\n        `,\r\n        html: true,\r\n        position: 'center',\r\n        actions: [\r\n          { text: '取消', type: 'secondary', handler: () => resolve(null) },\r\n          { \r\n            text: '确定', \r\n            type: 'primary', \r\n            handler: () => {\r\n              const input = instance.element.querySelector('.notification-input') as HTMLInputElement\r\n              resolve(input?.value || inputValue)\r\n            }\r\n          }\r\n        ],\r\n        ...options\r\n      })\r\n      \r\n      // 聚焦输入框\r\n      setTimeout(() => {\r\n        const input = instance.element.querySelector('.notification-input') as HTMLInputElement\r\n        input?.focus()\r\n        input?.select()\r\n      }, 100)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 快捷方法\r\n   */\r\n  success(content: string, options?: Partial<NotificationOptions>): NotificationInstance {\r\n    return this.show({ type: 'success', content, ...options })\r\n  }\r\n\r\n  error(content: string, options?: Partial<NotificationOptions>): NotificationInstance {\r\n    return this.show({ type: 'error', content, duration: 0, ...options })\r\n  }\r\n\r\n  warning(content: string, options?: Partial<NotificationOptions>): NotificationInstance {\r\n    return this.show({ type: 'warning', content, ...options })\r\n  }\r\n\r\n  info(content: string, options?: Partial<NotificationOptions>): NotificationInstance {\r\n    return this.show({ type: 'info', content, ...options })\r\n  }\r\n\r\n  loading(content: string, options?: Partial<NotificationOptions>): NotificationInstance {\r\n    return this.show({ type: 'loading', content, duration: 0, ...options })\r\n  }\r\n\r\n  /**\r\n   * 关闭通知\r\n   */\r\n  async close(id: string, result?: unknown): Promise<void> {\r\n    const instance = this.instances.get(id)\r\n    if (!instance) return\r\n    \r\n    await instance.close(result)\r\n  }\r\n\r\n  /**\r\n   * 关闭所有通知\r\n   */\r\n  async closeAll(): Promise<void> {\r\n    const promises = Array.from(this.instances.values()).map(i => i.close())\r\n    await Promise.all(promises)\r\n  }\r\n\r\n  // ==================== 私有方法 ====================\r\n\r\n  private inferStyle(options: NotificationOptions): NotificationStyle {\r\n    if (options.modal) return 'dialog'\r\n    if (options.actions?.length) return 'notification'\r\n    if (options.duration && options.duration <= 3000) return 'message'\r\n    return 'toast'\r\n  }\r\n\r\n  private generateId(): string {\r\n    return `notification_${++this.idCounter}_${Date.now()}`\r\n  }\r\n\r\n  private createInstance(id: string, options: NotificationOptions): NotificationInstance {\r\n    const element = this.createElement(options)\r\n    \r\n    const instance: NotificationInstance = {\r\n      id,\r\n      options,\r\n      element,\r\n      visible: false,\r\n      close: async (result?: unknown) => {\r\n        if (options.beforeClose) {\r\n          const canClose = await options.beforeClose(result)\r\n          if (!canClose) return\r\n        }\r\n        \r\n        await this.hideInstance(instance, result)\r\n      },\r\n      update: (newOptions: Partial<NotificationOptions>) => {\r\n        Object.assign(options, newOptions)\r\n        this.updateElement(instance)\r\n      },\r\n      setProgress: (value: number) => {\r\n        if (options.progress) {\r\n          options.progress.value = value\r\n          this.updateProgress(instance)\r\n        }\r\n      }\r\n    }\r\n    \r\n    return instance\r\n  }\r\n\r\n  private createElement(options: NotificationOptions): HTMLElement {\r\n    const element = document.createElement('div')\r\n    element.className = `notification notification-${options.style} notification-${options.type}`\r\n    \r\n    if (options.customClass) {\r\n      element.className += ` ${options.customClass}`\r\n    }\r\n    \r\n    // 根据样式创建不同的结构\r\n    switch (options.style) {\r\n      case 'dialog':\r\n        this.createDialogStructure(element, options)\r\n        break\r\n      case 'notification':\r\n        this.createNotificationStructure(element, options)\r\n        break\r\n      default:\r\n        this.createMessageStructure(element, options)\r\n    }\r\n    \r\n    return element\r\n  }\r\n\r\n  private createDialogStructure(element: HTMLElement, options: NotificationOptions): void {\r\n    // 创建遮罩\r\n    if (options.modal) {\r\n      const mask = document.createElement('div')\r\n      mask.className = 'notification-mask'\r\n      element.appendChild(mask)\r\n    }\r\n    \r\n    // 创建对话框容器\r\n    const dialog = document.createElement('div')\r\n    dialog.className = 'notification-dialog'\r\n    \r\n    // 头部\r\n    if (options.title || options.closable) {\r\n      const header = document.createElement('div')\r\n      header.className = 'notification-header'\r\n      \r\n      if (options.title) {\r\n        const title = document.createElement('h3')\r\n        title.textContent = options.title\r\n        header.appendChild(title)\r\n      }\r\n      \r\n      if (options.closable) {\r\n        const closeBtn = document.createElement('button')\r\n        closeBtn.className = 'notification-close'\r\n        closeBtn.innerHTML = '×'\r\n        closeBtn.onclick = () => this.instances.get(options.id!)?.close()\r\n        header.appendChild(closeBtn)\r\n      }\r\n      \r\n      dialog.appendChild(header)\r\n    }\r\n    \r\n    // 内容\r\n    const body = document.createElement('div')\r\n    body.className = 'notification-body'\r\n    if (options.html) {\r\n      body.innerHTML = options.content\r\n    } else {\r\n      body.textContent = options.content\r\n    }\r\n    dialog.appendChild(body)\r\n    \r\n    // 操作按钮\r\n    if (options.actions?.length) {\r\n      const footer = document.createElement('div')\r\n      footer.className = 'notification-footer'\r\n      \r\n      options.actions.forEach(action => {\r\n        const btn = document.createElement('button')\r\n        btn.className = `notification-btn notification-btn-${action.type || 'secondary'}`\r\n        btn.textContent = action.text\r\n        btn.onclick = () => action.handler?.(this.instances.get(options.id!)!)\r\n        footer.appendChild(btn)\r\n      })\r\n      \r\n      dialog.appendChild(footer)\r\n    }\r\n    \r\n    element.appendChild(dialog)\r\n  }\r\n\r\n  private createNotificationStructure(element: HTMLElement, options: NotificationOptions): void {\r\n    // 图标\r\n    if (options.icon !== false) {\r\n      const icon = document.createElement('div')\r\n      icon.className = 'notification-icon'\r\n      icon.innerHTML = this.getIcon(options.type || 'info')\r\n      element.appendChild(icon)\r\n    }\r\n    \r\n    // 内容区域\r\n    const content = document.createElement('div')\r\n    content.className = 'notification-content'\r\n    \r\n    if (options.title) {\r\n      const title = document.createElement('div')\r\n      title.className = 'notification-title'\r\n      title.textContent = options.title\r\n      content.appendChild(title)\r\n    }\r\n    \r\n    const text = document.createElement('div')\r\n    text.className = 'notification-text'\r\n    if (options.html) {\r\n      text.innerHTML = options.content\r\n    } else {\r\n      text.textContent = options.content\r\n    }\r\n    content.appendChild(text)\r\n    \r\n    // 进度条\r\n    if (options.progress) {\r\n      const progress = document.createElement('div')\r\n      progress.className = 'notification-progress'\r\n      const bar = document.createElement('div')\r\n      bar.className = 'notification-progress-bar'\r\n      bar.style.width = `${(options.progress.value / (options.progress.max || 100)) * 100}%`\r\n      progress.appendChild(bar)\r\n      content.appendChild(progress)\r\n    }\r\n    \r\n    // 操作按钮\r\n    if (options.actions?.length) {\r\n      const actions = document.createElement('div')\r\n      actions.className = 'notification-actions'\r\n      \r\n      options.actions.forEach(action => {\r\n        const btn = document.createElement('button')\r\n        btn.className = `notification-action notification-action-${action.type || 'secondary'}`\r\n        btn.textContent = action.text\r\n        btn.onclick = () => action.handler?.(this.instances.get(options.id!)!)\r\n        actions.appendChild(btn)\r\n      })\r\n      \r\n      content.appendChild(actions)\r\n    }\r\n    \r\n    element.appendChild(content)\r\n    \r\n    // 关闭按钮\r\n    if (options.closable) {\r\n      const closeBtn = document.createElement('button')\r\n      closeBtn.className = 'notification-close'\r\n      closeBtn.innerHTML = '×'\r\n      closeBtn.onclick = () => this.instances.get(options.id!)?.close()\r\n      element.appendChild(closeBtn)\r\n    }\r\n  }\r\n\r\n  private createMessageStructure(element: HTMLElement, options: NotificationOptions): void {\r\n    // 图标\r\n    const icon = document.createElement('span')\r\n    icon.className = 'notification-icon'\r\n    icon.innerHTML = this.getIcon(options.type || 'info')\r\n    element.appendChild(icon)\r\n    \r\n    // 内容\r\n    const content = document.createElement('span')\r\n    content.className = 'notification-content'\r\n    if (options.html) {\r\n      content.innerHTML = options.content\r\n    } else {\r\n      content.textContent = options.content\r\n    }\r\n    element.appendChild(content)\r\n    \r\n    // 关闭按钮\r\n    if (options.closable) {\r\n      const closeBtn = document.createElement('button')\r\n      closeBtn.className = 'notification-close'\r\n      closeBtn.innerHTML = '×'\r\n      closeBtn.onclick = () => this.instances.get(options.id!)?.close()\r\n      element.appendChild(closeBtn)\r\n    }\r\n  }\r\n\r\n  private getIcon(type: NotificationType): string {\r\n    const icons = {\r\n      success: '✓',\r\n      error: '✕',\r\n      warning: '⚠',\r\n      info: 'ℹ',\r\n      loading: '⟳'\r\n    }\r\n    return icons[type] || icons.info\r\n  }\r\n\r\n  private renderNotification(instance: NotificationInstance): void {\r\n    const { position = 'top-right', style = 'toast' } = instance.options\r\n    \r\n    // 获取或创建容器\r\n    const container = style === 'dialog' \r\n      ? document.body \r\n      : this.getContainer(position)\r\n    \r\n    // 添加到DOM\r\n    container.appendChild(instance.element)\r\n    instance.visible = true\r\n    \r\n    // 触发动画\r\n    requestAnimationFrame(() => {\r\n      instance.element.classList.add('notification-show')\r\n    })\r\n    \r\n    // 调整位置\r\n    if (style !== 'dialog') {\r\n      this.adjustPositions(position)\r\n    }\r\n  }\r\n\r\n  private async hideInstance(instance: NotificationInstance, result?: unknown): Promise<void> {\r\n    if (!instance.visible) return\r\n    \r\n    instance.visible = false\r\n    instance.element.classList.add('notification-hide')\r\n    \r\n    // 清理自动关闭定时器\r\n    const tid = this.autoCloseTimers.get(instance.id)\r\n    if (tid) {\r\n      clearTimeout(tid)\r\n      this.autoCloseTimers.delete(instance.id)\r\n    }\r\n    \r\n    // 等待动画完成\r\n    await new Promise(resolve => setTimeout(resolve, 300))\r\n    \r\n    // 移除元素\r\n    instance.element.remove()\r\n    this.instances.delete(instance.id)\r\n    \r\n    // 触发回调\r\n    instance.options.onClose?.(result)\r\n    \r\n    // 调整其他通知位置\r\n    if (instance.options.style !== 'dialog') {\r\n      this.adjustPositions(instance.options.position || 'top-right')\r\n    }\r\n  }\r\n\r\n  private updateElement(instance: NotificationInstance): void {\r\n    // 简化实现：重新创建元素\r\n    const newElement = this.createElement(instance.options)\r\n    instance.element.replaceWith(newElement)\r\n    instance.element = newElement\r\n  }\r\n\r\n  private updateProgress(instance: NotificationInstance): void {\r\n    const bar = instance.element.querySelector('.notification-progress-bar') as HTMLElement\r\n    if (bar && instance.options.progress) {\r\n      const { value, max = 100 } = instance.options.progress\r\n      bar.style.width = `${(value / max) * 100}%`\r\n    }\r\n  }\r\n\r\n  private setupAutoClose(instance: NotificationInstance): void {\r\n    const { duration, persistent } = instance.options\r\n    \r\n    if (!duration || duration <= 0 || persistent) return\r\n    \r\n    // 初始定时器\r\n    const timerId = window.setTimeout(() => {\r\n      instance.close()\r\n      this.autoCloseTimers.delete(instance.id)\r\n    }, duration)\r\n    this.autoCloseTimers.set(instance.id, timerId)\r\n    \r\n    // 鼠标悬停时暂停\r\n    instance.element.addEventListener('mouseenter', () => {\r\n      const tid = this.autoCloseTimers.get(instance.id)\r\n      if (tid) {\r\n        clearTimeout(tid)\r\n        this.autoCloseTimers.delete(instance.id)\r\n      }\r\n    })\r\n    \r\n    instance.element.addEventListener('mouseleave', () => {\r\n      // 恢复定时器\r\n      const newTid = window.setTimeout(() => {\r\n        instance.close()\r\n        this.autoCloseTimers.delete(instance.id)\r\n      }, duration)\r\n      this.autoCloseTimers.set(instance.id, newTid)\r\n    })\r\n  }\r\n\r\n  private getContainer(position: NotificationPosition): HTMLElement {\r\n    let container = this.containers.get(position)\r\n    \r\n    if (!container) {\r\n      container = document.createElement('div')\r\n      container.className = `notification-container notification-container-${position}`\r\n      document.body.appendChild(container)\r\n      this.containers.set(position, container)\r\n    }\r\n    \r\n    return container\r\n  }\r\n\r\n  private setupContainers(): void {\r\n    // 容器会按需创建\r\n  }\r\n\r\n  private bindGlobalEvents(): void {\r\n    // ESC关闭顶层对话框\r\n    this.keydownHandler = (e: KeyboardEvent) => {\r\n      if (e.key === 'Escape') {\r\n        const dialogs = Array.from(this.instances.values())\r\n          .filter(i => i.options.style === 'dialog' && i.visible)\r\n          .sort((a, b) => (b.element.style.zIndex || '0').localeCompare(a.element.style.zIndex || '0'))\r\n        \r\n        if (dialogs[0]?.options.closable) {\r\n          dialogs[0].close()\r\n        }\r\n      }\r\n    }\r\n    document.addEventListener('keydown', this.keydownHandler)\r\n  }\r\n\r\n  private adjustPositions(position: NotificationPosition): void {\r\n    const container = this.containers.get(position)\r\n    if (!container) return\r\n    \r\n    const notifications = Array.from(container.children) as HTMLElement[]\r\n    let offset = 0\r\n    \r\n    notifications.forEach((el) => {\r\n      el.style.transform = `translateY(${offset}px)`\r\n      offset += el.offsetHeight + 10\r\n    })\r\n  }\r\n\r\n  private injectStyles(): void {\r\n    if (this.styleElement) return\r\n    \r\n    const style = document.createElement('style')\r\n    style.id = 'unified-notification-styles'\r\n    style.textContent = `\r\n      .notification-container {\r\n        position: fixed;\r\n        z-index: 2000;\r\n        pointer-events: none;\r\n      }\r\n      \r\n      .notification-container-top { top: 20px; left: 50%; transform: translateX(-50%); }\r\n      .notification-container-top-left { top: 20px; left: 20px; }\r\n      .notification-container-top-right { top: 20px; right: 20px; }\r\n      .notification-container-bottom { bottom: 20px; left: 50%; transform: translateX(-50%); }\r\n      .notification-container-bottom-left { bottom: 20px; left: 20px; }\r\n      .notification-container-bottom-right { bottom: 20px; right: 20px; }\r\n      .notification-container-center { top: 50%; left: 50%; transform: translate(-50%, -50%); }\r\n      \r\n      .notification {\r\n        pointer-events: auto;\r\n        opacity: 0;\r\n        transition: all 0.3s ease;\r\n        margin-bottom: 10px;\r\n      }\r\n      \r\n      .notification-show {\r\n        opacity: 1;\r\n      }\r\n      \r\n      .notification-hide {\r\n        opacity: 0;\r\n        transform: scale(0.9);\r\n      }\r\n      \r\n      /* Message样式 */\r\n      .notification-message, .notification-toast {\r\n        display: inline-flex;\r\n        align-items: center;\r\n        padding: 12px 16px;\r\n        border-radius: 4px;\r\n        background: white;\r\n        box-shadow: 0 2px 12px rgba(0,0,0,0.1);\r\n        font-size: 14px;\r\n        max-width: 400px;\r\n      }\r\n      \r\n      .notification-message .notification-icon,\r\n      .notification-toast .notification-icon {\r\n        margin-right: 8px;\r\n        font-size: 16px;\r\n      }\r\n      \r\n      .notification-message .notification-close,\r\n      .notification-toast .notification-close {\r\n        margin-left: 12px;\r\n        background: none;\r\n        border: none;\r\n        font-size: 18px;\r\n        cursor: pointer;\r\n        opacity: 0.5;\r\n        padding: 0;\r\n      }\r\n      \r\n      .notification-message .notification-close:hover,\r\n      .notification-toast .notification-close:hover {\r\n        opacity: 1;\r\n      }\r\n      \r\n      /* Dialog样式 */\r\n      .notification-dialog {\r\n        position: fixed;\r\n        top: 50%;\r\n        left: 50%;\r\n        transform: translate(-50%, -50%);\r\n        background: white;\r\n        border-radius: 8px;\r\n        box-shadow: 0 4px 20px rgba(0,0,0,0.15);\r\n        min-width: 400px;\r\n        max-width: 90vw;\r\n        max-height: 90vh;\r\n        overflow: hidden;\r\n        z-index: 2100;\r\n      }\r\n      \r\n      .notification-mask {\r\n        position: fixed;\r\n        top: 0;\r\n        left: 0;\r\n        right: 0;\r\n        bottom: 0;\r\n        background: rgba(0,0,0,0.5);\r\n        z-index: 2099;\r\n      }\r\n      \r\n      .notification-header {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n        padding: 16px 20px;\r\n        border-bottom: 1px solid #e8e8e8;\r\n      }\r\n      \r\n      .notification-header h3 {\r\n        margin: 0;\r\n        font-size: 16px;\r\n        font-weight: 600;\r\n      }\r\n      \r\n      .notification-body {\r\n        padding: 20px;\r\n        max-height: 60vh;\r\n        overflow-y: auto;\r\n      }\r\n      \r\n      .notification-footer {\r\n        display: flex;\r\n        justify-content: flex-end;\r\n        gap: 12px;\r\n        padding: 16px 20px;\r\n        border-top: 1px solid #e8e8e8;\r\n      }\r\n      \r\n      .notification-btn {\r\n        padding: 8px 16px;\r\n        border-radius: 4px;\r\n        border: 1px solid #d9d9d9;\r\n        background: white;\r\n        cursor: pointer;\r\n        font-size: 14px;\r\n        transition: all 0.2s;\r\n      }\r\n      \r\n      .notification-btn-primary {\r\n        background: #409eff;\r\n        border-color: #409eff;\r\n        color: white;\r\n      }\r\n      \r\n      .notification-btn-danger {\r\n        background: #f56c6c;\r\n        border-color: #f56c6c;\r\n        color: white;\r\n      }\r\n      \r\n      /* Notification样式 */\r\n      .notification-notification {\r\n        display: flex;\r\n        align-items: flex-start;\r\n        padding: 16px;\r\n        background: white;\r\n        border-radius: 8px;\r\n        box-shadow: 0 4px 12px rgba(0,0,0,0.1);\r\n        min-width: 320px;\r\n        max-width: 420px;\r\n      }\r\n      \r\n      .notification-notification .notification-icon {\r\n        font-size: 24px;\r\n        margin-right: 12px;\r\n        flex-shrink: 0;\r\n      }\r\n      \r\n      .notification-notification .notification-content {\r\n        flex: 1;\r\n      }\r\n      \r\n      .notification-notification .notification-title {\r\n        font-weight: 600;\r\n        margin-bottom: 4px;\r\n      }\r\n      \r\n      .notification-notification .notification-close {\r\n        background: none;\r\n        border: none;\r\n        font-size: 20px;\r\n        cursor: pointer;\r\n        opacity: 0.5;\r\n        padding: 0;\r\n        margin-left: 12px;\r\n      }\r\n      \r\n      .notification-progress {\r\n        height: 4px;\r\n        background: #f0f0f0;\r\n        border-radius: 2px;\r\n        margin-top: 8px;\r\n        overflow: hidden;\r\n      }\r\n      \r\n      .notification-progress-bar {\r\n        height: 100%;\r\n        background: #409eff;\r\n        transition: width 0.3s;\r\n      }\r\n      \r\n      .notification-actions {\r\n        display: flex;\r\n        gap: 8px;\r\n        margin-top: 12px;\r\n      }\r\n      \r\n      .notification-action {\r\n        padding: 4px 12px;\r\n        border-radius: 4px;\r\n        border: 1px solid #d9d9d9;\r\n        background: white;\r\n        cursor: pointer;\r\n        font-size: 12px;\r\n      }\r\n      \r\n      /* 类型样式 */\r\n      .notification-success { border-left: 4px solid #67c23a; }\r\n      .notification-success .notification-icon { color: #67c23a; }\r\n      \r\n      .notification-error { border-left: 4px solid #f56c6c; }\r\n      .notification-error .notification-icon { color: #f56c6c; }\r\n      \r\n      .notification-warning { border-left: 4px solid #e6a23c; }\r\n      .notification-warning .notification-icon { color: #e6a23c; }\r\n      \r\n      .notification-info { border-left: 4px solid #409eff; }\r\n      .notification-info .notification-icon { color: #409eff; }\r\n      \r\n      .notification-loading .notification-icon {\r\n        color: #409eff;\r\n        animation: notification-spin 1s linear infinite;\r\n      }\r\n      \r\n      @keyframes notification-spin {\r\n        from { transform: rotate(0deg); }\r\n        to { transform: rotate(360deg); }\r\n      }\r\n      \r\n      /* 输入框样式 */\r\n      .notification-input {\r\n        width: 100%;\r\n        padding: 8px;\r\n        margin-top: 12px;\r\n        border: 1px solid #ddd;\r\n        border-radius: 4px;\r\n        font-size: 14px;\r\n      }\r\n    `\r\n    \r\n    document.head.appendChild(style)\r\n    this.styleElement = style\r\n  }\r\n\r\n  /**\r\n   * 销毁系统\r\n   */\r\n  async destroy(): Promise<void> {\r\n    await this.closeAll()\r\n    \r\n    // 解绑全局事件\r\n    if (this.keydownHandler) {\r\n      document.removeEventListener('keydown', this.keydownHandler)\r\n      this.keydownHandler = undefined\r\n    }\r\n\r\n    // 清理容器\r\n    this.containers.forEach(container => container.remove())\r\n    this.containers.clear()\r\n    \r\n    // 清理样式\r\n    this.styleElement?.remove()\r\n    this.styleElement = undefined\r\n\r\n    // 清理自动关闭定时器\r\n    for (const tid of this.autoCloseTimers.values()) {\r\n      clearTimeout(tid)\r\n    }\r\n    this.autoCloseTimers.clear()\r\n  }\r\n}\r\n\r\n// 导出工厂函数\r\nexport function createNotificationSystem(engine: Engine): NotificationSystem {\r\n  return new NotificationSystem(engine)\r\n}\r\n\r\n// 向后兼容\r\nexport function createUnifiedNotificationSystem(engine: Engine): NotificationSystem {\r\n  return createNotificationSystem(engine)\r\n}\r\n\r\n// 向后兼容的类型别名\r\nexport { NotificationSystem as UnifiedNotificationSystem }\r\n"],"names":[],"mappings":"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"}