{"version":3,"file":"performance-budget.js","sources":["../../src/performance/performance-budget.ts"],"sourcesContent":["/**\r\n * 性能预算管理器\r\n * 监控和管理应用性能预算\r\n */\r\n\r\nexport interface PerformanceBudget {\r\n  /** 包体积限制（字节） */\r\n  bundleSize?: number\r\n  /** 初始加载时间限制（毫秒） */\r\n  initialLoadTime?: number\r\n  /** 内存使用限制（字节） */\r\n  memoryUsage?: number\r\n  /** FPS 最低限制 */\r\n  minFps?: number\r\n  /** DOM 节点数量限制 */\r\n  domNodes?: number\r\n  /** 网络请求数量限制 */\r\n  networkRequests?: number\r\n  /** 网络请求总大小限制（字节） */\r\n  networkSize?: number\r\n}\r\n\r\nexport interface PerformanceMetric {\r\n  name: string\r\n  value: number\r\n  limit: number\r\n  unit: string\r\n  exceeded: boolean\r\n  percentage: number\r\n}\r\n\r\nexport type BudgetExceededCallback = (metric: PerformanceMetric) => void\r\n\r\nexport class PerformanceBudgetManager {\r\n  private budget: PerformanceBudget\r\n  private onExceeded?: BudgetExceededCallback\r\n  private metrics: Map<string, PerformanceMetric> = new Map()\r\n  private monitoring = false\r\n  private observer?: PerformanceObserver\r\n  private animationFrameId?: number\r\n\r\n  constructor(budget: PerformanceBudget, onExceeded?: BudgetExceededCallback) {\r\n    this.budget = budget\r\n    this.onExceeded = onExceeded\r\n    this.initializeMetrics()\r\n  }\r\n\r\n  /**\r\n   * 初始化指标\r\n   */\r\n  private initializeMetrics(): void {\r\n    if (this.budget.bundleSize) {\r\n      this.metrics.set('bundleSize', {\r\n        name: 'Bundle Size',\r\n        value: 0,\r\n        limit: this.budget.bundleSize,\r\n        unit: 'bytes',\r\n        exceeded: false,\r\n        percentage: 0\r\n      })\r\n    }\r\n\r\n    if (this.budget.initialLoadTime) {\r\n      this.metrics.set('initialLoadTime', {\r\n        name: 'Initial Load Time',\r\n        value: 0,\r\n        limit: this.budget.initialLoadTime,\r\n        unit: 'ms',\r\n        exceeded: false,\r\n        percentage: 0\r\n      })\r\n    }\r\n\r\n    if (this.budget.memoryUsage) {\r\n      this.metrics.set('memoryUsage', {\r\n        name: 'Memory Usage',\r\n        value: 0,\r\n        limit: this.budget.memoryUsage,\r\n        unit: 'bytes',\r\n        exceeded: false,\r\n        percentage: 0\r\n      })\r\n    }\r\n\r\n    if (this.budget.minFps) {\r\n      this.metrics.set('fps', {\r\n        name: 'FPS',\r\n        value: 60,\r\n        limit: this.budget.minFps,\r\n        unit: 'fps',\r\n        exceeded: false,\r\n        percentage: 100\r\n      })\r\n    }\r\n\r\n    if (this.budget.domNodes) {\r\n      this.metrics.set('domNodes', {\r\n        name: 'DOM Nodes',\r\n        value: 0,\r\n        limit: this.budget.domNodes,\r\n        unit: 'nodes',\r\n        exceeded: false,\r\n        percentage: 0\r\n      })\r\n    }\r\n\r\n    if (this.budget.networkRequests) {\r\n      this.metrics.set('networkRequests', {\r\n        name: 'Network Requests',\r\n        value: 0,\r\n        limit: this.budget.networkRequests,\r\n        unit: 'requests',\r\n        exceeded: false,\r\n        percentage: 0\r\n      })\r\n    }\r\n\r\n    if (this.budget.networkSize) {\r\n      this.metrics.set('networkSize', {\r\n        name: 'Network Size',\r\n        value: 0,\r\n        limit: this.budget.networkSize,\r\n        unit: 'bytes',\r\n        exceeded: false,\r\n        percentage: 0\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 开始监控\r\n   */\r\n  startMonitoring(): void {\r\n    if (this.monitoring) return\r\n    this.monitoring = true\r\n\r\n    // 监控页面加载性能\r\n    this.monitorLoadPerformance()\r\n\r\n    // 监控内存使用\r\n    this.monitorMemory()\r\n\r\n    // 监控 FPS\r\n    this.monitorFPS()\r\n\r\n    // 监控 DOM 节点\r\n    this.monitorDOMNodes()\r\n\r\n    // 监控网络请求\r\n    this.monitorNetwork()\r\n  }\r\n\r\n  /**\r\n   * 停止监控\r\n   */\r\n  stopMonitoring(): void {\r\n    this.monitoring = false\r\n\r\n    if (this.observer) {\r\n      this.observer.disconnect()\r\n      this.observer = undefined\r\n    }\r\n\r\n    if (this.animationFrameId) {\r\n      cancelAnimationFrame(this.animationFrameId)\r\n      this.animationFrameId = undefined\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 监控加载性能\r\n   */\r\n  private monitorLoadPerformance(): void {\r\n    if (typeof window === 'undefined') return\r\n\r\n    // 使用 Navigation Timing API\r\n    if (window.performance && window.performance.timing) {\r\n      const timing = window.performance.timing\r\n      const loadTime = timing.loadEventEnd - timing.navigationStart\r\n\r\n      if (loadTime > 0 && this.metrics.has('initialLoadTime')) {\r\n        this.updateMetric('initialLoadTime', loadTime)\r\n      }\r\n    }\r\n\r\n    // 监控资源加载\r\n    if (window.performance && window.performance.getEntriesByType) {\r\n      const resources = window.performance.getEntriesByType('resource')\r\n      let totalSize = 0\r\n\r\n      resources.forEach(resource => {\r\n        if ('transferSize' in resource) {\r\n          totalSize += (resource as unknown as { transferSize: number }).transferSize\r\n        }\r\n      })\r\n\r\n      if (this.metrics.has('bundleSize')) {\r\n        this.updateMetric('bundleSize', totalSize)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 监控内存使用\r\n   */\r\n  private monitorMemory(): void {\r\n    if (typeof window === 'undefined') return\r\n\r\n    // 检查是否支持 memory API\r\n    if ('memory' in performance) {\r\n      const checkMemory = () => {\r\n        if (!this.monitoring) return\r\n\r\n        const memory = (performance as unknown as { memory?: { usedJSHeapSize: number } }).memory\r\n        if (memory && this.metrics.has('memoryUsage')) {\r\n          this.updateMetric('memoryUsage', memory.usedJSHeapSize)\r\n        }\r\n\r\n        // 每秒检查一次\r\n        setTimeout(() => checkMemory(), 1000)\r\n      }\r\n\r\n      checkMemory()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 监控 FPS\r\n   */\r\n  private monitorFPS(): void {\r\n    if (typeof window === 'undefined') return\r\n\r\n    let lastTime = performance.now()\r\n    let frameCount = 0\r\n    let fps = 60\r\n\r\n    const measureFPS = () => {\r\n      if (!this.monitoring) return\r\n\r\n      const currentTime = performance.now()\r\n      frameCount++\r\n\r\n      if (currentTime >= lastTime + 1000) {\r\n        fps = Math.round((frameCount * 1000) / (currentTime - lastTime))\r\n        frameCount = 0\r\n        lastTime = currentTime\r\n\r\n        if (this.metrics.has('fps')) {\r\n          const metric = this.metrics.get('fps')\r\n          if (metric) {\r\n            metric.value = fps\r\n            metric.exceeded = fps < metric.limit\r\n            metric.percentage = (fps / 60) * 100\r\n\r\n            if (metric.exceeded && this.onExceeded) {\r\n              this.onExceeded(metric)\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      this.animationFrameId = requestAnimationFrame(measureFPS)\r\n    }\r\n\r\n    measureFPS()\r\n  }\r\n\r\n  /**\r\n   * 监控 DOM 节点数量\r\n   */\r\n  private monitorDOMNodes(): void {\r\n    if (typeof window === 'undefined') return\r\n\r\n    const checkDOMNodes = () => {\r\n      if (!this.monitoring) return\r\n\r\n      const nodeCount = document.getElementsByTagName('*').length\r\n\r\n      if (this.metrics.has('domNodes')) {\r\n        this.updateMetric('domNodes', nodeCount)\r\n      }\r\n\r\n      // 每秒检查一次\r\n      setTimeout(() => checkDOMNodes(), 1000)\r\n    }\r\n\r\n    checkDOMNodes()\r\n  }\r\n\r\n  /**\r\n   * 监控网络请求\r\n   */\r\n  private monitorNetwork(): void {\r\n    if (typeof window === 'undefined') return\r\n\r\n    let requestCount = 0\r\n    let totalSize = 0\r\n\r\n    // 使用 PerformanceObserver 监控网络请求\r\n    if ('PerformanceObserver' in window) {\r\n      this.observer = new PerformanceObserver((list) => {\r\n        for (const entry of list.getEntries()) {\r\n          if (entry.entryType === 'resource') {\r\n            requestCount++\r\n\r\n            if ('transferSize' in entry) {\r\n              totalSize += (entry as unknown as { transferSize: number }).transferSize\r\n            }\r\n\r\n            if (this.metrics.has('networkRequests')) {\r\n              this.updateMetric('networkRequests', requestCount)\r\n            }\r\n\r\n            if (this.metrics.has('networkSize')) {\r\n              this.updateMetric('networkSize', totalSize)\r\n            }\r\n          }\r\n        }\r\n      })\r\n\r\n      this.observer.observe({ entryTypes: ['resource'] })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 更新指标\r\n   */\r\n  private updateMetric(name: string, value: number): void {\r\n    const metric = this.metrics.get(name)\r\n    if (!metric) return\r\n\r\n    metric.value = value\r\n    metric.percentage = (value / metric.limit) * 100\r\n\r\n    const wasExceeded = metric.exceeded\r\n    metric.exceeded = metric.name === 'FPS'\r\n      ? value < metric.limit\r\n      : value > metric.limit\r\n\r\n    // 如果首次超出预算，触发回调\r\n    if (!wasExceeded && metric.exceeded && this.onExceeded) {\r\n      this.onExceeded(metric)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 手动检查特定指标\r\n   */\r\n  checkMetric(name: string, value: number): PerformanceMetric | null {\r\n    if (!this.metrics.has(name)) return null\r\n\r\n    this.updateMetric(name, value)\r\n    return this.metrics.get(name) || null\r\n  }\r\n\r\n  /**\r\n   * 获取所有指标\r\n   */\r\n  getAllMetrics(): PerformanceMetric[] {\r\n    return Array.from(this.metrics.values())\r\n  }\r\n\r\n  /**\r\n   * 获取超出预算的指标\r\n   */\r\n  getExceededMetrics(): PerformanceMetric[] {\r\n    return Array.from(this.metrics.values()).filter(m => m.exceeded)\r\n  }\r\n\r\n  /**\r\n   * 获取性能报告\r\n   */\r\n  getReport(): {\r\n    passed: boolean\r\n    metrics: PerformanceMetric[]\r\n    exceeded: PerformanceMetric[]\r\n    summary: string\r\n  } {\r\n    const metrics = this.getAllMetrics()\r\n    const exceeded = this.getExceededMetrics()\r\n    const passed = exceeded.length === 0\r\n\r\n    const summary = passed\r\n      ? '✅ 所有性能指标都在预算范围内'\r\n      : `⚠️ ${exceeded.length} 个性能指标超出预算: ${exceeded.map(m => m.name).join(', ')}`\r\n\r\n    return {\r\n      passed,\r\n      metrics,\r\n      exceeded,\r\n      summary\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 重置指标\r\n   */\r\n  reset(): void {\r\n    this.stopMonitoring()\r\n    this.metrics.clear()\r\n    this.initializeMetrics()\r\n  }\r\n\r\n  /**\r\n   * 更新预算\r\n   */\r\n  updateBudget(budget: Partial<PerformanceBudget>): void {\r\n    this.budget = { ...this.budget, ...budget }\r\n    this.reset()\r\n  }\r\n\r\n  /**\r\n   * 销毁\r\n   */\r\n  destroy(): void {\r\n    this.stopMonitoring()\r\n    this.metrics.clear()\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}