{"version":3,"file":"profiler.js","sources":["../../src/performance/profiler.ts"],"sourcesContent":["/**\n * 高级性能分析工具\n * 提供函数调用分析、组件渲染追踪和自动报告生成\n */\n\nimport type { Engine } from '../types'\nimport type { Logger } from '../types/logger'\n\n// 函数调用记录\nexport interface FunctionCallRecord {\n  name: string\n  startTime: number\n  endTime?: number\n  duration?: number\n  args?: unknown[]\n  result?: unknown\n  error?: Error\n  callStack?: string\n  memoryBefore?: number\n  memoryAfter?: number\n}\n\n// 组件渲染记录\nexport interface ComponentRenderRecord {\n  componentName: string\n  renderCount: number\n  totalTime: number\n  averageTime: number\n  slowRenders: number // 慢渲染次数（>16ms）\n  lastRenderTime: number\n  props?: Record<string, unknown>\n}\n\n// 性能分析器配置\nexport interface ProfilerConfig {\n  enableFunctionProfiling?: boolean\n  enableComponentProfiling?: boolean\n  enableMemoryProfiling?: boolean\n  sampleRate?: number // 采样率（0-1）\n  slowThreshold?: number // 慢函数阈值（ms）\n  maxRecords?: number // 最大记录数\n  autoReport?: boolean // 自动生成报告\n  reportInterval?: number // 报告生成间隔（ms）\n}\n\n// 性能报告\nexport interface PerformanceProfileReport {\n  timestamp: number\n  duration: number\n  summary: {\n    totalFunctionCalls: number\n    slowFunctions: number\n    averageFunctionTime: number\n    totalComponentRenders: number\n    slowRenders: number\n    averageRenderTime: number\n    memoryGrowth: number\n  }\n  topSlowFunctions: Array<{ name: string; avgTime: number; calls: number }>\n  topSlowComponents: Array<{ name: string; avgTime: number; renders: number }>\n  recommendations: string[]\n}\n\n/**\n * 性能分析器实现\n */\nexport class Profiler {\n  private functionCalls = new Map<string, FunctionCallRecord[]>()\n  private componentRenders = new Map<string, ComponentRenderRecord>()\n  private config: Required<ProfilerConfig>\n  private enabled = false\n  private startTimestamp = 0\n  private reportTimer?: NodeJS.Timeout\n  private currentCallId = 0\n\n  constructor(\n    config: ProfilerConfig = {},\n    private engine?: Engine,\n    private logger?: Logger\n  ) {\n    this.config = {\n      enableFunctionProfiling: config.enableFunctionProfiling ?? true,\n      enableComponentProfiling: config.enableComponentProfiling ?? true,\n      enableMemoryProfiling: config.enableMemoryProfiling ?? true,\n      sampleRate: config.sampleRate ?? 1.0, // 默认100%采样\n      slowThreshold: config.slowThreshold || 100,\n      maxRecords: config.maxRecords || 1000,\n      autoReport: config.autoReport ?? false,\n      reportInterval: config.reportInterval || 60000 // 1分钟\n    }\n  }\n\n  /**\n   * 开始分析\n   */\n  start(): void {\n    if (this.enabled) {\n      this.logger?.warn('Profiler already started')\n      return\n    }\n\n    this.enabled = true\n    this.startTimestamp = Date.now()\n\n    if (this.config.autoReport) {\n      this.startAutoReporting()\n    }\n\n    this.logger?.info('Performance profiler started')\n  }\n\n  /**\n   * 停止分析\n   */\n  stop(): void {\n    if (!this.enabled) {\n      return\n    }\n\n    this.enabled = false\n\n    if (this.reportTimer) {\n      clearInterval(this.reportTimer)\n      this.reportTimer = undefined\n    }\n\n    this.logger?.info('Performance profiler stopped')\n  }\n\n  /**\n   * 是否正在分析\n   */\n  isEnabled(): boolean {\n    return this.enabled\n  }\n\n  /**\n   * 记录函数调用开始\n   */\n  startFunctionCall(functionName: string, args?: unknown[]): number {\n    if (!this.enabled || !this.config.enableFunctionProfiling) {\n      return -1\n    }\n\n    // 采样率控制\n    if (Math.random() > this.config.sampleRate) {\n      return -1\n    }\n\n    const callId = ++this.currentCallId\n    const record: FunctionCallRecord = {\n      name: functionName,\n      startTime: performance.now(),\n      args,\n      callStack: this.captureCallStack()\n    }\n\n    // 记录内存\n    if (this.config.enableMemoryProfiling) {\n      record.memoryBefore = this.getMemoryUsage()\n    }\n\n    // 存储记录\n    const calls = this.functionCalls.get(functionName) || []\n    calls.push(record)\n    this.functionCalls.set(functionName, calls)\n\n    // 限制记录数量\n    if (calls.length > this.config.maxRecords) {\n      calls.shift()\n    }\n\n    return callId\n  }\n\n  /**\n   * 记录函数调用结束\n   */\n  endFunctionCall(functionName: string, callId: number, result?: unknown, error?: Error): void {\n    if (callId === -1) {\n      return\n    }\n\n    const calls = this.functionCalls.get(functionName)\n    if (!calls) {\n      return\n    }\n\n    const record = calls[calls.length - 1]\n    if (!record) {\n      return\n    }\n\n    record.endTime = performance.now()\n    record.duration = record.endTime - record.startTime\n    record.result = result\n    record.error = error\n\n    // 记录内存\n    if (this.config.enableMemoryProfiling) {\n      record.memoryAfter = this.getMemoryUsage()\n    }\n\n    // 检查是否为慢函数\n    if (record.duration > this.config.slowThreshold) {\n      this.logger?.warn(`Slow function detected: ${functionName}`, {\n        duration: `${record.duration.toFixed(2)}ms`,\n        threshold: `${this.config.slowThreshold}ms`\n      })\n    }\n  }\n\n  /**\n   * 记录组件渲染\n   */\n  recordComponentRender(\n    componentName: string,\n    renderTime: number,\n    props?: Record<string, unknown>\n  ): void {\n    if (!this.enabled || !this.config.enableComponentProfiling) {\n      return\n    }\n\n    let record = this.componentRenders.get(componentName)\n\n    if (!record) {\n      record = {\n        componentName,\n        renderCount: 0,\n        totalTime: 0,\n        averageTime: 0,\n        slowRenders: 0,\n        lastRenderTime: Date.now()\n      }\n      this.componentRenders.set(componentName, record)\n    }\n\n    record.renderCount++\n    record.totalTime += renderTime\n    record.averageTime = record.totalTime / record.renderCount\n    record.lastRenderTime = Date.now()\n\n    if (props) {\n      record.props = props\n    }\n\n    // 检查慢渲染（>16ms = 低于60fps）\n    if (renderTime > 16) {\n      record.slowRenders++\n      this.logger?.warn(`Slow component render: ${componentName}`, {\n        renderTime: `${renderTime.toFixed(2)}ms`,\n        slowRenderRate: `${((record.slowRenders / record.renderCount) * 100).toFixed(1)}%`\n      })\n    }\n  }\n\n  /**\n   * 生成性能报告\n   */\n  generateReport(): PerformanceProfileReport {\n    const now = Date.now()\n    const duration = now - this.startTimestamp\n\n    // 汇总函数调用统计\n    const functionStats = new Map<string, { totalTime: number; calls: number; slowCalls: number }>()\n\n    for (const [name, calls] of this.functionCalls) {\n      const completedCalls = calls.filter(c => c.duration !== undefined)\n      const totalTime = completedCalls.reduce((sum, c) => sum + (c.duration || 0), 0)\n      const slowCalls = completedCalls.filter(c => (c.duration || 0) > this.config.slowThreshold).length\n\n      functionStats.set(name, {\n        totalTime,\n        calls: completedCalls.length,\n        slowCalls\n      })\n    }\n\n    const totalFunctionCalls = Array.from(functionStats.values()).reduce((sum, s) => sum + s.calls, 0)\n    const slowFunctions = Array.from(functionStats.values()).filter(s => s.slowCalls > 0).length\n    const avgFunctionTime = totalFunctionCalls > 0\n      ? Array.from(functionStats.values()).reduce((sum, s) => sum + s.totalTime, 0) / totalFunctionCalls\n      : 0\n\n    // 汇总组件渲染统计\n    const components = Array.from(this.componentRenders.values())\n    const totalComponentRenders = components.reduce((sum, c) => sum + c.renderCount, 0)\n    const totalSlowRenders = components.reduce((sum, c) => sum + c.slowRenders, 0)\n    const avgRenderTime = totalComponentRenders > 0\n      ? components.reduce((sum, c) => sum + c.totalTime, 0) / totalComponentRenders\n      : 0\n\n    // 计算内存增长\n    const memoryGrowth = this.calculateMemoryGrowth()\n\n    // 生成 Top 慢函数列表\n    const topSlowFunctions = Array.from(functionStats.entries())\n      .map(([name, stats]) => ({\n        name,\n        avgTime: stats.totalTime / stats.calls,\n        calls: stats.calls\n      }))\n      .sort((a, b) => b.avgTime - a.avgTime)\n      .slice(0, 10)\n\n    // 生成 Top 慢组件列表\n    const topSlowComponents = components\n      .map(c => ({\n        name: c.componentName,\n        avgTime: c.averageTime,\n        renders: c.renderCount\n      }))\n      .sort((a, b) => b.avgTime - a.avgTime)\n      .slice(0, 10)\n\n    // 生成优化建议\n    const recommendations = this.generateRecommendations(\n      functionStats,\n      components,\n      memoryGrowth\n    )\n\n    return {\n      timestamp: now,\n      duration,\n      summary: {\n        totalFunctionCalls,\n        slowFunctions,\n        averageFunctionTime: avgFunctionTime,\n        totalComponentRenders,\n        slowRenders: totalSlowRenders,\n        averageRenderTime: avgRenderTime,\n        memoryGrowth\n      },\n      topSlowFunctions,\n      topSlowComponents,\n      recommendations\n    }\n  }\n\n  /**\n   * 生成优化建议\n   */\n  private generateRecommendations(\n    functionStats: Map<string, { totalTime: number; calls: number; slowCalls: number }>,\n    components: ComponentRenderRecord[],\n    memoryGrowth: number\n  ): string[] {\n    const recommendations: string[] = []\n\n    // 分析慢函数\n    const slowFunctions = Array.from(functionStats.entries())\n      .filter(([, stats]) => stats.slowCalls > stats.calls * 0.1)\n\n    if (slowFunctions.length > 0) {\n      recommendations.push(`发现 ${slowFunctions.length} 个性能瓶颈函数，建议优化`)\n\n      const slowest = slowFunctions\n        .sort((a, b) => b[1].totalTime - a[1].totalTime)[0]\n\n      if (slowest) {\n        recommendations.push(`最慢函数: ${slowest[0]} (平均 ${(slowest[1].totalTime / slowest[1].calls).toFixed(2)}ms)`)\n      }\n    }\n\n    // 分析慢组件\n    const slowComponents = components.filter(c => c.averageTime > 16)\n    if (slowComponents.length > 0) {\n      recommendations.push(`发现 ${slowComponents.length} 个渲染慢的组件，建议优化`)\n\n      const slowest = slowComponents.sort((a, b) => b.averageTime - a.averageTime)[0]\n      if (slowest) {\n        recommendations.push(\n          `最慢组件: ${slowest.componentName} (平均 ${slowest.averageTime.toFixed(2)}ms, ${slowest.slowRenders}/${slowest.renderCount} 次慢渲染)`\n        )\n      }\n    }\n\n    // 分析内存增长\n    if (memoryGrowth > 10 * 1024 * 1024) {\n      recommendations.push(`内存增长 ${(memoryGrowth / 1024 / 1024).toFixed(2)}MB，检查是否有内存泄漏`)\n    }\n\n    // 通用建议\n    if (recommendations.length === 0) {\n      recommendations.push('性能表现良好，继续保持')\n    }\n\n    return recommendations\n  }\n\n  /**\n   * 计算内存增长\n   */\n  private calculateMemoryGrowth(): number {\n    if (!this.config.enableMemoryProfiling) {\n      return 0\n    }\n\n    // 收集所有函数调用的内存数据\n    const memoryDiffs: number[] = []\n\n    for (const calls of this.functionCalls.values()) {\n      for (const call of calls) {\n        if (call.memoryBefore !== undefined && call.memoryAfter !== undefined) {\n          memoryDiffs.push(call.memoryAfter - call.memoryBefore)\n        }\n      }\n    }\n\n    if (memoryDiffs.length === 0) {\n      return 0\n    }\n\n    // 返回平均增长\n    return memoryDiffs.reduce((sum, diff) => sum + diff, 0) / memoryDiffs.length\n  }\n\n  /**\n   * 获取当前内存使用\n   */\n  private getMemoryUsage(): number {\n    if (typeof performance !== 'undefined' && (performance as any).memory) {\n      return (performance as any).memory.usedJSHeapSize\n    }\n    return 0\n  }\n\n  /**\n   * 捕获调用栈\n   */\n  private captureCallStack(): string {\n    try {\n      const stack = new Error().stack || ''\n      // 移除前几行（Error构造和profiler本身）\n      const lines = stack.split('\\n').slice(3)\n      return lines.join('\\n')\n    } catch {\n      return ''\n    }\n  }\n\n  /**\n   * 启动自动报告\n   */\n  private startAutoReporting(): void {\n    this.reportTimer = setInterval(() => {\n      const report = this.generateReport()\n      this.logger?.info('Performance Profile Report', report.summary)\n\n      // 触发事件（如果有引擎）\n      if (this.engine?.events) {\n        this.engine.events.emit('profiler:report', report)\n      }\n    }, this.config.reportInterval) as any\n  }\n\n  /**\n   * 清除记录\n   */\n  clearRecords(): void {\n    this.functionCalls.clear()\n    this.componentRenders.clear()\n    this.logger?.debug('Profiler records cleared')\n  }\n\n  /**\n   * 获取函数调用统计\n   */\n  getFunctionStats(): Map<string, { calls: number; totalTime: number; avgTime: number }> {\n    const stats = new Map<string, { calls: number; totalTime: number; avgTime: number }>()\n\n    for (const [name, calls] of this.functionCalls) {\n      const completedCalls = calls.filter(c => c.duration !== undefined)\n      const totalTime = completedCalls.reduce((sum, c) => sum + (c.duration || 0), 0)\n      const avgTime = completedCalls.length > 0 ? totalTime / completedCalls.length : 0\n\n      stats.set(name, {\n        calls: completedCalls.length,\n        totalTime,\n        avgTime\n      })\n    }\n\n    return stats\n  }\n\n  /**\n   * 获取组件统计\n   */\n  getComponentStats(): ComponentRenderRecord[] {\n    return Array.from(this.componentRenders.values())\n  }\n\n  /**\n   * 导出数据\n   */\n  exportData(): string {\n    return JSON.stringify({\n      functionCalls: Array.from(this.functionCalls.entries()),\n      componentRenders: Array.from(this.componentRenders.entries()),\n      startTimestamp: this.startTimestamp,\n      config: this.config\n    })\n  }\n\n  /**\n   * 导入数据\n   */\n  importData(data: string): void {\n    try {\n      const parsed = JSON.parse(data)\n\n      if (parsed.functionCalls) {\n        this.functionCalls = new Map(parsed.functionCalls)\n      }\n\n      if (parsed.componentRenders) {\n        this.componentRenders = new Map(parsed.componentRenders)\n      }\n\n      if (parsed.startTimestamp) {\n        this.startTimestamp = parsed.startTimestamp\n      }\n\n      this.logger?.info('Profiler data imported')\n    } catch (error) {\n      this.logger?.error('Failed to import profiler data', error)\n    }\n  }\n\n  /**\n   * 销毁分析器\n   */\n  destroy(): void {\n    this.stop()\n    this.clearRecords()\n  }\n}\n\n/**\n * 创建性能分析器\n */\nexport function createProfiler(\n  config?: ProfilerConfig,\n  engine?: Engine,\n  logger?: Logger\n): Profiler {\n  return new Profiler(config, engine, logger)\n}\n\n/**\n * 性能分析装饰器\n * 自动追踪函数执行性能\n */\nexport function Profile(profiler?: Profiler) {\n  return function (\n    target: any,\n    propertyKey: string,\n    descriptor: PropertyDescriptor\n  ) {\n    const originalMethod = descriptor.value\n    const functionName = `${target.constructor?.name || 'Unknown'}.${propertyKey}`\n\n    descriptor.value = async function (...args: any[]) {\n      const prof = profiler || getGlobalProfiler()\n      const callId = prof.startFunctionCall(functionName, args)\n\n      try {\n        const result = await originalMethod.apply(this, args)\n        prof.endFunctionCall(functionName, callId, result)\n        return result\n      } catch (error) {\n        prof.endFunctionCall(functionName, callId, undefined, error as Error)\n        throw error\n      }\n    }\n\n    return descriptor\n  }\n}\n\n// 全局分析器实例\nlet globalProfiler: Profiler | undefined\n\nexport function getGlobalProfiler(): Profiler {\n  if (!globalProfiler) {\n    globalProfiler = createProfiler()\n  }\n  return globalProfiler\n}\n\nexport function setGlobalProfiler(profiler: Profiler): void {\n  globalProfiler = profiler\n}\n\n\n\n\n"],"names":[],"mappings":"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"}