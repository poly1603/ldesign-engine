{"version":3,"file":"virtual-scroll.js","sources":["../../src/performance/virtual-scroll.ts"],"sourcesContent":["/**\n * Virtual Scrolling System\n * \n * 高性能虚拟滚动和组件懒加载系统\n * - 虚拟列表渲染\n * - 动态高度支持\n * - 组件懒加载\n * - 资源预加载\n * - 滚动性能优化\n */\n\nimport type { Logger } from '../types'\nimport { type Component, computed, type ComputedRef, onUnmounted, ref, type Ref, shallowRef, watchEffect } from 'vue'\n\n// 虚拟滚动项\nexport interface VirtualItem<T = any> {\n  index: number\n  data: T\n  offset: number\n  size: number\n  visible: boolean\n}\n\n// 虚拟滚动配置\nexport interface VirtualScrollConfig {\n  itemHeight?: number | ((index: number, item: any) => number)\n  buffer?: number\n  overscan?: number\n  horizontal?: boolean\n  pageMode?: boolean\n  preloadTime?: number\n  estimateSize?: number\n  keepAlive?: boolean\n  threshold?: number\n  // 新增配置\n  bidirectional?: boolean // 双向滚动支持\n  adaptiveBuffer?: boolean // 自适应缓冲区\n  minBuffer?: number // 最小缓冲区\n  maxBuffer?: number // 最大缓冲区\n}\n\n// 滚动状态\nexport interface ScrollState {\n  offset: number\n  clientSize: number\n  scrollSize: number\n  startIndex: number\n  endIndex: number\n  visibleItems: number\n}\n\n// 懒加载组件配置\nexport interface LazyComponentConfig {\n  loading?: Component\n  error?: Component\n  delay?: number\n  timeout?: number\n  retries?: number\n  preload?: boolean\n  distance?: number\n}\n\n/**\n * 虚拟滚动管理器\n */\nexport class VirtualScroller<T = any> {\n  // 响应式数据\n  private items = shallowRef<T[]>([])\n  private scrollOffset = ref(0)\n  private clientSize = ref(0)\n  private scrollSize = ref(0)\n  private isScrolling = ref(false)\n\n  // 缓存 (with LRU eviction)\n  private sizeCache = new Map<number, number>()\n  private offsetCache = new Map<number, number>()\n  private cacheAccessOrder = new Set<number>()  // Track access order for LRU\n  private readonly maxCacheSize = 1000  // Maximum cache entries\n  private lastMeasuredIndex = -1\n\n  // 配置\n  private config: Required<VirtualScrollConfig>\n\n  // 计算属性\n  public readonly visibleRange: ComputedRef<{ start: number; end: number }>\n  public readonly visibleItems: ComputedRef<VirtualItem<T>[]>\n  public readonly scrollState: ComputedRef<ScrollState>\n\n  // 性能监控\n  private scrollTimer: NodeJS.Timeout | null = null\n  private rafId: number | null = null\n  private lastScrollTime = 0\n  private scrollVelocity = 0\n\n  constructor(\n    config: VirtualScrollConfig = {},\n    private logger?: Logger\n  ) {\n    this.config = {\n      itemHeight: 50,\n      buffer: 5,\n      overscan: 3,\n      horizontal: false,\n      pageMode: false,\n      preloadTime: 50,\n      estimateSize: 50,\n      keepAlive: false,\n      threshold: 0.1,\n      bidirectional: config.bidirectional ?? false,\n      adaptiveBuffer: config.adaptiveBuffer ?? true,\n      minBuffer: config.minBuffer || 3,\n      maxBuffer: config.maxBuffer || 10,\n      ...config\n    }\n\n    // 初始化计算属性\n    this.visibleRange = computed(() => this.calculateVisibleRange())\n    this.visibleItems = computed(() => this.getVisibleItems())\n    this.scrollState = computed(() => this.getScrollState())\n\n    this.logger?.debug('Virtual scroller initialized', this.config)\n  }\n\n  /**\n   * 设置数据项\n   */\n  setItems(items: T[]): void {\n    this.items.value = items\n    this.resetCache()\n    this.updateScrollSize()\n  }\n\n  /**\n   * 更新容器尺寸\n   */\n  updateSize(clientSize: number): void {\n    this.clientSize.value = clientSize\n  }\n\n  /**\n   * 处理滚动事件\n   */\n  handleScroll(offset: number): void {\n    const now = Date.now()\n    const timeDelta = now - this.lastScrollTime\n\n    if (timeDelta > 0) {\n      const offsetDelta = offset - this.scrollOffset.value\n      this.scrollVelocity = offsetDelta / timeDelta\n    }\n\n    this.scrollOffset.value = offset\n    this.lastScrollTime = now\n\n    // 防抖处理\n    this.isScrolling.value = true\n\n    if (this.scrollTimer) {\n      clearTimeout(this.scrollTimer)\n      this.scrollTimer = null\n    }\n\n    this.scrollTimer = setTimeout(() => {\n      this.isScrolling.value = false\n      this.scrollVelocity = 0\n      // 清理远离视口的缓存\n      this.cleanupDistantCache()\n      this.scrollTimer = null\n    }, 150)\n\n    // 预测滚动\n    if (Math.abs(this.scrollVelocity) > 0.5) {\n      this.predictivePreload()\n    }\n  }\n\n  /**\n   * 滚动到指定索引\n   */\n  scrollToIndex(\n    index: number,\n    align: 'start' | 'center' | 'end' | 'auto' = 'auto'\n  ): void {\n    const targetOffset = this.getItemOffset(index)\n    const itemSize = this.getItemSize(index)\n\n    let offset = targetOffset\n\n    switch (align) {\n      case 'center':\n        offset = targetOffset - (this.clientSize.value - itemSize) / 2\n        break\n      case 'end':\n        offset = targetOffset - this.clientSize.value + itemSize\n        break\n      case 'auto': {\n        const currentOffset = this.scrollOffset.value\n        const currentEnd = currentOffset + this.clientSize.value\n\n        if (targetOffset < currentOffset) {\n          offset = targetOffset\n        } else if (targetOffset + itemSize > currentEnd) {\n          offset = targetOffset - this.clientSize.value + itemSize\n        } else {\n          return // 已在视口内\n        }\n        break\n      }\n    }\n\n    this.smoothScrollTo(Math.max(0, offset))\n  }\n\n  /**\n   * 平滑滚动\n   */\n  private smoothScrollTo(target: number): void {\n    const start = this.scrollOffset.value\n    const distance = target - start\n    const duration = Math.min(500, Math.abs(distance) * 2)\n    const startTime = Date.now()\n\n    const animate = () => {\n      const now = Date.now()\n      const progress = Math.min((now - startTime) / duration, 1)\n      const easeProgress = this.easeInOutCubic(progress)\n\n      const currentOffset = start + distance * easeProgress\n      this.scrollOffset.value = currentOffset\n\n      if (progress < 1) {\n        this.rafId = requestAnimationFrame(animate)\n      }\n    }\n\n    if (this.rafId) {\n      cancelAnimationFrame(this.rafId)\n      this.rafId = null\n    }\n\n    animate()\n  }\n\n  /**\n   * 缓动函数\n   */\n  private easeInOutCubic(t: number): number {\n    return t < 0.5\n      ? 4 * t * t * t\n      : 1 + 4 * (t - 1) * (t - 1) * (t - 1)\n  }\n\n  /**\n   * 计算可见范围（支持自适应缓冲区）\n   */\n  private calculateVisibleRange(): { start: number; end: number } {\n    let { buffer, overscan } = this.config\n    const { adaptiveBuffer, minBuffer, maxBuffer, bidirectional } = this.config\n    const scrollTop = this.scrollOffset.value\n    const clientHeight = this.clientSize.value\n\n    // 自适应缓冲区：根据滚动速度调整\n    if (adaptiveBuffer) {\n      const velocity = Math.abs(this.scrollVelocity)\n\n      if (velocity > 2) {\n        // 快速滚动：增加缓冲区\n        buffer = Math.min(maxBuffer, buffer + Math.floor(velocity))\n      } else if (velocity < 0.5) {\n        // 慢速或静止：减少缓冲区\n        buffer = Math.max(minBuffer, buffer - 1)\n      }\n    }\n\n    // 二分查找起始索引\n    let startIndex = this.findNearestIndex(scrollTop)\n    let endIndex = this.findNearestIndex(scrollTop + clientHeight)\n\n    // 添加缓冲区\n    if (bidirectional || this.scrollVelocity < 0) {\n      // 双向或向上滚动：两个方向都加缓冲\n      startIndex = Math.max(0, startIndex - buffer - overscan)\n      endIndex = Math.min(this.items.value.length - 1, endIndex + buffer + overscan)\n    } else {\n      // 向下滚动：在滚动方向增加更多缓冲\n      startIndex = Math.max(0, startIndex - Math.floor(buffer / 2) - overscan)\n      endIndex = Math.min(this.items.value.length - 1, endIndex + buffer * 2 + overscan)\n    }\n\n    return { start: startIndex, end: endIndex }\n  }\n\n  /**\n   * 二分查找最近的索引\n   */\n  private findNearestIndex(offset: number): number {\n    const items = this.items.value\n    let low = 0\n    let high = items.length - 1\n\n    while (low <= high) {\n      const mid = Math.floor((low + high) / 2)\n      const midOffset = this.getItemOffset(mid)\n\n      if (midOffset < offset) {\n        low = mid + 1\n      } else if (midOffset > offset) {\n        high = mid - 1\n      } else {\n        return mid\n      }\n    }\n\n    return low\n  }\n\n  /**\n   * 获取可见项\n   */\n  private getVisibleItems(): VirtualItem<T>[] {\n    const { start, end } = this.visibleRange.value\n    const items: VirtualItem<T>[] = []\n\n    for (let i = start; i <= end; i++) {\n      const item = this.items.value[i]\n      if (!item) continue\n\n      items.push({\n        index: i,\n        data: item,\n        offset: this.getItemOffset(i),\n        size: this.getItemSize(i),\n        visible: true\n      })\n    }\n\n    return items\n  }\n\n  /**\n   * 获取项大小\n   */\n  private getItemSize(index: number): number {\n    // 检查缓存\n    if (this.sizeCache.has(index)) {\n      this.updateCacheAccess(index)\n      return this.sizeCache.get(index)!\n    }\n\n    const { itemHeight, estimateSize } = this.config\n\n    if (typeof itemHeight === 'function') {\n      const item = this.items.value[index]\n      const size = itemHeight(index, item) || estimateSize\n      this.setCacheWithEviction(index, size, 'size')\n      return size\n    }\n\n    return itemHeight\n  }\n\n  /**\n   * 获取项偏移\n   */\n  private getItemOffset(index: number): number {\n    if (index < 0 || index >= this.items.value.length) {\n      return 0\n    }\n\n    // 检查缓存\n    if (this.offsetCache.has(index)) {\n      this.updateCacheAccess(index)\n      return this.offsetCache.get(index)!\n    }\n\n    let offset = 0\n\n    // 计算到最后测量位置的偏移\n    if (this.lastMeasuredIndex >= 0 && index > this.lastMeasuredIndex) {\n      offset = this.offsetCache.get(this.lastMeasuredIndex) || 0\n\n      for (let i = this.lastMeasuredIndex + 1; i <= index; i++) {\n        offset += this.getItemSize(i - 1)\n      }\n    } else {\n      // 从头计算\n      for (let i = 0; i < index; i++) {\n        offset += this.getItemSize(i)\n      }\n    }\n\n    this.setCacheWithEviction(index, offset, 'offset')\n    this.lastMeasuredIndex = Math.max(this.lastMeasuredIndex, index)\n\n    return offset\n  }\n\n  /**\n   * 更新滚动尺寸\n   */\n  private updateScrollSize(): void {\n    const itemCount = this.items.value.length\n    if (itemCount === 0) {\n      this.scrollSize.value = 0\n      return\n    }\n\n    const lastOffset = this.getItemOffset(itemCount - 1)\n    const lastSize = this.getItemSize(itemCount - 1)\n    this.scrollSize.value = lastOffset + lastSize\n  }\n\n  /**\n   * 预测性预加载\n   */\n  private predictivePreload(): void {\n    const { preloadTime } = this.config\n    const predictedOffset = this.scrollOffset.value + this.scrollVelocity * preloadTime\n\n    const predictedStart = this.findNearestIndex(predictedOffset)\n    const predictedEnd = this.findNearestIndex(\n      predictedOffset + this.clientSize.value\n    )\n\n    // 触发预加载\n    this.logger?.debug('Predictive preload', {\n      velocity: this.scrollVelocity,\n      predictedRange: { start: predictedStart, end: predictedEnd }\n    })\n  }\n\n  /**\n   * 获取滚动状态\n   */\n  private getScrollState(): ScrollState {\n    const { start, end } = this.visibleRange.value\n\n    return {\n      offset: this.scrollOffset.value,\n      clientSize: this.clientSize.value,\n      scrollSize: this.scrollSize.value,\n      startIndex: start,\n      endIndex: end,\n      visibleItems: end - start + 1\n    }\n  }\n\n  /**\n   * 重置缓存\n   */\n  private resetCache(): void {\n    this.sizeCache.clear()\n    this.offsetCache.clear()\n    this.cacheAccessOrder.clear()\n    this.lastMeasuredIndex = -1\n  }\n\n  /**\n   * 更新缓存访问顺序 (LRU)\n   */\n  private updateCacheAccess(index: number): void {\n    this.cacheAccessOrder.delete(index)\n    this.cacheAccessOrder.add(index)\n  }\n\n  /**\n   * 设置缓存并进行LRU驱逐\n   */\n  private setCacheWithEviction(index: number, value: number, type: 'size' | 'offset'): void {\n    const cache = type === 'size' ? this.sizeCache : this.offsetCache\n\n    // 如果缓存已满，驱逐最少使用的项\n    if (cache.size >= this.maxCacheSize && !cache.has(index)) {\n      const lruIndex = this.cacheAccessOrder.values().next().value\n      if (lruIndex !== undefined) {\n        this.sizeCache.delete(lruIndex)\n        this.offsetCache.delete(lruIndex)\n        this.cacheAccessOrder.delete(lruIndex)\n      }\n    }\n\n    cache.set(index, value)\n    this.updateCacheAccess(index)\n  }\n\n  /**\n   * 清理远离当前视口的缓存\n   */\n  private cleanupDistantCache(): void {\n    const { start, end } = this.visibleRange.value\n    const keepDistance = 100  // Keep items within 100 indices\n\n    for (const index of this.cacheAccessOrder) {\n      if (index < start - keepDistance || index > end + keepDistance) {\n        this.sizeCache.delete(index)\n        this.offsetCache.delete(index)\n        this.cacheAccessOrder.delete(index)\n      }\n    }\n  }\n\n  /**\n   * 更新项大小\n   */\n  updateItemSize(index: number, size: number): void {\n    const oldSize = this.sizeCache.get(index)\n\n    if (oldSize !== size) {\n      this.sizeCache.set(index, size)\n      this.updateCacheAccess(index)\n\n      // 清除后续偏移缓存\n      for (let i = index + 1; i <= this.lastMeasuredIndex; i++) {\n        this.offsetCache.delete(i)\n        this.cacheAccessOrder.delete(i)\n      }\n\n      this.updateScrollSize()\n    }\n  }\n\n  /**\n   * 销毁\n   */\n  dispose(): void {\n    if (this.scrollTimer) {\n      clearTimeout(this.scrollTimer)\n      this.scrollTimer = null\n    }\n\n    if (this.rafId) {\n      cancelAnimationFrame(this.rafId)\n      this.rafId = null\n    }\n\n    this.resetCache()\n\n    // 重置状态\n    this.items.value = []\n    this.scrollOffset.value = 0\n    this.clientSize.value = 0\n    this.scrollSize.value = 0\n    this.isScrolling.value = false\n    this.scrollVelocity = 0\n    this.lastScrollTime = 0\n  }\n}\n\n/**\n * 组件懒加载器\n */\nexport class ComponentLazyLoader {\n  private loadedComponents = new Set<string>()\n  private loadingComponents = new Map<string, Promise<Component>>()\n  private componentCache = new Map<string, Component>()\n  private observers = new Map<string, IntersectionObserver>()\n  private readonly maxCacheSize = 50  // Limit component cache size\n  private loadTimeouts = new Map<string, NodeJS.Timeout>()\n\n  constructor(\n    private config: LazyComponentConfig = {},\n    private logger?: Logger\n  ) {\n    this.config = {\n      delay: 0,\n      timeout: 10000,\n      retries: 3,\n      preload: false,\n      distance: 50,\n      ...config\n    }\n  }\n\n  /**\n   * 懒加载组件\n   */\n  async loadComponent(\n    loader: () => Promise<Component>,\n    key: string\n  ): Promise<Component> {\n    // 检查缓存\n    if (this.componentCache.has(key)) {\n      return this.componentCache.get(key)!\n    }\n\n    // 检查是否正在加载\n    if (this.loadingComponents.has(key)) {\n      return this.loadingComponents.get(key)!\n    }\n\n    // 开始加载\n    const loadPromise = this.loadWithRetry(loader, key)\n    this.loadingComponents.set(key, loadPromise)\n\n    try {\n      const component = await loadPromise\n\n      // 缓存大小限制\n      if (this.componentCache.size >= this.maxCacheSize) {\n        const firstKey = this.componentCache.keys().next().value\n        if (firstKey) {\n          this.componentCache.delete(firstKey)\n          this.loadedComponents.delete(firstKey)\n        }\n      }\n\n      this.componentCache.set(key, component)\n      this.loadedComponents.add(key)\n      this.loadingComponents.delete(key)\n\n      this.logger?.debug(`Component loaded: ${key}`)\n\n      return component\n    } catch (error) {\n      this.loadingComponents.delete(key)\n      this.logger?.error(`Failed to load component: ${key}`, error)\n      throw error\n    }\n  }\n\n  /**\n   * 带重试的加载\n   */\n  private async loadWithRetry(\n    loader: () => Promise<Component>,\n    key: string,\n    attempt = 1\n  ): Promise<Component> {\n    const { timeout, retries, delay } = this.config\n\n    try {\n      // 延迟加载\n      if (delay && attempt === 1) {\n        await new Promise(resolve => {\n          const timer = setTimeout(resolve, delay)\n          this.loadTimeouts.set(`${key}_delay`, timer)\n        })\n        this.loadTimeouts.delete(`${key}_delay`)\n      }\n\n      // 超时控制\n      const timeoutPromise = new Promise<never>((_, reject) => {\n        const timer = setTimeout(() => reject(new Error('Load timeout')), timeout)\n        this.loadTimeouts.set(`${key}_timeout`, timer)\n      })\n\n      const result = await Promise.race([loader(), timeoutPromise])\n      this.clearTimeout(`${key}_timeout`)\n      return result\n    } catch (error) {\n      this.clearTimeout(`${key}_timeout`)\n      if (attempt < retries!) {\n        this.logger?.debug(`Retrying component load: ${key} (attempt ${attempt + 1})`)\n\n        // 指数退避\n        await new Promise(resolve =>\n          setTimeout(resolve, 2 ** attempt * 1000)\n        )\n\n        return this.loadWithRetry(loader, key, attempt + 1)\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Clear timeout helper\n   */\n  private clearTimeout(key: string): void {\n    const timeout = this.loadTimeouts.get(key)\n    if (timeout) {\n      clearTimeout(timeout)\n      this.loadTimeouts.delete(key)\n    }\n  }\n\n  /**\n   * 观察元素并自动加载\n   */\n  observe(\n    element: Element,\n    loader: () => Promise<Component>,\n    key: string\n  ): void {\n    const { distance, preload } = this.config\n\n    // 清理旧观察器\n    const oldObserver = this.observers.get(key)\n    if (oldObserver) {\n      oldObserver.disconnect()\n    }\n\n    // 创建观察器\n    const observer = new IntersectionObserver(\n      (entries) => {\n        for (const entry of entries) {\n          if (entry.isIntersecting || (preload && entry.boundingClientRect.top < distance!)) {\n            // 开始加载\n            this.loadComponent(loader, key).catch(error => {\n              this.logger?.error(`Failed to lazy load component: ${key}`, error)\n            })\n\n            // 停止观察\n            observer.unobserve(element)\n            observer.disconnect()\n            this.observers.delete(key)\n          }\n        }\n      },\n      {\n        rootMargin: `${distance}px`,\n        threshold: 0\n      }\n    )\n\n    observer.observe(element)\n    this.observers.set(key, observer)\n  }\n\n  /**\n   * 预加载组件\n   */\n  async preload(\n    loaders: Array<{ key: string; loader: () => Promise<Component> }>\n  ): Promise<void> {\n    const promises = loaders.map(({ key, loader }) =>\n      this.loadComponent(loader, key).catch(error => {\n        this.logger?.warn(`Failed to preload component: ${key}`, error)\n      })\n    )\n\n    await Promise.all(promises)\n  }\n\n  /**\n   * 获取加载状态\n   */\n  getLoadStatus(): {\n    loaded: string[]\n    loading: string[]\n    cached: number\n  } {\n    return {\n      loaded: Array.from(this.loadedComponents),\n      loading: Array.from(this.loadingComponents.keys()),\n      cached: this.componentCache.size\n    }\n  }\n\n  /**\n   * 清理缓存\n   */\n  clearCache(keys?: string[]): void {\n    if (keys) {\n      keys.forEach(key => {\n        this.componentCache.delete(key)\n        this.loadedComponents.delete(key)\n        this.loadingComponents.delete(key)\n\n        // Clear observer for specific key\n        const observer = this.observers.get(key)\n        if (observer) {\n          observer.disconnect()\n          this.observers.delete(key)\n        }\n\n        // Clear timeouts for specific key\n        this.clearTimeout(`${key}_timeout`)\n        this.clearTimeout(`${key}_delay`)\n      })\n    } else {\n      this.componentCache.clear()\n      this.loadedComponents.clear()\n      this.loadingComponents.clear()\n\n      // Clear all observers\n      this.observers.forEach(observer => observer.disconnect())\n      this.observers.clear()\n\n      // Clear all timeouts\n      this.loadTimeouts.forEach(timeout => clearTimeout(timeout))\n      this.loadTimeouts.clear()\n    }\n  }\n\n  /**\n   * 销毁\n   */\n  dispose(): void {\n    // Clear all caches and observers\n    this.clearCache()\n\n    // Clear all pending timeouts\n    this.loadTimeouts.forEach(timeout => clearTimeout(timeout))\n    this.loadTimeouts.clear()\n\n    // Clear logger reference\n    this.logger = undefined\n  }\n}\n\n/**\n * 资源预加载器\n */\nexport class ResourcePreloader {\n  private preloadedResources = new Set<string>()\n  private preloadQueue: Array<{\n    url: string\n    type: 'image' | 'script' | 'style' | 'font' | 'data'\n    priority: number\n  }> = []\n\n  private isPreloading = false\n  private concurrentLoads = 3\n\n  constructor(private logger?: Logger) { }\n\n  /**\n   * 预加载资源\n   */\n  async preload(\n    resources: Array<{\n      url: string\n      type: 'image' | 'script' | 'style' | 'font' | 'data'\n      priority?: number\n    }>\n  ): Promise<void> {\n    // 添加到队列\n    resources.forEach(resource => {\n      if (!this.preloadedResources.has(resource.url)) {\n        this.preloadQueue.push({\n          ...resource,\n          priority: resource.priority || 0\n        })\n      }\n    })\n\n    // 按优先级排序\n    this.preloadQueue.sort((a, b) => b.priority - a.priority)\n\n    // 开始预加载\n    if (!this.isPreloading) {\n      await this.processQueue()\n    }\n  }\n\n  /**\n   * 处理预加载队列\n   */\n  private async processQueue(): Promise<void> {\n    this.isPreloading = true\n\n    while (this.preloadQueue.length > 0) {\n      const batch = this.preloadQueue.splice(0, this.concurrentLoads)\n\n      await Promise.all(\n        batch.map(resource => this.loadResource(resource))\n      )\n    }\n\n    this.isPreloading = false\n  }\n\n  /**\n   * 加载单个资源\n   */\n  private async loadResource(resource: {\n    url: string\n    type: 'image' | 'script' | 'style' | 'font' | 'data'\n  }): Promise<void> {\n    const { url, type } = resource\n\n    try {\n      switch (type) {\n        case 'image':\n          await this.preloadImage(url)\n          break\n        case 'script':\n          await this.preloadScript(url)\n          break\n        case 'style':\n          await this.preloadStyle(url)\n          break\n        case 'font':\n          await this.preloadFont(url)\n          break\n        case 'data':\n          await this.preloadData(url)\n          break\n      }\n\n      this.preloadedResources.add(url)\n      this.logger?.debug(`Resource preloaded: ${url}`)\n    } catch (error) {\n      this.logger?.error(`Failed to preload resource: ${url}`, error)\n    }\n  }\n\n  /**\n   * 预加载图片\n   */\n  private preloadImage(url: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const img = new Image()\n      img.onload = () => resolve()\n      img.onerror = reject\n      img.src = url\n    })\n  }\n\n  /**\n   * 预加载脚本\n   */\n  private preloadScript(url: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const link = document.createElement('link')\n      link.rel = 'preload'\n      link.as = 'script'\n      link.href = url\n      link.onload = () => resolve()\n      link.onerror = reject\n      document.head.appendChild(link)\n    })\n  }\n\n  /**\n   * 预加载样式\n   */\n  private preloadStyle(url: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const link = document.createElement('link')\n      link.rel = 'preload'\n      link.as = 'style'\n      link.href = url\n      link.onload = () => resolve()\n      link.onerror = reject\n      document.head.appendChild(link)\n    })\n  }\n\n  /**\n   * 预加载字体\n   */\n  private preloadFont(url: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const link = document.createElement('link')\n      link.rel = 'preload'\n      link.as = 'font'\n      link.href = url\n      link.crossOrigin = 'anonymous'\n      link.onload = () => resolve()\n      link.onerror = reject\n      document.head.appendChild(link)\n    })\n  }\n\n  /**\n   * 预加载数据\n   */\n  private async preloadData(url: string): Promise<void> {\n    const response = await fetch(url, { method: 'HEAD' })\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}`)\n    }\n  }\n\n  /**\n   * 检查资源是否已预加载\n   */\n  isPreloaded(url: string): boolean {\n    return this.preloadedResources.has(url)\n  }\n\n  /**\n   * 获取预加载状态\n   */\n  getStatus(): {\n    preloaded: number\n    queued: number\n    isPreloading: boolean\n  } {\n    return {\n      preloaded: this.preloadedResources.size,\n      queued: this.preloadQueue.length,\n      isPreloading: this.isPreloading\n    }\n  }\n}\n\n/**\n * Vue 组合式 API\n */\nexport function useVirtualScroll<T = any>(\n  items: Ref<T[]>,\n  config?: VirtualScrollConfig\n): {\n  scroller: VirtualScroller<T>\n  visibleItems: ComputedRef<VirtualItem<T>[]>\n  scrollState: ComputedRef<ScrollState>\n  handleScroll: (offset: number) => void\n  scrollToIndex: (index: number, align?: 'start' | 'center' | 'end' | 'auto') => void\n} {\n  const scroller = new VirtualScroller<T>(config)\n\n  // 监听数据变化\n  watchEffect(() => {\n    scroller.setItems(items.value)\n  })\n\n  // 组件卸载时自动清理\n  onUnmounted(() => scroller.dispose())\n\n  return {\n    scroller,\n    visibleItems: scroller.visibleItems,\n    scrollState: scroller.scrollState,\n    handleScroll: (offset) => scroller.handleScroll(offset),\n    scrollToIndex: (index, align) => scroller.scrollToIndex(index, align)\n  }\n}\n\n/**\n * 创建组件懒加载器\n */\nexport function createComponentLazyLoader(\n  config?: LazyComponentConfig,\n  logger?: Logger\n): ComponentLazyLoader {\n  return new ComponentLazyLoader(config, logger)\n}\n\n/**\n * 创建资源预加载器\n */\nexport function createResourcePreloader(logger?: Logger): ResourcePreloader {\n  return new ResourcePreloader(logger)\n}"],"names":[],"mappings":"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"}