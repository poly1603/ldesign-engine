{"version":3,"file":"cache-manager.js","sources":["../../src/cache/cache-manager.ts"],"sourcesContent":["/**\n * 高级缓存管理器\n * 🚀 提供分层缓存、智能预加载、自动更新等特性\n */\n\nimport type { Logger } from '../types/logger'\n\n// ============================================\n// 类型定义\n// ============================================\n\nexport enum CacheStrategy {\n  LRU = 'lru',\n  LFU = 'lfu',\n  FIFO = 'fifo',\n  TTL = 'ttl',\n}\n\nexport interface CacheItem<T = unknown> {\n  key: string\n  value: T\n  timestamp: number\n  ttl?: number\n  accessCount: number\n  lastAccessed: number\n  size?: number\n  metadata?: Record<string, unknown>\n}\n\nexport interface CacheConfig<T = unknown> {\n  // 基础配置\n  maxSize?: number\n  defaultTTL?: number\n  strategy?: CacheStrategy\n  enableStats?: boolean\n\n  // 内存配置\n  maxMemory?: number\n  cleanupInterval?: number\n\n  // 分层缓存配置\n  layers?: {\n    memory?: { enabled: boolean; maxSize: number; ttl: number }\n    localStorage?: { enabled: boolean; prefix: string; maxSize: number }\n    sessionStorage?: { enabled: boolean; prefix: string; maxSize: number }\n    indexedDB?: { enabled: boolean; dbName: string; storeName: string }\n  }\n\n  // 回调\n  onEvict?: (key: string, value: T) => void\n  onError?: (error: Error) => void\n}\n\nexport interface CacheStats {\n  hits: number\n  misses: number\n  sets: number\n  deletes: number\n  evictions: number\n  expirations: number\n  size: number\n  hitRate: number\n  memoryUsage: number\n  averageItemSize: number\n}\n\n// ============================================\n// 缓存管理器实现\n// ============================================\n\nexport class CacheManager<T = unknown> {\n  private cache = new Map<string, CacheItem<T>>()\n  private config: Required<CacheConfig<T>>\n  private stats: CacheStats\n  private cleanupTimer?: NodeJS.Timeout\n  private totalMemory = 0\n  private logger?: Logger\n\n  // 分层缓存存储\n  private layers = new Map<string, StorageLayer<T>>()\n\n  // 预加载和更新\n  private preloadQueue = new Set<string>()\n  private updateTimers = new Map<string, NodeJS.Timeout>()\n\n  // 缓存分片（减少单个Map的大小，提升性能）\n  private shards: Map<string, CacheItem<T>>[] = []\n  private readonly SHARD_COUNT = 16 // 分片数量\n  private useSharding = false // 是否启用分片\n\n  constructor(config: CacheConfig<T> = {}, logger?: Logger) {\n    this.logger = logger\n    this.config = this.normalizeConfig(config)\n    this.stats = this.initStats()\n\n    // 如果缓存大小超过阈值，启用分片\n    if (this.config.maxSize > 100) {\n      this.useSharding = true\n      this.initializeShards()\n    }\n\n    this.initializeLayers()\n    this.startCleanup()\n  }\n\n  /**\n   * 初始化缓存分片\n   */\n  private initializeShards(): void {\n    for (let i = 0; i < this.SHARD_COUNT; i++) {\n      this.shards.push(new Map())\n    }\n    this.logger?.debug(`Cache sharding enabled with ${this.SHARD_COUNT} shards`)\n  }\n\n  /**\n   * 根据key计算分片索引（使用简单哈希）\n   */\n  private getShardIndex(key: string): number {\n    let hash = 0\n    for (let i = 0; i < key.length; i++) {\n      hash = ((hash << 5) - hash) + key.charCodeAt(i)\n      hash = hash & hash // Convert to 32bit integer\n    }\n    return Math.abs(hash) % this.SHARD_COUNT\n  }\n\n  /**\n   * 获取缓存分片\n   */\n  private getShard(key: string): Map<string, CacheItem<T>> {\n    if (!this.useSharding) {\n      return this.cache\n    }\n    return this.shards[this.getShardIndex(key)]\n  }\n\n  /**\n   * 标准化配置\n   */\n  private normalizeConfig(config: CacheConfig<T>): Required<CacheConfig<T>> {\n    return {\n      maxSize: config.maxSize ?? 50, // 进一步减少默认缓存大小到50\n      defaultTTL: config.defaultTTL ?? 3 * 60 * 1000, // 减少默认TTL为3分钟\n      strategy: config.strategy ?? CacheStrategy.LRU,\n      enableStats: config.enableStats ?? false, // 默认关闭统计以节省内存\n      maxMemory: config.maxMemory ?? 5 * 1024 * 1024, // 减少最大内存到5MB\n      cleanupInterval: config.cleanupInterval ?? 20000, // 更频繁的清理（20秒）\n      layers: config.layers ?? {},\n      onEvict: config.onEvict ?? (() => { }),\n      onError: config.onError ?? ((error) => this.logger?.error('Cache error', error))\n    }\n  }\n\n  /**\n   * 初始化统计信息\n   */\n  private initStats(): CacheStats {\n    return {\n      hits: 0,\n      misses: 0,\n      sets: 0,\n      deletes: 0,\n      evictions: 0,\n      expirations: 0,\n      size: 0,\n      hitRate: 0,\n      memoryUsage: 0,\n      averageItemSize: 0\n    }\n  }\n\n  /**\n   * 初始化分层缓存\n   */\n  private initializeLayers(): void {\n    const { layers } = this.config\n\n    if (layers.memory?.enabled) {\n      this.layers.set('memory', new MemoryLayer(layers.memory))\n    }\n\n    if (layers.localStorage?.enabled && typeof window !== 'undefined') {\n      this.layers.set('localStorage', new LocalStorageLayer(layers.localStorage))\n    }\n\n    if (layers.sessionStorage?.enabled && typeof window !== 'undefined') {\n      this.layers.set('sessionStorage', new SessionStorageLayer(layers.sessionStorage))\n    }\n\n    if (layers.indexedDB?.enabled && typeof window !== 'undefined') {\n      this.layers.set('indexedDB', new IndexedDBLayer(layers.indexedDB))\n    }\n  }\n\n  // ============================================\n  // 核心方法\n  // ============================================\n\n  /**\n   * 获取缓存值\n   */\n  async get(key: string): Promise<T | undefined> {\n    // 先从内存缓存查找\n    const memoryItem = this.getFromMemory(key)\n    if (memoryItem !== undefined) {\n      return memoryItem\n    }\n\n    // 从分层缓存查找\n    for (const [, layer] of this.layers) {\n      try {\n        const value = await layer.get(key)\n        if (value !== undefined) {\n          // 回填到内存缓存\n          this.set(key, value)\n\n          if (this.config?.enableStats) {\n            this.stats.hits++\n            this.updateHitRate()\n          }\n\n          return value\n        }\n      } catch (error) {\n        this.config?.onError(error as Error)\n      }\n    }\n\n    // 未命中\n    if (this.config?.enableStats) {\n      this.stats.misses++\n      this.updateHitRate()\n    }\n\n    return undefined\n  }\n\n  /**\n   * 从内存缓存获取（支持分片）\n   */\n  private getFromMemory(key: string): T | undefined {\n    const shard = this.getShard(key)\n    const item = shard.get(key)\n\n    if (!item) {\n      return undefined\n    }\n\n    // 检查TTL\n    if (item.ttl && Date.now() - item.timestamp > item.ttl) {\n      this.delete(key)\n      this.stats.expirations++\n      return undefined\n    }\n\n    // 更新访问信息\n    item.lastAccessed = Date.now()\n    item.accessCount++\n\n    // 根据策略更新顺序\n    this.updateItemOrder(key, item)\n\n    if (this.config?.enableStats) {\n      this.stats.hits++\n      this.updateHitRate()\n    }\n\n    return item.value\n  }\n\n  /**\n   * 设置缓存值\n   */\n  async set(key: string, value: T, ttl?: number, metadata?: Record<string, unknown>): Promise<void> {\n    const effectiveTTL = ttl ?? this.config?.defaultTTL\n    const size = this.estimateSize(value)\n\n    // 检查容量限制\n    await this.ensureCapacity(key, size)\n\n    const item: CacheItem<T> = {\n      key,\n      value,\n      timestamp: Date.now(),\n      ttl: effectiveTTL,\n      accessCount: 0,\n      lastAccessed: Date.now(),\n      size,\n      metadata\n    }\n\n    // 存入内存缓存（使用分片）\n    const shard = this.getShard(key)\n    shard.set(key, item)\n    this.totalMemory += size\n\n    // 存入分层缓存\n    for (const [, layer] of this.layers) {\n      try {\n        await layer.set(key, value, effectiveTTL)\n      } catch (error) {\n        this.config?.onError(error as Error)\n      }\n    }\n\n    if (this.config?.enableStats) {\n      this.stats.sets++\n      this.stats.size = this.cache.size\n      this.updateStats()\n    }\n  }\n\n  /**\n   * 删除缓存（支持分片）\n   */\n  async delete(key: string): Promise<boolean> {\n    const shard = this.getShard(key)\n    const item = shard.get(key)\n\n    if (item) {\n      shard.delete(key)\n      this.totalMemory -= item.size || 0\n\n      // 从所有层删除\n      for (const [, layer] of this.layers) {\n        try {\n          await layer.delete(key)\n        } catch (error) {\n          this.config?.onError(error as Error)\n        }\n      }\n\n      if (this.config?.enableStats) {\n        this.stats.deletes++\n        this.stats.size = this.getTotalSize()\n      }\n\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * 获取总缓存大小（支持分片）\n   */\n  private getTotalSize(): number {\n    if (!this.useSharding) {\n      return this.cache.size\n    }\n    return this.shards.reduce((total, shard) => total + shard.size, 0)\n  }\n\n  /**\n   * 清空缓存（支持分片）\n   */\n  async clear(): Promise<void> {\n    if (this.useSharding) {\n      this.shards.forEach(shard => shard.clear())\n    } else {\n      this.cache.clear()\n    }\n    this.totalMemory = 0\n\n    // 清空所有层\n    for (const [, layer] of this.layers) {\n      try {\n        await layer.clear()\n      } catch (error) {\n        this.config?.onError(error as Error)\n      }\n    }\n\n    this.resetStats()\n  }\n\n  /**\n   * 按命名空间清理缓存键（前缀匹配，支持分片）\n   */\n  async clearNamespace(namespace: string): Promise<void> {\n    const prefix = `${namespace}:`\n    const keysToDelete: string[] = []\n\n    // 遍历所有分片查找匹配的键\n    if (this.useSharding) {\n      for (const shard of this.shards) {\n        for (const key of shard.keys()) {\n          if (key.startsWith(prefix)) {\n            keysToDelete.push(key)\n          }\n        }\n      }\n    } else {\n      for (const key of this.cache.keys()) {\n        if (key.startsWith(prefix)) {\n          keysToDelete.push(key)\n        }\n      }\n    }\n\n    await Promise.all(keysToDelete.map(key => this.delete(key)))\n  }\n\n  // ============================================\n  // 高级功能\n  // ============================================\n\n  /**\n   * 批量预加载\n   */\n  async preload<K extends string>(\n    keys: K[],\n    loader: (key: K) => Promise<T> | T,\n    options?: { ttl?: number; priority?: 'high' | 'normal' | 'low' }\n  ): Promise<void> {\n    const priority = options?.priority ?? 'normal'\n    const ttl = options?.ttl\n\n    // 根据优先级排序\n    const sortedKeys = priority === 'high'\n      ? keys\n      : priority === 'low'\n        ? keys.reverse()\n        : keys\n\n    const promises = sortedKeys.map(async (key) => {\n      try {\n        const value = await loader(key)\n        await this.set(key, value, ttl)\n      } catch (error) {\n        this.logger?.error(`Failed to preload ${key}`, error)\n      }\n    })\n\n    await Promise.allSettled(promises)\n  }\n\n  /**\n   * 缓存预热\n   */\n  async warmup<K extends string>(\n    warmupData: Array<{ key: K; loader: () => Promise<T> | T; ttl?: number }>\n  ): Promise<void> {\n    const promises = warmupData.map(async ({ key, loader, ttl }) => {\n      try {\n        const value = await loader()\n        await this.set(key, value, ttl)\n      } catch (error) {\n        this.logger?.error(`Failed to warmup ${key}`, error)\n      }\n    })\n\n    await Promise.allSettled(promises)\n  }\n\n  /**\n   * 获取命名空间缓存\n   */\n  namespace(name: string): NamespacedCache<T> {\n    return new NamespacedCache(this, name)\n  }\n\n  /**\n   * 获取统计信息\n   */\n  getStats(): CacheStats {\n    return { ...this.stats }\n  }\n\n  /**\n   * 重置统计信息\n   */\n  resetStats(): void {\n    this.stats = this.initStats()\n  }\n\n  /**\n   * 事件监听（兼容方法）\n   * @param event 事件名称\n   * @param callback 回调函数\n   * @returns 取消监听的函数\n   */\n  on(event: string, callback: (...args: unknown[]) => void): () => void {\n    // 简单实现，如果需要更复杂的事件系统可以后续扩展\n    const self = this as unknown as { _eventListeners?: Map<string, Array<(...args: unknown[]) => void>> }\n    const listeners = self._eventListeners || new Map()\n    if (!self._eventListeners) {\n      self._eventListeners = listeners\n    }\n\n    const eventListeners = listeners.get(event) || []\n    eventListeners.push(callback)\n    listeners.set(event, eventListeners)\n\n    // 返回取消监听的函数\n    return () => {\n      const callbacks = listeners.get(event) || []\n      const index = callbacks.indexOf(callback)\n      if (index > -1) {\n        callbacks.splice(index, 1)\n      }\n    }\n  }\n\n  // ============================================\n  // 私有方法\n  // ============================================\n\n  /**\n   * 确保有足够的容量（支持分片）\n   */\n  private async ensureCapacity(key: string, size: number): Promise<void> {\n    const shard = this.getShard(key)\n    const totalSize = this.getTotalSize()\n\n    // 检查最大条目数\n    if (totalSize >= this.config?.maxSize && !shard.has(key)) {\n      await this.evict()\n    }\n\n    // 检查内存限制\n    if (this.config?.maxMemory > 0) {\n      while (this.totalMemory + size > this.config?.maxMemory && totalSize > 0) {\n        await this.evict()\n      }\n    }\n  }\n\n  /**\n   * 淘汰缓存项\n   */\n  private async evict(): Promise<void> {\n    const strategy = this.config?.strategy\n    let keyToEvict: string | undefined\n\n    switch (strategy) {\n      case CacheStrategy.LRU:\n        keyToEvict = this.findLRU()\n        break\n      case CacheStrategy.LFU:\n        keyToEvict = this.findLFU()\n        break\n      case CacheStrategy.FIFO:\n        keyToEvict = this.cache.keys().next().value\n        break\n      case CacheStrategy.TTL:\n        keyToEvict = this.findExpired()\n        break\n    }\n\n    if (keyToEvict) {\n      const item = this.cache.get(keyToEvict)\n      if (item) {\n        this.config?.onEvict(keyToEvict, item.value)\n        await this.delete(keyToEvict)\n        this.stats.evictions++\n      }\n    }\n  }\n\n  /**\n   * 查找最久未使用的项 - 支持分片\n   */\n  private findLRU(): string | undefined {\n    const totalSize = this.getTotalSize()\n    if (totalSize === 0) return undefined\n\n    let lruKey: string | undefined\n    let lruTime = Infinity\n\n    // 优化：限制搜索数量\n    const maxSearch = Math.min(totalSize, 20)\n    let searchCount = 0\n\n    // 遍历所有分片\n    const caches = this.useSharding ? this.shards : [this.cache]\n\n    for (const cache of caches) {\n      for (const [key, item] of cache) {\n        if (item.lastAccessed < lruTime) {\n          lruTime = item.lastAccessed\n          lruKey = key\n        }\n        if (++searchCount >= maxSearch) return lruKey\n      }\n    }\n\n    return lruKey\n  }\n\n  /**\n   * 查找最少使用的项（支持分片）\n   */\n  private findLFU(): string | undefined {\n    let lfuKey: string | undefined\n    let lfuCount = Infinity\n\n    const caches = this.useSharding ? this.shards : [this.cache]\n\n    for (const cache of caches) {\n      for (const [key, item] of cache) {\n        if (item.accessCount < lfuCount) {\n          lfuCount = item.accessCount\n          lfuKey = key\n        }\n      }\n    }\n\n    return lfuKey\n  }\n\n  /**\n   * 查找已过期的项（支持分片）\n   */\n  private findExpired(): string | undefined {\n    const now = Date.now()\n\n    const caches = this.useSharding ? this.shards : [this.cache]\n\n    for (const cache of caches) {\n      for (const [key, item] of cache) {\n        if (item.ttl && now - item.timestamp > item.ttl) {\n          return key\n        }\n      }\n    }\n\n    return undefined\n  }\n\n  /**\n   * 更新项顺序（支持分片）\n   */\n  private updateItemOrder(key: string, item: CacheItem<T>): void {\n    if (this.config?.strategy === CacheStrategy.LRU) {\n      // 移到最后（最近使用）\n      const shard = this.getShard(key)\n      shard.delete(key)\n      shard.set(key, item)\n    }\n  }\n\n  /**\n   * 估算对象大小 - 极致优化版\n   * 使用更精确的采样策略和缓存机制\n   */\n  private estimateSize(obj: unknown, depth = 0, visited?: WeakSet<object>): number {\n    // 快速路径：基本类型\n    if (obj === null || obj === undefined) return 0\n\n    const type = typeof obj\n    if (type === 'string') {\n      // 更精确的字符串大小估算（UTF-16编码）\n      return Math.min((obj as string).length * 2 + 24, 10000)\n    }\n    if (type === 'number') return 8\n    if (type === 'boolean') return 4\n    if (type === 'bigint') return 16\n    if (type === 'symbol') return 32\n    if (type === 'function') return 64\n    if (type !== 'object') return 32\n\n    // 限制递归深度\n    if (depth > 5) return 100\n\n    // 只在必要时创建 visited 集合\n    if (!visited) {\n      visited = new WeakSet()\n    }\n\n    // 避免循环引用\n    if (visited.has(obj as object)) return 0\n    visited.add(obj as object)\n\n    // 特殊对象类型\n    if (obj instanceof Date) return 24\n    if (obj instanceof RegExp) return 48\n    if (obj instanceof Map) return 24 + (obj as Map<unknown, unknown>).size * 48\n    if (obj instanceof Set) return 24 + (obj as Set<unknown>).size * 32\n\n    // 数组优化：智能采样\n    if (Array.isArray(obj)) {\n      const len = obj.length\n      if (len === 0) return 24\n\n      // 自适应采样：小数组全扫描，大数组采样\n      if (len <= 10) {\n        let total = 24\n        for (let i = 0; i < len; i++) {\n          total += this.estimateSize(obj[i], depth + 1, visited)\n        }\n        return total\n      } else {\n        // 采样前5个、中间3个、最后2个\n        const samples: number[] = []\n        for (let i = 0; i < 5 && i < len; i++) {\n          samples.push(this.estimateSize(obj[i], depth + 1, visited))\n        }\n        const mid = Math.floor(len / 2)\n        for (let i = mid - 1; i <= mid + 1 && i < len; i++) {\n          if (i >= 0) samples.push(this.estimateSize(obj[i], depth + 1, visited))\n        }\n        for (let i = len - 2; i < len; i++) {\n          if (i >= 0) samples.push(this.estimateSize(obj[i], depth + 1, visited))\n        }\n\n        const avgSize = samples.reduce((a, b) => a + b, 0) / samples.length\n        return 24 + avgSize * len\n      }\n    }\n\n    // 对象优化：智能估算\n    try {\n      const keys = Object.keys(obj)\n      const keyCount = keys.length\n      if (keyCount === 0) return 32\n\n      let size = 32 // 对象基础开销\n\n      // 小对象全扫描\n      if (keyCount <= 10) {\n        for (const key of keys) {\n          size += key.length * 2 + 16 // 键的开销\n          size += this.estimateSize((obj as any)[key], depth + 1, visited)\n        }\n      } else {\n        // 大对象采样估算（前7个、中间3个、最后3个）\n        const sampleKeys: string[] = []\n        for (let i = 0; i < 7 && i < keyCount; i++) {\n          sampleKeys.push(keys[i])\n        }\n        const mid = Math.floor(keyCount / 2)\n        for (let i = mid - 1; i <= mid + 1 && i < keyCount; i++) {\n          if (i >= 0) sampleKeys.push(keys[i])\n        }\n        for (let i = keyCount - 3; i < keyCount; i++) {\n          if (i >= 0) sampleKeys.push(keys[i])\n        }\n\n        let sampleSize = 0\n        for (const key of sampleKeys) {\n          sampleSize += key.length * 2 + 16\n          sampleSize += this.estimateSize((obj as any)[key], depth + 1, visited)\n        }\n\n        const avgKeySize = sampleSize / sampleKeys.length\n        size += avgKeySize * keyCount\n      }\n\n      return Math.min(size, 100000) // 限制最大估算大小\n    } catch {\n      return 512 // 默认512B\n    }\n  }\n\n  /**\n   * 更新统计信息\n   */\n  private updateStats(): void {\n    this.stats.memoryUsage = this.totalMemory\n    this.stats.averageItemSize = this.cache.size > 0\n      ? this.totalMemory / this.cache.size\n      : 0\n  }\n\n  /**\n   * 更新命中率\n   */\n  private updateHitRate(): void {\n    const total = this.stats.hits + this.stats.misses\n    this.stats.hitRate = total > 0 ? (this.stats.hits / total) * 100 : 0\n  }\n\n  /**\n   * 启动定期清理\n   */\n  private startCleanup(): void {\n    if (this.config?.cleanupInterval > 0) {\n      this.cleanupTimer = setInterval(() => {\n        this.cleanup()\n      }, this.config?.cleanupInterval)\n    }\n  }\n\n  /**\n   * 清理过期项 - 优化版（支持分片）\n   */\n  private cleanup(): void {\n    const now = Date.now()\n    let expiredCount = 0\n    const totalSize = this.getTotalSize()\n    const maxCleanup = Math.min(30, Math.ceil(totalSize * 0.2))\n\n    const caches = this.useSharding ? this.shards : [this.cache]\n\n    // 收集并删除过期项（单次遍历）\n    outerLoop: for (const cache of caches) {\n      for (const [key, item] of cache) {\n        if (item.ttl && now - item.timestamp > item.ttl) {\n          cache.delete(key)\n          this.totalMemory = Math.max(0, this.totalMemory - (item.size || 0))\n          expiredCount++\n\n          if (expiredCount >= maxCleanup) break outerLoop\n        }\n      }\n    }\n\n    if (this.config?.enableStats && expiredCount > 0) {\n      this.stats.expirations += expiredCount\n    }\n\n    // 检查内存压力并主动清理\n    if (this.config?.maxMemory > 0 && this.totalMemory > this.config.maxMemory * 0.75) {\n      const currentSize = this.getTotalSize()\n      const targetSize = Math.floor(currentSize * 0.6) // 清理到60%\n      const toRemove = currentSize - targetSize\n\n      if (toRemove > 0) {\n        // 优化：并行处理多个分片\n        for (let i = 0; i < toRemove && this.getTotalSize() > targetSize; i++) {\n          let minAccess = Infinity\n          let minKey = ''\n          let minShard: Map<string, CacheItem<T>> | undefined\n\n          // 找到最少访问的项（跨分片采样前20个）\n          let checked = 0\n          outerSearch: for (const cache of caches) {\n            for (const [key, item] of cache) {\n              if (item.lastAccessed < minAccess) {\n                minAccess = item.lastAccessed\n                minKey = key\n                minShard = cache\n              }\n              if (++checked >= 20) break outerSearch\n            }\n          }\n\n          if (minKey && minShard) {\n            const item = minShard.get(minKey)\n            if (item) {\n              minShard.delete(minKey)\n              this.totalMemory = Math.max(0, this.totalMemory - (item.size || 0))\n            }\n          }\n        }\n      }\n    }\n\n    // 更新统计\n    if (this.config?.enableStats) {\n      this.stats.size = this.getTotalSize()\n      this.updateStats()\n    }\n  }\n\n  /**\n   * 销毁缓存管理器\n   */\n  destroy(): void {\n    // 清理定时器\n    if (this.cleanupTimer) {\n      clearInterval(this.cleanupTimer)\n      this.cleanupTimer = undefined\n    }\n\n    // 清理更新定时器\n    for (const timer of this.updateTimers.values()) {\n      clearTimeout(timer)\n    }\n    this.updateTimers.clear()\n\n    // 清理所有层\n    for (const layer of this.layers.values()) {\n      layer.clear().catch(() => { })\n    }\n    this.layers.clear()\n\n    // 清理事件监听器\n    const self = this as unknown as { _eventListeners?: Map<string, Array<(...args: unknown[]) => void>> }\n    if (self._eventListeners) {\n      self._eventListeners.clear()\n      delete self._eventListeners\n    }\n\n    // 清理缓存（包括分片）\n    if (this.useSharding) {\n      this.shards.forEach(shard => shard.clear())\n      this.shards = []\n    } else {\n      this.cache.clear()\n    }\n    this.preloadQueue.clear()\n\n    // 重置内存计数\n    this.totalMemory = 0\n\n    // 重置统计\n    this.stats = {\n      hits: 0,\n      misses: 0,\n      sets: 0,\n      deletes: 0,\n      evictions: 0,\n      expirations: 0,\n      size: 0,\n      memoryUsage: 0,\n      hitRate: 0,\n      averageItemSize: 0\n    }\n  }\n}\n\n// ============================================\n// 存储层抽象类\n// ============================================\n\nabstract class StorageLayer<T> {\n  constructor(protected config: Record<string, unknown>) { }\n\n  abstract get(key: string): Promise<T | undefined>\n  abstract set(key: string, value: T, ttl?: number): Promise<void>\n  abstract delete(key: string): Promise<boolean>\n  abstract clear(): Promise<void>\n}\n\n// ============================================\n// 内存存储层\n// ============================================\n\nclass MemoryLayer<T> extends StorageLayer<T> {\n  private storage = new Map<string, { value: T; expires: number }>()\n  private maxSize = 200 // 进一步限制内存层大小\n  private cleanupInterval?: NodeJS.Timeout\n\n  constructor(config: Record<string, unknown>) {\n    super(config)\n    // 定期清理过期项\n    this.cleanupInterval = setInterval(() => this.cleanupExpired(), 30000)\n  }\n\n  private cleanupExpired(): void {\n    const now = Date.now()\n    for (const [key, item] of this.storage) {\n      if (item.expires > 0 && now > item.expires) {\n        this.storage.delete(key)\n      }\n    }\n  }\n\n  async get(key: string): Promise<T | undefined> {\n    const item = this.storage.get(key)\n    if (!item) return undefined\n\n    if (item.expires > 0 && Date.now() > item.expires) {\n      this.storage.delete(key)\n      return undefined\n    }\n\n    return item.value\n  }\n\n  async set(key: string, value: T, ttl?: number): Promise<void> {\n    // 强制大小限制\n    if (this.storage.size >= this.maxSize && !this.storage.has(key)) {\n      // 删除最旧的条目(FIFO)\n      const firstKey = this.storage.keys().next().value\n      if (firstKey) {\n        this.storage.delete(firstKey)\n      }\n    }\n\n    const expires = ttl ? Date.now() + ttl : 0\n    this.storage.set(key, { value, expires })\n  }\n\n  async delete(key: string): Promise<boolean> {\n    return this.storage.delete(key)\n  }\n\n  async clear(): Promise<void> {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval)\n      this.cleanupInterval = undefined\n    }\n    this.storage.clear()\n  }\n}\n\n// ============================================\n// LocalStorage 存储层\n// ============================================\n\nclass LocalStorageLayer<T> extends StorageLayer<T> {\n  private prefix: string\n\n  constructor(config: Record<string, unknown>) {\n    super(config)\n    this.prefix = (config.prefix as string) || 'cache:'\n  }\n\n  async get(key: string): Promise<T | undefined> {\n    try {\n      const data = localStorage.getItem(this.prefix + key)\n      if (!data) return undefined\n\n      const item = JSON.parse(data)\n      if (item.expires > 0 && Date.now() > item.expires) {\n        localStorage.removeItem(this.prefix + key)\n        return undefined\n      }\n\n      return item.value\n    } catch {\n      return undefined\n    }\n  }\n\n  async set(key: string, value: T, ttl?: number): Promise<void> {\n    try {\n      const expires = ttl ? Date.now() + ttl : 0\n      const data = JSON.stringify({ value, expires })\n      localStorage.setItem(this.prefix + key, data)\n    } catch {\n      // 存储空间不足或其他错误\n    }\n  }\n\n  async delete(key: string): Promise<boolean> {\n    try {\n      localStorage.removeItem(this.prefix + key)\n      return true\n    } catch {\n      return false\n    }\n  }\n\n  async clear(): Promise<void> {\n    const keys = Object.keys(localStorage)\n    keys.forEach(key => {\n      if (key.startsWith(this.prefix)) {\n        localStorage.removeItem(key)\n      }\n    })\n  }\n}\n\n// ============================================\n// SessionStorage 存储层\n// ============================================\n\nclass SessionStorageLayer<T> extends StorageLayer<T> {\n  private prefix: string\n\n  constructor(config: Record<string, unknown>) {\n    super(config)\n    this.prefix = (config.prefix as string) || 'cache:'\n  }\n\n  async get(key: string): Promise<T | undefined> {\n    try {\n      const data = sessionStorage.getItem(this.prefix + key)\n      if (!data) return undefined\n\n      const item = JSON.parse(data)\n      if (item.expires > 0 && Date.now() > item.expires) {\n        sessionStorage.removeItem(this.prefix + key)\n        return undefined\n      }\n\n      return item.value\n    } catch {\n      return undefined\n    }\n  }\n\n  async set(key: string, value: T, ttl?: number): Promise<void> {\n    try {\n      const expires = ttl ? Date.now() + ttl : 0\n      const data = JSON.stringify({ value, expires })\n      sessionStorage.setItem(this.prefix + key, data)\n    } catch {\n      // 存储空间不足或其他错误\n    }\n  }\n\n  async delete(key: string): Promise<boolean> {\n    try {\n      sessionStorage.removeItem(this.prefix + key)\n      return true\n    } catch {\n      return false\n    }\n  }\n\n  async clear(): Promise<void> {\n    const keys = Object.keys(sessionStorage)\n    keys.forEach(key => {\n      if (key.startsWith(this.prefix)) {\n        sessionStorage.removeItem(key)\n      }\n    })\n  }\n}\n\n// ============================================\n// IndexedDB 存储层\n// ============================================\n\nclass IndexedDBLayer<T> extends StorageLayer<T> {\n  private db?: IDBDatabase\n  private dbName: string\n  private storeName: string\n\n  constructor(config: Record<string, unknown>) {\n    super(config)\n    this.dbName = (config.dbName as string) || 'CacheDB'\n    this.storeName = (config.storeName as string) || 'cache'\n    this.initDB()\n  }\n\n  private async initDB(): Promise<void> {\n    const request = indexedDB.open(this.dbName, 1)\n\n    request.onupgradeneeded = (event) => {\n      const db = (event.target as IDBOpenDBRequest).result\n      if (!db.objectStoreNames.contains(this.storeName)) {\n        db.createObjectStore(this.storeName, { keyPath: 'key' })\n      }\n    }\n\n    this.db = await new Promise((resolve, reject) => {\n      request.onsuccess = () => resolve(request.result)\n      request.onerror = () => reject(request.error)\n    })\n  }\n\n  async get(key: string): Promise<T | undefined> {\n    if (!this.db) await this.initDB()\n    if (!this.db) return undefined\n\n    const db = this.db\n    return new Promise((resolve) => {\n      const transaction = db.transaction([this.storeName], 'readonly')\n      const store = transaction.objectStore(this.storeName)\n      const request = store.get(key)\n\n      request.onsuccess = () => {\n        const result = request.result\n        if (!result) {\n          resolve(undefined)\n        } else if (result.expires > 0 && Date.now() > result.expires) {\n          this.delete(key)\n          resolve(undefined)\n        } else {\n          resolve(result.value)\n        }\n      }\n\n      request.onerror = () => resolve(undefined)\n    })\n  }\n\n  async set(key: string, value: T, ttl?: number): Promise<void> {\n    if (!this.db) await this.initDB()\n    if (!this.db) return\n\n    const db = this.db\n    return new Promise((resolve) => {\n      const transaction = db.transaction([this.storeName], 'readwrite')\n      const store = transaction.objectStore(this.storeName)\n      const expires = ttl ? Date.now() + ttl : 0\n\n      store.put({ key, value, expires })\n\n      transaction.oncomplete = () => resolve()\n      transaction.onerror = () => resolve()\n    })\n  }\n\n  async delete(key: string): Promise<boolean> {\n    if (!this.db) await this.initDB()\n    if (!this.db) return false\n\n    const db = this.db\n    return new Promise((resolve) => {\n      const transaction = db.transaction([this.storeName], 'readwrite')\n      const store = transaction.objectStore(this.storeName)\n      store.delete(key)\n\n      transaction.oncomplete = () => resolve(true)\n      transaction.onerror = () => resolve(false)\n    })\n  }\n\n  async clear(): Promise<void> {\n    if (!this.db) await this.initDB()\n    if (!this.db) return\n\n    const db = this.db\n    return new Promise((resolve) => {\n      const transaction = db.transaction([this.storeName], 'readwrite')\n      const store = transaction.objectStore(this.storeName)\n      store.clear()\n\n      transaction.oncomplete = () => resolve()\n      transaction.onerror = () => resolve()\n    })\n  }\n}\n\n// ============================================\n// 命名空间缓存\n// ============================================\n\nclass NamespacedCache<T> {\n  constructor(\n    private parent: CacheManager<T>,\n    private namespace: string\n  ) { }\n\n  private prefixKey(key: string): string {\n    return `${this.namespace}:${key}`\n  }\n\n  async get(key: string): Promise<T | undefined> {\n    return this.parent.get(this.prefixKey(key))\n  }\n\n  async set(key: string, value: T, ttl?: number): Promise<void> {\n    return this.parent.set(this.prefixKey(key), value, ttl)\n  }\n\n  async delete(key: string): Promise<boolean> {\n    return this.parent.delete(this.prefixKey(key))\n  }\n\n  async clear(): Promise<void> {\n    // 按前缀清理命名空间下的所有键\n    await this.parent.clearNamespace(this.namespace)\n  }\n}\n\n// ============================================\n// 导出\n// ============================================\n\nexport function createCacheManager<T = unknown>(\n  config?: CacheConfig<T>,\n  logger?: Logger\n): CacheManager<T> {\n  return new CacheManager(config, logger)\n}\n"],"names":["CacheStrategy"],"mappings":"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"}