{"version":3,"file":"error-manager.js","sources":["../../src/errors/error-manager.ts"],"sourcesContent":["import type { Component } from 'vue'\nimport type { ErrorHandler, ErrorInfo, ErrorManager, Logger } from '../types'\nimport type { Engine } from '../types/engine'\n\n// ==================== 接口定义 ====================\n\n// 错误恢复策略接口\nexport interface RecoveryStrategy {\n  name?: string\n  canRecover: (error: ErrorInfo | Error) => boolean\n  recover: (error: ErrorInfo | Error, context?: ErrorContext) => Promise<boolean>\n  priority: number\n  maxAttempts?: number\n}\n\n// 错误上下文\nexport interface ErrorContext {\n  component?: string | Component | unknown\n  module?: string\n  action?: string\n  user?: string\n  timestamp?: number\n  environment?: Record<string, unknown>\n  stack?: string\n  data?: unknown\n  info?: string\n}\n\n// 错误报告\nexport interface ErrorReport {\n  id: string\n  error: Error | ErrorInfo\n  context: ErrorContext\n  handled: boolean\n  recovered: boolean\n  attempts: number\n  timestamp: number\n  fingerprint: string\n}\n\n// 错误统计\nexport interface ErrorStatistics {\n  total: number\n  handled: number\n  recovered: number\n  byType: Map<string, number>\n  byModule: Map<string, number>\n  byCategory: Map<string, number>\n  timeline: Array<{ time: number; count: number }>\n  recent24h: number\n  recentHour: number\n}\n\n// 错误过滤器\nexport type ErrorFilter = (error: Error | ErrorInfo) => boolean\n\n// 错误分类枚举\nexport enum ErrorCategory {\n  NETWORK = 'network',\n  COMPONENT = 'component',\n  PLUGIN = 'plugin',\n  STATE = 'state',\n  SECURITY = 'security',\n  PERFORMANCE = 'performance',\n  UNKNOWN = 'unknown',\n}\n\nexport class ErrorManagerImpl implements ErrorManager {\n  // 基础属性\n  private errorHandlers = new Set<ErrorHandler>()\n  private errors: ErrorInfo[] = []\n  private errorReports = new Map<string, ErrorReport>()\n  private maxErrors = 100\n  private maxReports = 50\n  private maxErrorCounts = 200\n  private maxErrorTypes = 100\n\n  // 统计和分析\n  private errorCounts = new Map<string, number>()\n  private statistics: ErrorStatistics\n\n  // 恢复和过滤\n  private recoveryStrategies = new Map<string, RecoveryStrategy>()\n  private filters = new Set<ErrorFilter>()\n\n  // 错误爆发检测\n  private lastErrorTime = 0\n  private errorBurst = 0\n\n  // 上报和批处理\n  private reportingEndpoint?: string\n  private errorQueue: ErrorReport[] = []\n  private isReporting = false\n  private batchReportInterval = 5000\n\n  // 内存管理\n  private cleanupTimer: NodeJS.Timeout | null = null\n  private globalErrorHandler: ((event: ErrorEvent) => void) | null = null\n  private unhandledRejectionHandler: ((event: PromiseRejectionEvent) => void) | null = null\n\n  private engine?: Engine\n  private logger?: Logger\n\n  constructor(engineOrLogger?: Engine | Logger) {\n    // 兼容两种构造方式\n    if (engineOrLogger && 'logger' in engineOrLogger) {\n      this.engine = engineOrLogger as Engine\n      this.logger = this.engine.logger\n    } else {\n      this.logger = engineOrLogger as Logger\n    }\n\n    this.statistics = this.initStatistics()\n    this.setupDefaultRecoveryStrategies()\n    this.setupGlobalHandlers()\n    this.startCleanupTimer()\n  }\n\n  onError(handler: ErrorHandler): void {\n    this.errorHandlers.add(handler)\n  }\n\n  offError(handler: ErrorHandler): void {\n    this.errorHandlers.delete(handler)\n  }\n\n  captureError(error: Error, component?: unknown, info?: string): void {\n    const errorInfo: ErrorInfo = {\n      message: error.message,\n      stack: error.stack,\n      component,\n      info,\n      timestamp: Date.now(),\n      level: 'error',\n    }\n\n    // 检测错误爆发\n    this.detectErrorBurst()\n\n    // 分类错误\n    const category = this.categorizeError(errorInfo)\n\n    // 统计错误\n    this.updateErrorStats(errorInfo, category)\n\n    // 添加到错误列表\n    this.addError(errorInfo)\n\n    // 尝试自动恢复\n    this.attemptRecovery(errorInfo)\n\n    // 通知所有错误处理器\n    this.notifyHandlers(errorInfo)\n  }\n\n  private addError(errorInfo: ErrorInfo): void {\n    this.errors.unshift(errorInfo)\n\n    // 限制错误数量\n    if (this.errors.length > this.maxErrors) {\n      this.errors = this.errors.slice(0, this.maxErrors)\n    }\n\n    // 创建错误报告并限制数量\n    const fingerprint = this.generateErrorFingerprint(errorInfo)\n    if (!this.errorReports.has(fingerprint)) {\n      const report: ErrorReport = {\n        id: `error_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        error: errorInfo,\n        context: { timestamp: errorInfo.timestamp },\n        handled: true,\n        recovered: false,\n        attempts: 0,\n        timestamp: Date.now(),\n        fingerprint\n      }\n      this.errorReports.set(fingerprint, report)\n\n      // 限制报告数量\n      if (this.errorReports.size > this.maxReports) {\n        const firstKey = this.errorReports.keys().next().value\n        if (firstKey) {\n          this.errorReports.delete(firstKey)\n        }\n      }\n    }\n  }\n\n  private notifyHandlers(errorInfo: ErrorInfo): void {\n    for (const handler of this.errorHandlers) {\n      try {\n        handler(errorInfo)\n      } catch (handlerError) {\n        this.logger?.error('Error in error handler:', handlerError)\n      }\n    }\n  }\n\n  getErrors(): ErrorInfo[] {\n    return [...this.errors]\n  }\n\n  hasErrors(): boolean {\n    return this.errors.length > 0\n  }\n\n  clearErrors(): void {\n    this.errors = []\n    this.errorCounts.clear()\n    this.errorReports.clear()\n    this.errorBurst = 0\n    this.statistics = this.initStatistics()\n  }\n\n  // 处理错误（兼容方法）\n  handle(error: Error, context?: string): void {\n    this.captureError(error, undefined, context)\n  }\n\n  // 设置最大错误数量\n  setMaxErrors(max: number): void {\n    this.maxErrors = max\n    if (this.errors.length > max) {\n      this.errors = this.errors.slice(0, max)\n    }\n  }\n\n  // 获取最大错误数量\n  getMaxErrors(): number {\n    return this.maxErrors\n  }\n\n  // 按级别获取错误\n  getErrorsByLevel(level: ErrorInfo['level']): ErrorInfo[] {\n    return this.errors.filter(error => error.level === level)\n  }\n\n  // 按时间范围获取错误\n  getErrorsByTimeRange(startTime: number, endTime: number): ErrorInfo[] {\n    return this.errors.filter(\n      error => error.timestamp >= startTime && error.timestamp <= endTime\n    )\n  }\n\n  // 获取最近的错误\n  getRecentErrors(count: number): ErrorInfo[] {\n    return this.errors.slice(0, count)\n  }\n\n  // 搜索错误\n  searchErrors(query: string): ErrorInfo[] {\n    const lowerQuery = query.toLowerCase()\n    return this.errors.filter(\n      error =>\n        error.message.toLowerCase().includes(lowerQuery) ||\n        (error.stack && error.stack.toLowerCase().includes(lowerQuery)) ||\n        (error.info && error.info.toLowerCase().includes(lowerQuery))\n    )\n  }\n\n  // 获取错误统计\n  getErrorStats(): {\n    total: number\n    byLevel: Record<string, number>\n    recent24h: number\n    recentHour: number\n  } {\n    const now = Date.now()\n    const hour = 60 * 60 * 1000\n    const day = 24 * hour\n\n    const byLevel: Record<string, number> = {\n      error: 0,\n      warn: 0,\n      info: 0,\n    }\n\n    let recent24h = 0\n    let recentHour = 0\n\n    for (const error of this.errors) {\n      byLevel[error.level]++\n\n      if (now - error.timestamp <= day) {\n        recent24h++\n      }\n\n      if (now - error.timestamp <= hour) {\n        recentHour++\n      }\n    }\n\n    return {\n      total: this.errors.length,\n      byLevel,\n      recent24h,\n      recentHour,\n    }\n  }\n\n  // 导出错误日志\n  exportErrors(format: 'json' | 'csv' = 'json'): string {\n    if (format === 'json') {\n      return JSON.stringify(this.errors, null, 2)\n    } else {\n      const headers = ['timestamp', 'level', 'message', 'stack', 'info']\n      const rows = this.errors.map(error => [\n        new Date(error.timestamp).toISOString(),\n        error.level,\n        `\"${error.message.replace(/\"/g, '\"\"')}\"`,\n        `\"${(error.stack || '').replace(/\"/g, '\"\"')}\"`,\n        `\"${(error.info || '').replace(/\"/g, '\"\"')}\"`,\n      ])\n\n      return [headers.join(','), ...rows.map(row => row.join(','))].join('\\n')\n    }\n  }\n\n  // 创建错误报告\n  createErrorReport(): {\n    summary: ReturnType<ErrorManagerImpl['getErrorStats']>\n    recentErrors: ErrorInfo[]\n    topErrors: Array<{ message: string; count: number }>\n  } {\n    const summary = this.getErrorStats()\n    const recentErrors = this.getRecentErrors(10)\n\n    // 统计最常见的错误\n    const errorCounts = new Map<string, number>()\n    for (const error of this.errors) {\n      const count = errorCounts.get(error.message) || 0\n      errorCounts.set(error.message, count + 1)\n    }\n\n    const topErrors = Array.from(errorCounts.entries())\n      .sort((a, b) => b[1] - a[1])\n      .slice(0, 5)\n      .map(([message, count]) => ({ message, count }))\n\n    return {\n      summary,\n      recentErrors,\n      topErrors,\n    }\n  }\n\n  // 初始化统计信息\n  private initStatistics(): ErrorStatistics {\n    return {\n      total: 0,\n      handled: 0,\n      recovered: 0,\n      byType: new Map(),\n      byModule: new Map(),\n      byCategory: new Map(),\n      timeline: [],\n      recent24h: 0,\n      recentHour: 0\n    }\n  }\n\n  // 设置全局错误处理器\n  private setupGlobalHandlers(): void {\n    if (typeof window !== 'undefined') {\n      this.globalErrorHandler = (event) => {\n        this.captureError(\n          new Error(event.message),\n          undefined,\n          `${event.filename}:${event.lineno}:${event.colno}`\n        )\n      }\n\n      this.unhandledRejectionHandler = (event) => {\n        this.captureError(\n          new Error(event.reason),\n          undefined,\n          'Unhandled Promise Rejection'\n        )\n      }\n\n      window.addEventListener('error', this.globalErrorHandler)\n      window.addEventListener('unhandledrejection', this.unhandledRejectionHandler)\n    }\n  }\n\n  // 设置默认恢复策略\n  private setupDefaultRecoveryStrategies(): void {\n    // 网络错误恢复策略\n    this.recoveryStrategies.set('network', {\n      canRecover: error =>\n        error.message.includes('network') || error.message.includes('fetch'),\n      recover: async error => {\n        this.logger?.info('Attempting network error recovery', error)\n        // 简单的重试逻辑\n        return new Promise(resolve => setTimeout(() => resolve(true), 1000))\n      },\n      priority: 1,\n    })\n\n    // 组件错误恢复策略\n    this.recoveryStrategies.set('component', {\n      canRecover: error => !!(error as ErrorInfo).component,\n      recover: async error => {\n        this.logger?.info('Attempting component error recovery', error)\n        // 组件重新渲染逻辑\n        return true\n      },\n      priority: 2,\n    })\n  }\n\n  // 检测错误爆发\n  private detectErrorBurst(): void {\n    const now = Date.now()\n    const timeDiff = now - this.lastErrorTime\n\n    if (timeDiff < 1000) {\n      // 1秒内\n      this.errorBurst++\n      if (this.errorBurst > 10) {\n        this.logger?.warn('Error burst detected', { count: this.errorBurst })\n      }\n    } else {\n      this.errorBurst = 1\n    }\n\n    this.lastErrorTime = now\n  }\n\n  // 分类错误\n  private categorizeError(error: ErrorInfo): ErrorCategory {\n    const message = error.message.toLowerCase()\n\n    if (\n      message.includes('network') ||\n      message.includes('fetch') ||\n      message.includes('xhr')\n    ) {\n      return ErrorCategory.NETWORK\n    }\n\n    if (error.component) {\n      return ErrorCategory.COMPONENT\n    }\n\n    if (message.includes('plugin')) {\n      return ErrorCategory.PLUGIN\n    }\n\n    if (message.includes('state') || message.includes('store')) {\n      return ErrorCategory.STATE\n    }\n\n    if (\n      message.includes('security') ||\n      message.includes('xss') ||\n      message.includes('csrf')\n    ) {\n      return ErrorCategory.SECURITY\n    }\n\n    if (\n      message.includes('performance') ||\n      message.includes('memory') ||\n      message.includes('timeout')\n    ) {\n      return ErrorCategory.PERFORMANCE\n    }\n\n    return ErrorCategory.UNKNOWN\n  }\n\n  // 更新错误统计\n  private updateErrorStats(error: ErrorInfo, category: ErrorCategory): void {\n    const key = `${category}:${error.message}`\n    const count = this.errorCounts.get(key) || 0\n    this.errorCounts.set(key, count + 1)\n\n    // 限制错误类型数量\n    if (this.errorCounts.size > this.maxErrorCounts) {\n      // 删除最旧的条目\n      const firstKey = this.errorCounts.keys().next().value\n      if (firstKey) {\n        this.errorCounts.delete(firstKey)\n      }\n    }\n\n    // 如果同一错误频繁出现，记录警告\n    if (count > 5) {\n      this.logger?.warn('Frequent error detected', {\n        category,\n        message: error.message,\n        count: count + 1,\n      })\n    }\n\n    // 更新统计信息\n    this.statistics.total++\n    const typeCount = this.statistics.byCategory.get(category) || 0\n    this.statistics.byCategory.set(category, typeCount + 1)\n\n    // 限制统计时间线数据\n    const now = Date.now()\n    this.statistics.timeline.push({ time: now, count: 1 })\n    if (this.statistics.timeline.length > 200) {\n      this.statistics.timeline = this.statistics.timeline.slice(-200)\n    }\n  }\n\n  // 尝试自动恢复\n  private async attemptRecovery(error: ErrorInfo): Promise<boolean> {\n    const strategies = Array.from(this.recoveryStrategies.values())\n      .filter(strategy => strategy.canRecover(error))\n      .sort((a, b) => a.priority - b.priority)\n\n    for (const strategy of strategies) {\n      try {\n        const recovered = await strategy.recover(error)\n        if (recovered) {\n          this.logger?.info('Error recovery successful', error)\n          return true\n        }\n      } catch (recoveryError) {\n        this.logger?.error('Error recovery failed', recoveryError)\n      }\n    }\n\n    return false\n  }\n\n  // 获取错误分类统计\n  getCategoryStats(): Record<ErrorCategory, number> {\n    const stats = {} as Record<ErrorCategory, number>\n\n    for (const category of Object.values(ErrorCategory)) {\n      stats[category] = 0\n    }\n\n    for (const [key, count] of this.errorCounts) {\n      const category = key.split(':')[0] as ErrorCategory\n      if (category in stats) {\n        stats[category] += count\n      }\n    }\n\n    return stats\n  }\n\n  // 生成错误指纹\n  private generateErrorFingerprint(error: ErrorInfo): string {\n    try {\n      const message = typeof error.message === 'string' ? error.message : JSON.stringify(error.message) || ''\n      const component = typeof error.component === 'string' ? error.component : 'unknown'\n      const stack = typeof error.stack === 'string' ? error.stack.split('\\n')[0] || '' : ''\n\n      const parts = [message, component, stack]\n      return parts.join('|').substring(0, 100)\n    } catch (e) {\n      // 如果生成指纹失败，返回一个基于时间戳的唯一标识\n      return `error_${Date.now()}`\n    }\n  }\n\n  // 启动定期清理计时器\n  private startCleanupTimer(): void {\n    // 每5分钟清理一次过期数据\n    this.cleanupTimer = setInterval(() => {\n      this.cleanupOldData()\n    }, 5 * 60 * 1000)\n  }\n\n  // 停止清理计时器\n  private stopCleanupTimer(): void {\n    if (this.cleanupTimer) {\n      clearInterval(this.cleanupTimer)\n      this.cleanupTimer = null\n    }\n  }\n\n  // 清理过期数据\n  private cleanupOldData(): void {\n    const now = Date.now()\n    const maxAge = 24 * 60 * 60 * 1000 // 24小时\n\n    // 清理过期错误\n    this.errors = this.errors.filter(\n      error => now - error.timestamp < maxAge\n    )\n\n    // 清理过期报告\n    for (const [key, report] of this.errorReports.entries()) {\n      if (now - report.timestamp > maxAge) {\n        this.errorReports.delete(key)\n      }\n    }\n\n    // 清理过期统计时间线\n    this.statistics.timeline = this.statistics.timeline.filter(\n      item => now - item.time < maxAge\n    )\n\n    // 限制错误计数Map的大小\n    if (this.errorCounts.size > this.maxErrorCounts) {\n      const entries = Array.from(this.errorCounts.entries())\n      const toKeep = entries.slice(-this.maxErrorCounts)\n      this.errorCounts = new Map(toKeep)\n    }\n\n    this.logger?.debug('Error manager cleanup completed', {\n      errorsRemaining: this.errors.length,\n      reportsRemaining: this.errorReports.size,\n      countsRemaining: this.errorCounts.size\n    })\n  }\n\n  // 移除全局错误处理器\n  private removeGlobalHandlers(): void {\n    if (typeof window !== 'undefined') {\n      if (this.globalErrorHandler) {\n        window.removeEventListener('error', this.globalErrorHandler)\n        this.globalErrorHandler = null\n      }\n      if (this.unhandledRejectionHandler) {\n        window.removeEventListener('unhandledrejection', this.unhandledRejectionHandler)\n        this.unhandledRejectionHandler = null\n      }\n    }\n  }\n\n  // 销毁方法\n  destroy(): void {\n    this.clearErrors()\n    this.errorHandlers.clear()\n    this.recoveryStrategies.clear()\n    this.filters.clear()\n    this.errorQueue = []\n    this.stopCleanupTimer()\n    this.removeGlobalHandlers()\n    this.logger?.debug('Error manager destroyed')\n  }\n}\n\nexport function createErrorManager(logger?: Logger): ErrorManager {\n  return new ErrorManagerImpl(logger)\n}\n\n// 预定义的错误处理器\nexport const errorHandlers = {\n  // 控制台错误处理器\n  console: (errorInfo: ErrorInfo) => {\n    const errorData = {\n      message: errorInfo.message,\n      timestamp: new Date(errorInfo.timestamp).toISOString(),\n      component: errorInfo.component,\n      info: errorInfo.info,\n      stack: errorInfo.stack,\n    }\n\n    if (errorInfo.level === 'error') {\n      console.error('Engine Error:', errorData)\n    } else if (errorInfo.level === 'warn') {\n      console.warn('Engine Warning:', errorData)\n    } else {\n      console.info('Engine Info:', errorData)\n    }\n  },\n\n  // 通知错误处理器\n  notification: (notificationManager: { show: (options: { type: string; title: string; message: string; duration?: number }) => void }) => (errorInfo: ErrorInfo) => {\n    if (errorInfo.level === 'error') {\n      notificationManager.show({\n        type: 'error',\n        title: 'Application Error',\n        message: errorInfo.message,\n        duration: 5000,\n      })\n    }\n  },\n\n  // 远程上报错误处理器\n  remote:\n    (config: { endpoint: string; apiKey?: string }) =>\n      async (errorInfo: ErrorInfo) => {\n        try {\n          const payload = {\n            ...errorInfo,\n            userAgent: navigator.userAgent,\n            url: window.location.href,\n            timestamp: new Date(errorInfo.timestamp).toISOString(),\n          }\n\n          const headers: Record<string, string> = {\n            'Content-Type': 'application/json',\n          }\n\n          if (config.apiKey) {\n            headers.Authorization = `Bearer ${config.apiKey}`\n          }\n\n          await fetch(config.endpoint, {\n            method: 'POST',\n            headers,\n            body: JSON.stringify(payload),\n          })\n        } catch (error) {\n          console.error('Failed to report error to remote service:', error)\n        }\n      },\n\n  // 本地存储错误处理器\n  localStorage:\n    (key = 'engine-errors') =>\n      (errorInfo: ErrorInfo) => {\n        try {\n          const stored = localStorage.getItem(key)\n          const errors = stored ? JSON.parse(stored) : []\n\n          errors.unshift(errorInfo)\n\n          // 限制存储的错误数量\n          if (errors.length > 50) {\n            errors.splice(50)\n          }\n\n          localStorage.setItem(key, JSON.stringify(errors))\n        } catch (error) {\n          console.error('Failed to store error in localStorage:', error)\n        }\n      },\n}\n\n// 错误边界组件工厂\nexport function createErrorBoundary(errorManager: ErrorManager) {\n  return {\n    name: 'ErrorBoundary',\n    data() {\n      return {\n        hasError: false,\n        error: null as Error | null,\n      }\n    },\n    errorCaptured(error: Error, component: Component, info: string) {\n      ; (this as unknown as { hasError: boolean; error: Error | null }).hasError = true\n        ; (this as unknown as { hasError: boolean; error: Error | null }).error = error\n\n      // 捕获错误到错误管理器\n      errorManager.captureError(error, component, info)\n\n      // 阻止错误继续传播\n      return false\n    },\n    render() {\n      const self = this as unknown as { hasError: boolean; error: Error | null; $slots: { fallback?: (arg: { error: Error | null }) => unknown; default?: () => unknown } }\n      if (self.hasError) {\n        return (\n          self.$slots.fallback?.({ error: self.error }) ||\n          'Something went wrong. Please try again.'\n        )\n      }\n\n      return self.$slots.default?.()\n    },\n  }\n}\n"],"names":["ErrorCategory"],"mappings":"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"}