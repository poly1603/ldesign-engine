{"version":3,"file":"ai-integration.js","sources":["../../src/ai/ai-integration.ts"],"sourcesContent":["/**\r\n * AI 集成模块\r\n * 支持多种 AI 提供商，提供智能分析、代码优化、错误诊断等功能\r\n */\r\n\r\nimport type { Engine, Logger } from '../types'\r\n\r\n// ==================== 类型定义 ====================\r\n\r\nexport interface AIConfig {\r\n  provider: AIProvider\r\n  apiKey?: string\r\n  endpoint?: string\r\n  model?: string\r\n  maxTokens?: number\r\n  temperature?: number\r\n  features?: AIFeatures\r\n  cache?: boolean\r\n  timeout?: number\r\n}\r\n\r\nexport type AIProvider = 'openai' | 'anthropic' | 'gemini' | 'azure' | 'local' | 'custom'\r\n\r\nexport interface AIFeatures {\r\n  codeGeneration?: boolean\r\n  codeOptimization?: boolean\r\n  errorAnalysis?: boolean\r\n  performanceOptimization?: boolean\r\n  securityAnalysis?: boolean\r\n  documentation?: boolean\r\n  testing?: boolean\r\n  translation?: boolean\r\n}\r\n\r\nexport interface AIAnalysisResult {\r\n  suggestions: AISuggestion[]\r\n  confidence: number\r\n  reasoning?: string\r\n  metadata?: Record<string, unknown>\r\n}\r\n\r\nexport interface AISuggestion {\r\n  type: 'error' | 'warning' | 'optimization' | 'security' | 'style'\r\n  severity: 'critical' | 'high' | 'medium' | 'low'\r\n  title: string\r\n  description: string\r\n  code?: string\r\n  diff?: string\r\n  fix?: () => Promise<void>\r\n  learnMore?: string\r\n}\r\n\r\nexport interface CodeAnalysisRequest {\r\n  code: string\r\n  language?: string\r\n  context?: string\r\n  intent?: string\r\n  rules?: string[]\r\n}\r\n\r\nexport interface ErrorAnalysisRequest {\r\n  error: Error\r\n  context?: Record<string, unknown>\r\n  stackTrace?: string\r\n  previousFixes?: string[]\r\n}\r\n\r\nexport interface PerformanceAnalysisRequest {\r\n  metrics: Record<string, number>\r\n  code?: string\r\n  threshold?: Record<string, number>\r\n}\r\n\r\n// AI 提供商接口\r\ninterface AIProviderAdapter {\r\n  name: string\r\n  analyze: (prompt: string, options?: Record<string, unknown>) => Promise<string>\r\n  stream?: (prompt: string, onChunk: (chunk: string) => void) => Promise<void>\r\n  embeddings?: (text: string) => Promise<number[]>\r\n}\r\n\r\n// ==================== 实现 ====================\r\n\r\nexport class AIIntegration {\r\n  private config: AIConfig\r\n  private provider?: AIProviderAdapter\r\n  private cache = new Map<string, AIAnalysisResult>()\r\n  private engine?: Engine\r\n  private logger?: Logger\r\n  private requestQueue: Array<() => Promise<void>> = []\r\n  private isProcessing = false\r\n  private rateLimiter = {\r\n    tokens: 10,\r\n    maxTokens: 10,\r\n    refillRate: 1000, // ms\r\n    lastRefill: Date.now()\r\n  }\r\n\r\n  constructor(config: AIConfig, engine?: Engine) {\r\n    this.config = config\r\n    this.engine = engine\r\n    this.logger = engine?.logger\r\n    this.initializeProvider()\r\n  }\r\n\r\n  // ==================== 初始化 ====================\r\n\r\n  private initializeProvider(): void {\r\n    switch (this.config.provider) {\r\n      case 'openai':\r\n        this.provider = this.createOpenAIProvider()\r\n        break\r\n      case 'anthropic':\r\n        this.provider = this.createAnthropicProvider()\r\n        break\r\n      case 'gemini':\r\n        this.provider = this.createGeminiProvider()\r\n        break\r\n      case 'local':\r\n        this.provider = this.createLocalProvider()\r\n        break\r\n      default:\r\n        throw new Error(`Unsupported AI provider: ${this.config.provider}`)\r\n    }\r\n\r\n    this.logger?.info(`AI provider initialized: ${this.config.provider}`)\r\n  }\r\n\r\n  // ==================== 核心功能 ====================\r\n\r\n  /**\r\n   * 分析代码并提供优化建议\r\n   */\r\n  async analyzeCode(request: CodeAnalysisRequest): Promise<AIAnalysisResult> {\r\n    const cacheKey = this.getCacheKey('code', request)\r\n    \r\n    if (this.config.cache && this.cache.has(cacheKey)) {\r\n      return this.cache.get(cacheKey)!\r\n    }\r\n\r\n    const prompt = this.buildCodeAnalysisPrompt(request)\r\n    const response = await this.executeWithRateLimit(() => \r\n      this.provider!.analyze(prompt, {\r\n        maxTokens: this.config.maxTokens || 2000,\r\n        temperature: this.config.temperature || 0.3\r\n      })\r\n    )\r\n\r\n    const result = this.parseAnalysisResponse(response)\r\n    \r\n    if (this.config.cache) {\r\n      this.cache.set(cacheKey, result)\r\n    }\r\n\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * 分析错误并提供修复建议\r\n   */\r\n  async analyzeError(request: ErrorAnalysisRequest): Promise<AIAnalysisResult> {\r\n    const cacheKey = this.getCacheKey('error', request)\r\n    \r\n    if (this.config.cache && this.cache.has(cacheKey)) {\r\n      return this.cache.get(cacheKey)!\r\n    }\r\n\r\n    const prompt = this.buildErrorAnalysisPrompt(request)\r\n    const response = await this.executeWithRateLimit(() =>\r\n      this.provider!.analyze(prompt, {\r\n        maxTokens: this.config.maxTokens || 1500,\r\n        temperature: 0.2 // 低温度以获得更确定的答案\r\n      })\r\n    )\r\n\r\n    const result = this.parseAnalysisResponse(response)\r\n    \r\n    // 增强错误分析结果\r\n    result.suggestions = result.suggestions.map(suggestion => ({\r\n      ...suggestion,\r\n      fix: this.createErrorFix(request.error, suggestion)\r\n    }))\r\n\r\n    if (this.config.cache) {\r\n      this.cache.set(cacheKey, result)\r\n    }\r\n\r\n    // 记录到错误系统\r\n    this.engine?.errors?.onError((errorInfo) => {\r\n      this.logger?.info('AI Error Analysis:', { errorInfo, result })\r\n    })\r\n\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * 优化性能\r\n   */\r\n  async optimizePerformance(request: PerformanceAnalysisRequest): Promise<AIAnalysisResult> {\r\n    const prompt = this.buildPerformancePrompt(request)\r\n    const response = await this.executeWithRateLimit(() =>\r\n      this.provider!.analyze(prompt, {\r\n        maxTokens: 2000,\r\n        temperature: 0.4\r\n      })\r\n    )\r\n\r\n    const result = this.parseAnalysisResponse(response)\r\n    \r\n    // 自动应用性能优化\r\n    if (result.confidence > 0.8) {\r\n      for (const suggestion of result.suggestions) {\r\n        if (suggestion.severity === 'critical' && suggestion.fix) {\r\n          await suggestion.fix()\r\n          this.logger?.info(`Applied performance optimization: ${suggestion.title}`)\r\n        }\r\n      }\r\n    }\r\n\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * 生成代码\r\n   */\r\n  async generateCode(\r\n    description: string, \r\n    language = 'typescript',\r\n    context?: string\r\n  ): Promise<string> {\r\n    const prompt = `Generate ${language} code for: ${description}\r\n    ${context ? `Context: ${context}` : ''}\r\n    Requirements:\r\n    - Follow best practices\r\n    - Include error handling\r\n    - Add comments for complex logic\r\n    - Use TypeScript if applicable`\r\n\r\n    const response = await this.executeWithRateLimit(() =>\r\n      this.provider!.analyze(prompt, {\r\n        maxTokens: 3000,\r\n        temperature: 0.7\r\n      })\r\n    )\r\n\r\n    return this.extractCodeFromResponse(response)\r\n  }\r\n\r\n  /**\r\n   * 生成文档\r\n   */\r\n  async generateDocumentation(code: string, format = 'markdown'): Promise<string> {\r\n    const prompt = `Generate ${format} documentation for the following code:\r\n    \\`\\`\\`\r\n    ${code}\r\n    \\`\\`\\`\r\n    Include: API reference, usage examples, parameters description`\r\n\r\n    const response = await this.executeWithRateLimit(() =>\r\n      this.provider!.analyze(prompt, {\r\n        maxTokens: 2000,\r\n        temperature: 0.3\r\n      })\r\n    )\r\n\r\n    return response\r\n  }\r\n\r\n  /**\r\n   * 生成测试\r\n   */\r\n  async generateTests(code: string, framework = 'vitest'): Promise<string> {\r\n    const prompt = `Generate comprehensive ${framework} tests for:\r\n    \\`\\`\\`\r\n    ${code}\r\n    \\`\\`\\`\r\n    Include: unit tests, edge cases, error scenarios`\r\n\r\n    const response = await this.executeWithRateLimit(() =>\r\n      this.provider!.analyze(prompt, {\r\n        maxTokens: 2500,\r\n        temperature: 0.4\r\n      })\r\n    )\r\n\r\n    return this.extractCodeFromResponse(response)\r\n  }\r\n\r\n  /**\r\n   * 安全分析\r\n   */\r\n  async analyzeSecuirty(code: string): Promise<AIAnalysisResult> {\r\n    const prompt = `Analyze the following code for security vulnerabilities:\r\n    \\`\\`\\`\r\n    ${code}\r\n    \\`\\`\\`\r\n    Check for: XSS, SQL injection, CSRF, sensitive data exposure, etc.`\r\n\r\n    const response = await this.executeWithRateLimit(() =>\r\n      this.provider!.analyze(prompt, {\r\n        maxTokens: 2000,\r\n        temperature: 0.2\r\n      })\r\n    )\r\n\r\n    const result = this.parseAnalysisResponse(response)\r\n    \r\n    // 将安全问题报告给安全管理器\r\n    if (result.suggestions.some(s => s.severity === 'critical')) {\r\n      // TODO: Implement security validation when security manager is available\r\n      this.logger?.error('Critical security issue detected:', result)\r\n    }\r\n\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * 智能代码补全\r\n   */\r\n  async autocomplete(\r\n    code: string, \r\n    cursorPosition: number,\r\n    maxSuggestions = 5\r\n  ): Promise<string[]> {\r\n    const context = code.substring(Math.max(0, cursorPosition - 500), cursorPosition)\r\n    const prompt = `Complete the following code:\r\n    \\`\\`\\`\r\n    ${context}\r\n    [CURSOR]\r\n    \\`\\`\\`\r\n    Provide ${maxSuggestions} completions.`\r\n\r\n    const response = await this.executeWithRateLimit(() =>\r\n      this.provider!.analyze(prompt, {\r\n        maxTokens: 500,\r\n        temperature: 0.8\r\n      })\r\n    )\r\n\r\n    return this.parseCompletions(response)\r\n  }\r\n\r\n  /**\r\n   * 代码重构建议\r\n   */\r\n  async suggestRefactoring(code: string): Promise<AIAnalysisResult> {\r\n    const prompt = `Suggest refactoring for the following code:\r\n    \\`\\`\\`\r\n    ${code}\r\n    \\`\\`\\`\r\n    Focus on: readability, maintainability, performance, DRY principle`\r\n\r\n    const response = await this.executeWithRateLimit(() =>\r\n      this.provider!.analyze(prompt, {\r\n        maxTokens: 2000,\r\n        temperature: 0.5\r\n      })\r\n    )\r\n\r\n    return this.parseAnalysisResponse(response)\r\n  }\r\n\r\n  // ==================== 工具方法 ====================\r\n\r\n  private buildCodeAnalysisPrompt(request: CodeAnalysisRequest): string {\r\n    return `Analyze the following ${request.language || 'code'}:\r\n    \\`\\`\\`\r\n    ${request.code}\r\n    \\`\\`\\`\r\n    \r\n    ${request.context ? `Context: ${request.context}` : ''}\r\n    ${request.intent ? `Intent: ${request.intent}` : ''}\r\n    ${request.rules ? `Rules to check: ${request.rules.join(', ')}` : ''}\r\n    \r\n    Provide:\r\n    1. Code quality issues\r\n    2. Performance optimizations\r\n    3. Security concerns\r\n    4. Best practice violations\r\n    5. Suggested improvements\r\n    \r\n    Format response as JSON with suggestions array.`\r\n  }\r\n\r\n  private buildErrorAnalysisPrompt(request: ErrorAnalysisRequest): string {\r\n    return `Analyze this error:\r\n    Error: ${request.error.message}\r\n    ${request.stackTrace ? `Stack: ${request.stackTrace}` : ''}\r\n    ${request.context ? `Context: ${JSON.stringify(request.context)}` : ''}\r\n    ${request.previousFixes ? `Previous attempts: ${request.previousFixes.join(', ')}` : ''}\r\n    \r\n    Provide:\r\n    1. Root cause analysis\r\n    2. Step-by-step fix\r\n    3. Prevention strategies\r\n    4. Related issues\r\n    \r\n    Format as JSON with suggestions.`\r\n  }\r\n\r\n  private buildPerformancePrompt(request: PerformanceAnalysisRequest): string {\r\n    return `Analyze performance metrics:\r\n    ${JSON.stringify(request.metrics, null, 2)}\r\n    \r\n    ${request.code ? `Related code:\\n\\`\\`\\`\\n${request.code}\\n\\`\\`\\`` : ''}\r\n    ${request.threshold ? `Thresholds: ${JSON.stringify(request.threshold)}` : ''}\r\n    \r\n    Identify:\r\n    1. Performance bottlenecks\r\n    2. Optimization opportunities\r\n    3. Resource usage issues\r\n    4. Scalability concerns\r\n    \r\n    Provide actionable suggestions.`\r\n  }\r\n\r\n  private parseAnalysisResponse(response: string): AIAnalysisResult {\r\n    try {\r\n      // 尝试解析 JSON 响应\r\n      const parsed = JSON.parse(response)\r\n      return {\r\n        suggestions: parsed.suggestions || [],\r\n        confidence: parsed.confidence || 0.5,\r\n        reasoning: parsed.reasoning,\r\n        metadata: parsed.metadata\r\n      }\r\n    } catch {\r\n      // 降级处理：从文本响应提取信息\r\n      return this.parseTextResponse(response)\r\n    }\r\n  }\r\n\r\n  private parseTextResponse(response: string): AIAnalysisResult {\r\n    const suggestions: AISuggestion[] = []\r\n    const lines = response.split('\\n')\r\n    \r\n    let currentSuggestion: Partial<AISuggestion> = {}\r\n    \r\n    for (const line of lines) {\r\n      if (line.includes('Error:') || line.includes('Warning:') || line.includes('Suggestion:')) {\r\n        if (currentSuggestion.title) {\r\n          suggestions.push(currentSuggestion as AISuggestion)\r\n        }\r\n        \r\n        currentSuggestion = {\r\n          type: line.includes('Error') ? 'error' : 'optimization',\r\n          severity: line.includes('Critical') ? 'critical' : 'medium',\r\n          title: line.replace(/^(Error|Warning|Suggestion):\\s*/, ''),\r\n          description: ''\r\n        }\r\n      } else if (currentSuggestion.title) {\r\n        currentSuggestion.description += `${line  }\\n`\r\n      }\r\n    }\r\n    \r\n    if (currentSuggestion.title) {\r\n      suggestions.push(currentSuggestion as AISuggestion)\r\n    }\r\n    \r\n    return {\r\n      suggestions,\r\n      confidence: 0.7,\r\n      reasoning: response\r\n    }\r\n  }\r\n\r\n  private extractCodeFromResponse(response: string): string {\r\n    const codeMatch = response.match(/```\\w*\\n([\\s\\S]*?)```/)\r\n    return codeMatch ? codeMatch[1] : response\r\n  }\r\n\r\n  private parseCompletions(response: string): string[] {\r\n    const completions: string[] = []\r\n    for (const raw of response.split('\\n')) {\r\n      const line = raw.trim()\r\n      const dot = line.indexOf('.')\r\n      if (dot > 0) {\r\n        const leading = line.slice(0, dot)\r\n        if (/^\\d+$/.test(leading)) {\r\n          const text = line.slice(dot + 1).trim()\r\n          if (text) completions.push(text)\r\n        }\r\n      }\r\n    }\r\n    return completions.slice(0, 5)\r\n  }\r\n\r\n  private createErrorFix(error: Error, suggestion: AISuggestion): () => Promise<void> {\r\n    return async () => {\r\n      this.logger?.info(`Applying AI fix for: ${error.message}`)\r\n      \r\n      // 实际的修复逻辑应根据建议类型实现\r\n      if (suggestion.code) {\r\n        // 应用代码修复\r\n        this.engine?.events?.emit('ai:fix-applied', {\r\n          error,\r\n          suggestion,\r\n          code: suggestion.code\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  private getCacheKey(type: string, request: any): string {\r\n    const str = JSON.stringify(request)\r\n    return `${type}:${this.hashString(str)}`\r\n  }\r\n\r\n  private hashString(str: string): string {\r\n    let hash = 0\r\n    for (let i = 0; i < str.length; i++) {\r\n      const char = str.charCodeAt(i)\r\n      hash = ((hash << 5) - hash) + char\r\n      hash = hash & hash\r\n    }\r\n    return hash.toString(36)\r\n  }\r\n\r\n  // ==================== 速率限制 ====================\r\n\r\n  private async executeWithRateLimit<T>(fn: () => Promise<T>): Promise<T> {\r\n    return new Promise((resolve, reject) => {\r\n      this.requestQueue.push(async () => {\r\n        try {\r\n          const result = await fn()\r\n          resolve(result)\r\n        } catch (error) {\r\n          reject(error)\r\n        }\r\n      })\r\n      \r\n      this.processQueue()\r\n    })\r\n  }\r\n\r\n  private async processQueue(): Promise<void> {\r\n    if (this.isProcessing || this.requestQueue.length === 0) {\r\n      return\r\n    }\r\n\r\n    this.isProcessing = true\r\n    \r\n    while (this.requestQueue.length > 0) {\r\n      await this.waitForToken()\r\n      \r\n      const request = this.requestQueue.shift()\r\n      if (request) {\r\n        await request()\r\n      }\r\n    }\r\n    \r\n    this.isProcessing = false\r\n  }\r\n\r\n  private async waitForToken(): Promise<void> {\r\n    this.refillTokens()\r\n    \r\n    if (this.rateLimiter.tokens <= 0) {\r\n      await new Promise(resolve => \r\n        setTimeout(resolve, this.rateLimiter.refillRate)\r\n      )\r\n      return this.waitForToken()\r\n    }\r\n    \r\n    this.rateLimiter.tokens--\r\n  }\r\n\r\n  private refillTokens(): void {\r\n    const now = Date.now()\r\n    const timePassed = now - this.rateLimiter.lastRefill\r\n    const tokensToAdd = Math.floor(timePassed / this.rateLimiter.refillRate)\r\n    \r\n    if (tokensToAdd > 0) {\r\n      this.rateLimiter.tokens = Math.min(\r\n        this.rateLimiter.maxTokens,\r\n        this.rateLimiter.tokens + tokensToAdd\r\n      )\r\n      this.rateLimiter.lastRefill = now\r\n    }\r\n  }\r\n\r\n  // ==================== Provider 实现 ====================\r\n\r\n  private createOpenAIProvider(): AIProviderAdapter {\r\n    return {\r\n      name: 'OpenAI',\r\n      analyze: async (prompt, options) => {\r\n        if (!this.config.apiKey) {\r\n          throw new Error('OpenAI API key is required')\r\n        }\r\n\r\n        const response = await fetch(this.config.endpoint || 'https://api.openai.com/v1/chat/completions', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Authorization': `Bearer ${this.config.apiKey}`,\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({\r\n            model: this.config.model || 'gpt-4',\r\n            messages: [{ role: 'user', content: prompt }],\r\n            max_tokens: options?.maxTokens,\r\n            temperature: options?.temperature\r\n          })\r\n        })\r\n\r\n        const data = await response.json()\r\n        return data.choices[0].message.content\r\n      },\r\n      \r\n      stream: async (prompt, onChunk) => {\r\n        // Stream implementation for OpenAI\r\n        const response = await fetch(this.config.endpoint || 'https://api.openai.com/v1/chat/completions', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Authorization': `Bearer ${this.config.apiKey}`,\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({\r\n            model: this.config.model || 'gpt-4',\r\n            messages: [{ role: 'user', content: prompt }],\r\n            stream: true\r\n          })\r\n        })\r\n\r\n        const reader = response.body?.getReader()\r\n        if (!reader) return\r\n\r\n        while (true) {\r\n          const { done, value } = await reader.read()\r\n          if (done) break\r\n          \r\n          const text = new TextDecoder().decode(value)\r\n          onChunk(text)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private createAnthropicProvider(): AIProviderAdapter {\r\n    return {\r\n      name: 'Anthropic',\r\n      analyze: async (prompt, options) => {\r\n        if (!this.config.apiKey) {\r\n          throw new Error('Anthropic API key is required')\r\n        }\r\n\r\n        const response = await fetch(this.config.endpoint || 'https://api.anthropic.com/v1/messages', {\r\n          method: 'POST',\r\n          headers: {\r\n            'x-api-key': this.config.apiKey,\r\n            'Content-Type': 'application/json',\r\n            'anthropic-version': '2023-06-01'\r\n          },\r\n          body: JSON.stringify({\r\n            model: this.config.model || 'claude-3-opus-20240229',\r\n            messages: [{ role: 'user', content: prompt }],\r\n            max_tokens: options?.maxTokens || 1000\r\n          })\r\n        })\r\n\r\n        const data = await response.json()\r\n        return data.content[0].text\r\n      }\r\n    }\r\n  }\r\n\r\n  private createGeminiProvider(): AIProviderAdapter {\r\n    return {\r\n      name: 'Gemini',\r\n      analyze: async (prompt, options) => {\r\n        if (!this.config.apiKey) {\r\n          throw new Error('Gemini API key is required')\r\n        }\r\n\r\n        const url = `${this.config.endpoint || 'https://generativelanguage.googleapis.com/v1beta'}/models/${this.config.model || 'gemini-pro'}:generateContent?key=${this.config.apiKey}`\r\n\r\n        const response = await fetch(url, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({\r\n            contents: [{ parts: [{ text: prompt }] }],\r\n            generationConfig: {\r\n              maxOutputTokens: options?.maxTokens,\r\n              temperature: options?.temperature\r\n            }\r\n          })\r\n        })\r\n\r\n        const data = await response.json()\r\n        return data.candidates[0].content.parts[0].text\r\n      }\r\n    }\r\n  }\r\n\r\n  private createLocalProvider(): AIProviderAdapter {\r\n    // 本地模型提供商（如 Ollama）\r\n    return {\r\n      name: 'Local',\r\n      analyze: async (prompt, options) => {\r\n        const response = await fetch(this.config.endpoint || 'http://localhost:11434/api/generate', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({\r\n            model: this.config.model || 'codellama',\r\n            prompt,\r\n            options: {\r\n              num_predict: options?.maxTokens,\r\n              temperature: options?.temperature\r\n            }\r\n          })\r\n        })\r\n\r\n        const data = await response.json()\r\n        return data.response\r\n      }\r\n    }\r\n  }\r\n\r\n  // ==================== 公共 API ====================\r\n\r\n  /**\r\n   * 配置 AI 提供商\r\n   */\r\n  configure(config: Partial<AIConfig>): void {\r\n    this.config = { ...this.config, ...config }\r\n    this.initializeProvider()\r\n  }\r\n\r\n  /**\r\n   * 清除缓存\r\n   */\r\n  clearCache(): void {\r\n    this.cache.clear()\r\n  }\r\n\r\n  /**\r\n   * 获取使用统计\r\n   */\r\n  getStats(): {\r\n    provider: string\r\n    cacheSize: number\r\n    queueLength: number\r\n    rateLimitStatus: {\r\n      tokens: number\r\n      maxTokens: number\r\n    }\r\n  } {\r\n    return {\r\n      provider: this.config.provider,\r\n      cacheSize: this.cache.size,\r\n      queueLength: this.requestQueue.length,\r\n      rateLimitStatus: {\r\n        tokens: this.rateLimiter.tokens,\r\n        maxTokens: this.rateLimiter.maxTokens\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 销毁\r\n   */\r\n  destroy(): void {\r\n    this.cache.clear()\r\n    this.requestQueue = []\r\n    this.isProcessing = false\r\n  }\r\n}\r\n\r\n// 导出工厂函数\r\nexport function createAIIntegration(config: AIConfig, engine?: Engine): AIIntegration {\r\n  return new AIIntegration(config, engine)\r\n}"],"names":[],"mappings":"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"}