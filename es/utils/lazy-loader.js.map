{"version":3,"file":"lazy-loader.js","sources":["../../src/utils/lazy-loader.ts"],"sourcesContent":["/**\r\n * 懒加载工具 - 支持代码分割和按需加载\r\n * \r\n * 提供模块懒加载、预加载和缓存功能\r\n */\r\n\r\n// 模块缓存\r\nconst moduleCache = new Map<string, Promise<any>>()\r\n\r\n// 预加载队列\r\nconst preloadQueue = new Set<string>()\r\n\r\n/**\r\n * 懒加载模块\r\n * @param importFn 动态导入函数\r\n * @param cacheKey 缓存键（可选）\r\n * @returns Promise<模块>\r\n */\r\nexport async function lazyLoad<T = any>(\r\n  importFn: () => Promise<T>,\r\n  cacheKey?: string\r\n): Promise<T> {\r\n  // 使用缓存键或创建唯一键\r\n  const key = cacheKey || importFn.toString()\r\n  \r\n  // 检查缓存\r\n  if (moduleCache.has(key)) {\r\n    return moduleCache.get(key)!\r\n  }\r\n  \r\n  // 加载模块\r\n  const promise = importFn()\r\n  moduleCache.set(key, promise)\r\n  \r\n  return promise\r\n}\r\n\r\n/**\r\n * 预加载模块（在空闲时加载）\r\n * @param importFn 动态导入函数\r\n * @param cacheKey 缓存键（可选）\r\n */\r\nexport function preload<T = any>(\r\n  importFn: () => Promise<T>,\r\n  cacheKey?: string\r\n): void {\r\n  const key = cacheKey || importFn.toString()\r\n  \r\n  // 避免重复预加载\r\n  if (moduleCache.has(key) || preloadQueue.has(key)) {\r\n    return\r\n  }\r\n  \r\n  preloadQueue.add(key)\r\n  \r\n  // 使用 requestIdleCallback 在空闲时加载\r\n  if (typeof window !== 'undefined' && 'requestIdleCallback' in window) {\r\n    window.requestIdleCallback(() => {\r\n      lazyLoad(importFn, cacheKey).finally(() => {\r\n        preloadQueue.delete(key)\r\n      })\r\n    })\r\n  } else {\r\n    // 降级到 setTimeout\r\n    setTimeout(() => {\r\n      lazyLoad(importFn, cacheKey).finally(() => {\r\n        preloadQueue.delete(key)\r\n      })\r\n    }, 0)\r\n  }\r\n}\r\n\r\n/**\r\n * 批量预加载\r\n * @param loaders 加载器数组\r\n */\r\nexport function preloadBatch(\r\n  loaders: Array<{ importFn: () => Promise<any>; cacheKey?: string }>\r\n): void {\r\n  loaders.forEach(({ importFn, cacheKey }) => {\r\n    preload(importFn, cacheKey)\r\n  })\r\n}\r\n\r\n/**\r\n * 清除模块缓存\r\n * @param cacheKey 缓存键（可选，不提供则清除所有）\r\n */\r\nexport function clearCache(cacheKey?: string): void {\r\n  if (cacheKey) {\r\n    moduleCache.delete(cacheKey)\r\n  } else {\r\n    moduleCache.clear()\r\n  }\r\n}\r\n\r\n/**\r\n * 获取缓存统计\r\n */\r\nexport function getCacheStats(): {\r\n  size: number\r\n  keys: string[]\r\n} {\r\n  return {\r\n    size: moduleCache.size,\r\n    keys: Array.from(moduleCache.keys())\r\n  }\r\n}\r\n\r\n/**\r\n * 懒加载组件装饰器（用于 Vue 组件）\r\n * @param importFn 组件导入函数\r\n * @returns Vue 异步组件\r\n */\r\nexport function lazyComponent<T = any>(\r\n  importFn: () => Promise<T>\r\n): () => Promise<T> {\r\n  return () => lazyLoad(importFn)\r\n}\r\n\r\n/**\r\n * 智能预加载 - 基于用户行为预测\r\n */\r\nexport class SmartPreloader {\r\n  private patterns = new Map<string, number>()\r\n  private threshold = 3 // 访问3次后触发预加载\r\n  \r\n  /**\r\n   * 记录访问\r\n   * @param key 访问键\r\n   */\r\n  record(key: string): void {\r\n    const count = (this.patterns.get(key) || 0) + 1\r\n    this.patterns.set(key, count)\r\n  }\r\n  \r\n  /**\r\n   * 检查是否应该预加载\r\n   * @param key 检查键\r\n   * @returns 是否应该预加载\r\n   */\r\n  shouldPreload(key: string): boolean {\r\n    return (this.patterns.get(key) || 0) >= this.threshold\r\n  }\r\n  \r\n  /**\r\n   * 重置统计\r\n   */\r\n  reset(): void {\r\n    this.patterns.clear()\r\n  }\r\n  \r\n  /**\r\n   * 获取热门项\r\n   * @param limit 限制数量\r\n   * @returns 热门项列表\r\n   */\r\n  getTopPatterns(limit = 10): Array<[string, number]> {\r\n    return Array.from(this.patterns.entries())\r\n      .sort((a, b) => b[1] - a[1])\r\n      .slice(0, limit)\r\n  }\r\n}\r\n\r\n// 导出全局预加载器实例\r\nexport const smartPreloader = new SmartPreloader()\r\n\r\n"],"names":[],"mappings":"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"}