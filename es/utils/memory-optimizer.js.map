{"version":3,"file":"memory-optimizer.js","sources":["../../src/utils/memory-optimizer.ts"],"sourcesContent":["/**\r\n * 内存优化工具集\r\n * 提供全面的内存管理和优化功能\r\n */\r\n\r\nimport type { Logger } from '../types'\r\n\r\n// ============================================\r\n// 内存优化配置\r\n// ============================================\r\n\r\nexport interface MemoryOptimizationConfig {\r\n  // 内存限制\r\n  maxMemory?: number // 最大内存使用量（MB）\r\n  warningThreshold?: number // 警告阈值（0-1）\r\n  criticalThreshold?: number // 临界阈值（0-1）\r\n  \r\n  // 垃圾回收\r\n  gcInterval?: number // GC间隔（ms）\r\n  autoGC?: boolean // 自动垃圾回收\r\n  \r\n  // 对象池\r\n  enableObjectPooling?: boolean // 启用对象池\r\n  poolMaxSize?: number // 对象池最大大小\r\n  \r\n  // 弱引用\r\n  enableWeakRefs?: boolean // 启用弱引用优化\r\n  \r\n  // 回调\r\n  onMemoryWarning?: (usage: MemoryUsage) => void\r\n  onMemoryCritical?: (usage: MemoryUsage) => void\r\n}\r\n\r\nexport interface MemoryUsage {\r\n  used: number\r\n  total: number\r\n  percentage: number\r\n  heap: {\r\n    used: number\r\n    total: number\r\n    limit: number\r\n  }\r\n}\r\n\r\n// ============================================\r\n// 对象池实现\r\n// ============================================\r\n\r\nexport class ObjectPool<T extends object> {\r\n  private pool: T[] = []\r\n  private inUse = new WeakSet<T>()\r\n  private factory: () => T\r\n  private reset: (obj: T) => void\r\n  private maxSize: number\r\n  private created = 0\r\n  private recycled = 0\r\n  \r\n  constructor(\r\n    factory: () => T,\r\n    reset: (obj: T) => void,\r\n    maxSize = 50 // 减少默认池大小\r\n  ) {\r\n    this.factory = factory\r\n    this.reset = reset\r\n    this.maxSize = maxSize\r\n  }\r\n  \r\n  /**\r\n   * 获取对象\r\n   */\r\n  acquire(): T {\r\n    let obj: T\r\n    if (this.pool.length > 0) {\r\n      obj = this.pool.pop()!\r\n      this.recycled++\r\n    } else {\r\n      obj = this.factory()\r\n      this.created++\r\n    }\r\n    if (typeof obj === 'object' && obj !== null) {\r\n      this.inUse.add(obj)\r\n    }\r\n    return obj\r\n  }\r\n  \r\n  /**\r\n   * 释放对象\r\n   */\r\n  release(obj: T): void {\r\n    // 检查对象是否正在使用中\r\n    if (typeof obj === 'object' && obj !== null) {\r\n      if (!this.inUse.has(obj)) {\r\n        console.warn('Attempting to release object that was not acquired from pool')\r\n        return\r\n      }\r\n      this.inUse.delete(obj)\r\n    }\r\n    \r\n    if (this.pool.length < this.maxSize) {\r\n      this.reset(obj)\r\n      this.pool.push(obj)\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 清空对象池\r\n   */\r\n  clear(): void {\r\n    // 重置所有池中的对象\r\n    for (const obj of this.pool) {\r\n      if (typeof obj === 'object' && obj !== null) {\r\n        // 清理对象引用，帮助垃圾回收\r\n        for (const key in obj) {\r\n          try {\r\n            delete (obj as any)[key]\r\n          } catch {}\r\n        }\r\n      }\r\n    }\r\n    this.pool.length = 0\r\n    this.created = 0\r\n    this.recycled = 0\r\n  }\r\n  \r\n  /**\r\n   * 获取池大小\r\n   */\r\n  size(): number {\r\n    return this.pool.length\r\n  }\r\n  \r\n  /**\r\n   * 预填充对象池\r\n   */\r\n  prefill(count: number): void {\r\n    const fillCount = Math.min(count, Math.floor(this.maxSize * 0.5)) // 只预填充50%\r\n    for (let i = 0; i < fillCount && this.pool.length < fillCount; i++) {\r\n      const obj = this.factory()\r\n      this.created++\r\n      this.pool.push(obj)\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 获取统计信息\r\n   */\r\n  getStats(): { size: number; created: number; recycled: number; efficiency: number } {\r\n    return {\r\n      size: this.pool.length,\r\n      created: this.created,\r\n      recycled: this.recycled,\r\n      efficiency: this.created > 0 ? (this.recycled / (this.created + this.recycled)) * 100 : 0\r\n    }\r\n  }\r\n}\r\n\r\n// ============================================\r\n// 弱引用缓存\r\n// ============================================\r\n\r\nexport class WeakRefCache<K extends object, V extends object> {\r\n  private cache = new WeakMap<K, WeakRef<V>>()\r\n  private registry?: any\r\n  \r\n  constructor(onCleanup?: (key: K) => void) {\r\n    if (typeof (globalThis as any).FinalizationRegistry !== 'undefined' && onCleanup) {\r\n      this.registry = new (globalThis as any).FinalizationRegistry(onCleanup)\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 设置缓存值\r\n   */\r\n  set(key: K, value: V): void {\r\n    const ref = new WeakRef(value)\r\n    this.cache.set(key, ref)\r\n    \r\n    if (this.registry && typeof value === 'object' && value !== null) {\r\n      this.registry.register(value as object, key)\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 获取缓存值\r\n   */\r\n  get(key: K): V | undefined {\r\n    const ref = this.cache.get(key)\r\n    if (ref) {\r\n      const value = ref.deref()\r\n      if (value === undefined) {\r\n        // 弱引用已被回收\r\n        this.cache.delete(key)\r\n      }\r\n      return value\r\n    }\r\n    return undefined\r\n  }\r\n  \r\n  /**\r\n   * 检查缓存是否存在\r\n   */\r\n  has(key: K): boolean {\r\n    const ref = this.cache.get(key)\r\n    if (ref) {\r\n      const value = ref.deref()\r\n      if (value === undefined) {\r\n        this.cache.delete(key)\r\n        return false\r\n      }\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n  \r\n  /**\r\n   * 删除缓存\r\n   */\r\n  delete(key: K): boolean {\r\n    return this.cache.delete(key)\r\n  }\r\n}\r\n\r\n// ============================================\r\n// 内存优化器\r\n// ============================================\r\n\r\nexport class MemoryOptimizer {\r\n  private config: Required<MemoryOptimizationConfig>\r\n  private gcTimer?: number\r\n  private objectPools = new Map<string, ObjectPool<any>>()\r\n  private weakCaches = new Map<string, WeakRefCache<any, any>>()\r\n  private logger?: Logger\r\n  private isMonitoring = false\r\n  private lastGCTime = 0\r\n  private memoryCheckTimer?: number\r\n  \r\n  constructor(config: MemoryOptimizationConfig = {}, logger?: Logger) {\r\n    this.config = {\r\n      maxMemory: config.maxMemory ?? 256, // 减少到256MB\r\n      warningThreshold: config.warningThreshold ?? 0.6, // 更早预警\r\n      criticalThreshold: config.criticalThreshold ?? 0.8, // 更早触发清理\r\n      gcInterval: config.gcInterval ?? 30000, // 30秒\r\n      autoGC: config.autoGC ?? true,\r\n      enableObjectPooling: config.enableObjectPooling ?? true,\r\n      poolMaxSize: config.poolMaxSize ?? 50, // 减少池大小\r\n      enableWeakRefs: config.enableWeakRefs ?? true,\r\n      onMemoryWarning: config.onMemoryWarning ?? (() => {}),\r\n      onMemoryCritical: config.onMemoryCritical ?? (() => {})\r\n    }\r\n    this.logger = logger\r\n    \r\n    if (this.config.autoGC) {\r\n      this.startAutoGC()\r\n    }\r\n    \r\n    // 启动内存监控\r\n    this.startMemoryMonitoring()\r\n  }\r\n  \r\n  /**\r\n   * 获取内存使用情况\r\n   */\r\n  getMemoryUsage(): MemoryUsage {\r\n    // 浏览器环境\r\n    if (typeof window !== 'undefined' && (window.performance as any)?.memory) {\r\n      const memory = (window.performance as any).memory\r\n      return {\r\n        used: memory.usedJSHeapSize / 1024 / 1024,\r\n        total: memory.jsHeapSizeLimit / 1024 / 1024,\r\n        percentage: memory.usedJSHeapSize / memory.jsHeapSizeLimit,\r\n        heap: {\r\n          used: memory.usedJSHeapSize / 1024 / 1024,\r\n          total: memory.totalJSHeapSize / 1024 / 1024,\r\n          limit: memory.jsHeapSizeLimit / 1024 / 1024\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 无法获取内存信息\r\n    return {\r\n      used: 0,\r\n      total: this.config.maxMemory,\r\n      percentage: 0,\r\n      heap: { used: 0, total: 0, limit: this.config.maxMemory }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 检查内存状态\r\n   */\r\n  checkMemory(): void {\r\n    const usage = this.getMemoryUsage()\r\n    \r\n    if (usage.percentage > this.config.criticalThreshold) {\r\n      this.logger?.error('Memory usage critical', usage)\r\n      this.config.onMemoryCritical(usage)\r\n      this.forceGC()\r\n    } else if (usage.percentage > this.config.warningThreshold) {\r\n      this.logger?.warn('Memory usage warning', usage)\r\n      this.config.onMemoryWarning(usage)\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 创建对象池\r\n   */\r\n  createObjectPool<T extends object>(\r\n    name: string,\r\n    factory: () => T,\r\n    reset: (obj: T) => void,\r\n    maxSize?: number\r\n  ): ObjectPool<T> {\r\n    if (!this.config.enableObjectPooling) {\r\n      throw new Error('Object pooling is disabled')\r\n    }\r\n    \r\n    const pool = new ObjectPool(\r\n      factory,\r\n      reset,\r\n      maxSize ?? this.config.poolMaxSize\r\n    )\r\n    \r\n    this.objectPools.set(name, pool)\r\n    return pool\r\n  }\r\n  \r\n  /**\r\n   * 获取对象池\r\n   */\r\n  getObjectPool<T extends object>(name: string): ObjectPool<T> | undefined {\r\n    return this.objectPools.get(name)\r\n  }\r\n  \r\n  /**\r\n   * 创建弱引用缓存\r\n   */\r\n  createWeakCache<K extends object, V extends object>(\r\n    name: string,\r\n    onCleanup?: (key: K) => void\r\n  ): WeakRefCache<K, V> {\r\n    if (!this.config.enableWeakRefs) {\r\n      throw new Error('Weak references are disabled')\r\n    }\r\n    \r\n    const cache = new WeakRefCache<K, V>(onCleanup)\r\n    this.weakCaches.set(name, cache)\r\n    return cache\r\n  }\r\n  \r\n  /**\r\n   * 获取弱引用缓存\r\n   */\r\n  getWeakCache<K extends object, V extends object>(name: string): WeakRefCache<K, V> | undefined {\r\n    return this.weakCaches.get(name)\r\n  }\r\n  \r\n  /**\r\n   * 强制垃圾回收\r\n   */\r\n  forceGC(): void {\r\n    const now = Date.now()\r\n    \r\n    // 避免频繁GC\r\n    if (now - this.lastGCTime < 1000) {\r\n      return\r\n    }\r\n    \r\n    this.lastGCTime = now\r\n    \r\n    // Node.js环境\r\n    if (typeof (globalThis as any).gc === 'function') {\r\n      (globalThis as any).gc()\r\n      this.logger?.debug('Manual GC triggered')\r\n    }\r\n    \r\n    // 清理对象池\r\n    for (const pool of this.objectPools.values()) {\r\n      pool.clear()\r\n    }\r\n    \r\n    this.logger?.debug('Memory cleanup completed')\r\n  }\r\n  \r\n  /**\r\n   * 启动自动垃圾回收\r\n   */\r\n  private startAutoGC(): void {\r\n    if (this.gcTimer) {\r\n      window.clearInterval(this.gcTimer)\r\n    }\r\n    \r\n    this.gcTimer = window.setInterval(() => {\r\n      this.checkMemory()\r\n      // 清理不活跃的对象池\r\n      this.cleanupInactivePools()\r\n    }, this.config.gcInterval)\r\n  }\r\n  \r\n  /**\r\n   * 启动内存监控\r\n   */\r\n  private startMemoryMonitoring(): void {\r\n    if (this.memoryCheckTimer) {\r\n      window.clearInterval(this.memoryCheckTimer)\r\n    }\r\n    \r\n    // 更频繁的内存检查\r\n    this.memoryCheckTimer = window.setInterval(() => {\r\n      const usage = this.getMemoryUsage()\r\n      if (usage.percentage > this.config.warningThreshold) {\r\n        this.optimizeMemory()\r\n      }\r\n    }, 10000) // 每10秒检查一次\r\n  }\r\n  \r\n  /**\r\n   * 清理不活跃的对象池\r\n   */\r\n  private cleanupInactivePools(): void {\r\n    for (const [name, pool] of this.objectPools) {\r\n      const stats = pool.getStats()\r\n      // 如果池的效率低于30%，减小其大小\r\n      if (stats.efficiency < 30 && stats.size > 10) {\r\n        const toRemove = Math.floor(stats.size * 0.5)\r\n        for (let i = 0; i < toRemove; i++) {\r\n          pool.acquire() // 取出对象但不放回\r\n        }\r\n        this.logger?.debug(`Reduced pool ${name} size by ${toRemove}`)\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 优化内存使用\r\n   */\r\n  private optimizeMemory(): void {\r\n    // 清理对象池\r\n    for (const pool of this.objectPools.values()) {\r\n      const stats = pool.getStats()\r\n      if (stats.size > 20) {\r\n        pool.clear()\r\n      }\r\n    }\r\n    \r\n    // 触发垃圾回收\r\n    this.forceGC()\r\n  }\r\n  \r\n  /**\r\n   * 优化数组内存使用\r\n   */\r\n  optimizeArray<T>(arr: T[]): T[] {\r\n    // 如果数组太大，考虑分片处理\r\n    if (arr.length > 10000) {\r\n      this.logger?.debug(`Large array detected: ${arr.length} items`)\r\n    }\r\n    \r\n    // 移除undefined和null值\r\n    return arr.filter(item => item !== undefined && item !== null)\r\n  }\r\n  \r\n  /**\r\n   * 优化对象内存使用\r\n   */\r\n  optimizeObject<T extends object>(obj: T): T {\r\n    // 移除undefined值的属性\r\n    const optimized = {} as T\r\n    \r\n    for (const key in obj) {\r\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n        const value = obj[key]\r\n        if (value !== undefined) {\r\n          optimized[key] = value\r\n        }\r\n      }\r\n    }\r\n    \r\n    return optimized\r\n  }\r\n  \r\n  /**\r\n   * 分片处理大数据\r\n   */\r\n  async processInChunks<T, R>(\r\n    data: T[],\r\n    processor: (chunk: T[]) => R | Promise<R>,\r\n    chunkSize = 1000\r\n  ): Promise<R[]> {\r\n    const results: R[] = []\r\n    \r\n    for (let i = 0; i < data.length; i += chunkSize) {\r\n      const chunk = data.slice(i, i + chunkSize)\r\n      const result = await processor(chunk)\r\n      results.push(result)\r\n      \r\n      // 每处理几个chunk就检查一次内存\r\n      if (i % (chunkSize * 5) === 0) {\r\n        this.checkMemory()\r\n      }\r\n    }\r\n    \r\n    return results\r\n  }\r\n  \r\n  /**\r\n   * 延迟加载\r\n   */\r\n  createLazyLoader<T>(loader: () => T | Promise<T>): () => Promise<T> {\r\n    let cached: T | undefined\r\n    let loading = false\r\n    let promise: Promise<T> | undefined\r\n    \r\n    return async () => {\r\n      if (cached !== undefined) {\r\n        return cached\r\n      }\r\n      \r\n      if (loading && promise) {\r\n        return promise\r\n      }\r\n      \r\n      loading = true\r\n      promise = Promise.resolve(loader()).then(result => {\r\n        cached = result\r\n        loading = false\r\n        promise = undefined\r\n        return result\r\n      })\r\n      \r\n      return promise\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 获取统计信息\r\n   */\r\n  getStats(): {\r\n    memory: MemoryUsage\r\n    objectPools: { name: string; size: number }[]\r\n    weakCaches: string[]\r\n  } {\r\n    return {\r\n      memory: this.getMemoryUsage(),\r\n      objectPools: Array.from(this.objectPools.entries()).map(([name, pool]) => ({\r\n        name,\r\n        size: pool.size()\r\n      })),\r\n      weakCaches: Array.from(this.weakCaches.keys())\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 销毁优化器\r\n   */\r\n  destroy(): void {\r\n    if (this.gcTimer) {\r\n      clearInterval(this.gcTimer)\r\n      this.gcTimer = undefined\r\n    }\r\n    \r\n    if (this.memoryCheckTimer) {\r\n      clearInterval(this.memoryCheckTimer)\r\n      this.memoryCheckTimer = undefined\r\n    }\r\n    \r\n    // 清理对象池\r\n    for (const pool of this.objectPools.values()) {\r\n      pool.clear()\r\n    }\r\n    this.objectPools.clear()\r\n    \r\n    // 清理弱引用缓存\r\n    this.weakCaches.clear()\r\n    \r\n    this.isMonitoring = false\r\n  }\r\n}\r\n\r\n// ============================================\r\n// 内存泄漏检测器\r\n// ============================================\r\n\r\nexport class MemoryLeakDetector {\r\n  private snapshots: Array<{\r\n    timestamp: number\r\n    heapUsed: number\r\n    objects: number\r\n  }> = []\r\n  private maxSnapshots = 100\r\n  private leakThreshold = 10 // MB\r\n  private checkInterval = 5000 // 5秒\r\n  private timer?: number\r\n  private objectCounts = new Map<string, number>()\r\n  \r\n  /**\r\n   * 开始检测\r\n   */\r\n  start(): void {\r\n    if (this.timer) return\r\n    \r\n    this.timer = window.setInterval(() => {\r\n      this.takeSnapshot()\r\n      this.analyzeSnapshots()\r\n    }, this.checkInterval)\r\n  }\r\n  \r\n  /**\r\n   * 停止检测\r\n   */\r\n  stop(): void {\r\n    if (this.timer) {\r\n      window.clearInterval(this.timer)\r\n      this.timer = undefined\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 拍摄内存快照\r\n   */\r\n  private takeSnapshot(): void {\r\n    const usage = this.getHeapUsage()\r\n    \r\n    this.snapshots.push({\r\n      timestamp: Date.now(),\r\n      heapUsed: usage.heapUsed,\r\n      objects: this.countObjects()\r\n    })\r\n    \r\n    // 限制快照数量\r\n    if (this.snapshots.length > this.maxSnapshots) {\r\n      this.snapshots.shift()\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 分析快照\r\n   */\r\n  private analyzeSnapshots(): void {\r\n    if (this.snapshots.length < 10) return\r\n    \r\n    // 计算内存增长趋势\r\n    const recent = this.snapshots.slice(-10)\r\n    const growth = recent[recent.length - 1].heapUsed - recent[0].heapUsed\r\n    \r\n    if (growth > this.leakThreshold) {\r\n      console.warn(`Potential memory leak detected: ${growth.toFixed(2)}MB growth`)\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 获取堆使用情况\r\n   */\r\n  private getHeapUsage(): { heapUsed: number } {\r\n    if (typeof window !== 'undefined' && (window.performance as any)?.memory) {\r\n      const memory = (window.performance as any).memory\r\n      return { heapUsed: memory.usedJSHeapSize / 1024 / 1024 }\r\n    }\r\n    \r\n    return { heapUsed: 0 }\r\n  }\r\n  \r\n  /**\r\n   * 统计对象数量\r\n   */\r\n  private countObjects(): number {\r\n    // 简化实现，实际应该使用更复杂的对象追踪\r\n    return this.objectCounts.size\r\n  }\r\n  \r\n  /**\r\n   * 追踪对象\r\n   */\r\n  trackObject(id: string): void {\r\n    const count = this.objectCounts.get(id) || 0\r\n    this.objectCounts.set(id, count + 1)\r\n  }\r\n  \r\n  /**\r\n   * 取消追踪对象\r\n   */\r\n  untrackObject(id: string): void {\r\n    const count = this.objectCounts.get(id) || 0\r\n    if (count <= 1) {\r\n      this.objectCounts.delete(id)\r\n    } else {\r\n      this.objectCounts.set(id, count - 1)\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 获取报告\r\n   */\r\n  getReport(): {\r\n      snapshots: any\r\n    possibleLeaks: string[]\r\n    recommendation: string\r\n  } {\r\n    const possibleLeaks: string[] = []\r\n    \r\n    // 检查持续增长的对象\r\n    for (const [id, count] of this.objectCounts) {\r\n      if (count > 100) {\r\n        possibleLeaks.push(`Object ${id}: ${count} instances`)\r\n      }\r\n    }\r\n    \r\n    return {\r\n      snapshots: this.snapshots.slice(-20),\r\n      possibleLeaks,\r\n      recommendation: possibleLeaks.length > 0\r\n        ? 'Review object lifecycle and ensure proper cleanup'\r\n        : 'No obvious memory leaks detected'\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 清理\r\n   */\r\n  destroy(): void {\r\n    this.stop()\r\n    this.snapshots = []\r\n    this.objectCounts.clear()\r\n  }\r\n}\r\n\r\n// ============================================\r\n// 工厂函数\r\n// ============================================\r\n\r\nexport function createMemoryOptimizer(\r\n  config?: MemoryOptimizationConfig,\r\n  logger?: Logger\r\n): MemoryOptimizer {\r\n  return new MemoryOptimizer(config, logger)\r\n}\r\n\r\nexport function createMemoryLeakDetector(): MemoryLeakDetector {\r\n  return new MemoryLeakDetector()\r\n}\r\n\r\n// ============================================\r\n// 默认导出\r\n// ============================================\r\n\r\nexport default {\r\n  MemoryOptimizer,\r\n  MemoryLeakDetector,\r\n  ObjectPool,\r\n  WeakRefCache,\r\n  createMemoryOptimizer,\r\n  createMemoryLeakDetector\r\n}"],"names":[],"mappings":";;;;;;;;;MAgDa,UAAA,CAAU;AAAA,EASrB,WAAA,CACE,OAAA,EACA,KAAA,EACA,OAAA,GAAU,EAAA;AAXJ,IAAA,IAAA,CAAA,OAAY;AACZ,IAAA,IAAA,CAAA,KAAA,uBAAY,OAAA,EAAO;AAInB,IAAA,IAAA,CAAA,OAAA,GAAU,CAAA;AACV,IAAA,IAAA,CAAA,QAAA,GAAW,CAAA;AAOjB,IAAA,IAAA,CAAK,OAAA,GAAU,OAAA;AACf,IAAA,IAAA,CAAK,KAAA,GAAQ,KAAA;AACb,IAAA,IAAA,CAAK,OAAA,GAAU,OAAA;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA,EAKA,OAAA,GAAO;AACL,IAAA,IAAI,GAAA;AACJ,IAAA,IAAI,IAAA,CAAK,IAAA,CAAK,MAAA,GAAS,CAAA,EAAG;AACxB,MAAA,GAAA,GAAM,IAAA,CAAK,KAAK,GAAA;AAChB,MAAA,IAAA,CAAK,QAAA,EAAA;AAAA,IACP,CAAA,MAAO;AACL,MAAA,GAAA,GAAM,KAAK,OAAA;AACX,MAAA,IAAA,CAAK,OAAA,EAAA;AAAA,IACP;AACA,IAAA,IAAI,OAAO,GAAA,KAAQ,QAAA,IAAY,GAAA,KAAQ,IAAA,EAAM;AAC3C,MAAA,IAAA,CAAK,KAAA,CAAM,IAAI,GAAG,CAAA;AAAA,IACpB;AACA,IAAA,OAAO,GAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,QAAQ,GAAA,EAAM;AAEZ,IAAA,IAAI,OAAO,GAAA,KAAQ,QAAA,IAAY,GAAA,KAAQ,IAAA,EAAM;AAC3C,MAAA,IAAI,CAAC,IAAA,CAAK,KAAA,CAAM,GAAA,CAAI,GAAG,CAAA,EAAG;AACxB,QAAA,OAAA,CAAQ,KAAK,8DAA8D,CAAA;AAC3E,QAAA;AAAA,MACF;AACA,MAAA,IAAA,CAAK,KAAA,CAAM,OAAO,GAAG,CAAA;AAAA,IACvB;AAEA,IAAA,IAAI,IAAA,CAAK,IAAA,CAAK,MAAA,GAAS,IAAA,CAAK,OAAA,EAAS;AACnC,MAAA,IAAA,CAAK,MAAM,GAAG,CAAA;AACd,MAAA,IAAA,CAAK,IAAA,CAAK,KAAK,GAAG,CAAA;AAAA,IACpB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,KAAA,GAAK;AAEH,IAAA,KAAA,MAAW,GAAA,IAAO,KAAK,IAAA,EAAM;AAC3B,MAAA,IAAI,OAAO,GAAA,KAAQ,QAAA,IAAY,GAAA,KAAQ,IAAA,EAAM;AAE3C,QAAA,KAAA,MAAW,OAAO,GAAA,EAAK;AACrB,UAAA,IAAI;AACF,YAAA,OAAQ,IAAY,GAAG,CAAA;AAAA,UACzB,CAAA,CAAA,MAAQ;AAAA,UAAC;AAAA,QACX;AAAA,MACF;AAAA,IACF;AACA,IAAA,IAAA,CAAK,KAAK,MAAA,GAAS,CAAA;AACnB,IAAA,IAAA,CAAK,OAAA,GAAU,CAAA;AACf,IAAA,IAAA,CAAK,QAAA,GAAW,CAAA;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAA,GAAI;AACF,IAAA,OAAO,KAAK,IAAA,CAAK,MAAA;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA,EAKA,QAAQ,KAAA,EAAa;AACnB,IAAA,MAAM,SAAA,GAAY,KAAK,GAAA,CAAI,KAAA,EAAO,KAAK,KAAA,CAAM,IAAA,CAAK,OAAA,GAAU,GAAG,CAAC,CAAA;AAChE,IAAA,KAAA,IAAS,CAAA,GAAI,GAAG,CAAA,GAAI,SAAA,IAAa,KAAK,IAAA,CAAK,MAAA,GAAS,WAAW,CAAA,EAAA,EAAK;AAClE,MAAA,MAAM,GAAA,GAAM,KAAK,OAAA;AACjB,MAAA,IAAA,CAAK,OAAA,EAAA;AACL,MAAA,IAAA,CAAK,IAAA,CAAK,KAAK,GAAG,CAAA;AAAA,IACpB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,QAAA,GAAQ;AACN,IAAA,OAAO;AAAA,MACL,IAAA,EAAM,KAAK,IAAA,CAAK,MAAA;AAAA,MAChB,SAAS,IAAA,CAAK,OAAA;AAAA,MACd,UAAU,IAAA,CAAK,QAAA;AAAA,MACf,UAAA,EAAY,IAAA,CAAK,OAAA,GAAU,CAAA,GAAK,IAAA,CAAK,YAAY,IAAA,CAAK,OAAA,GAAU,IAAA,CAAK,QAAA,CAAA,GAAa,GAAA,GAAM;AAAA;EAE5F;AACD;MAMY,YAAA,CAAY;AAAA,EAIvB,YAAY,SAAA,EAA4B;AAHhC,IAAA,IAAA,CAAA,KAAA,uBAAY,OAAA,EAAO;AAIzB,IAAA,IAAI,OAAQ,UAAA,CAAmB,oBAAA,KAAyB,WAAA,IAAe,SAAA,EAAW;AAChF,MAAA,IAAA,CAAK,QAAA,GAAW,IAAK,UAAA,CAAmB,oBAAA,CAAqB,SAAS,CAAA;AAAA,IACxE;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,GAAA,CAAI,KAAQ,KAAA,EAAQ;AAClB,IAAA,MAAM,GAAA,GAAM,IAAI,OAAA,CAAQ,KAAK,CAAA;AAC7B,IAAA,IAAA,CAAK,KAAA,CAAM,GAAA,CAAI,GAAA,EAAK,GAAG,CAAA;AAEvB,IAAA,IAAI,KAAK,QAAA,IAAY,OAAO,KAAA,KAAU,QAAA,IAAY,UAAU,IAAA,EAAM;AAChE,MAAA,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,KAAA,EAAiB,GAAG,CAAA;AAAA,IAC7C;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,GAAA,EAAM;AACR,IAAA,MAAM,GAAA,GAAM,IAAA,CAAK,KAAA,CAAM,GAAA,CAAI,GAAG,CAAA;AAC9B,IAAA,IAAI,GAAA,EAAK;AACP,MAAA,MAAM,KAAA,GAAQ,IAAI,KAAA;AAClB,MAAA,IAAI,UAAU,MAAA,EAAW;AAEvB,QAAA,IAAA,CAAK,KAAA,CAAM,OAAO,GAAG,CAAA;AAAA,MACvB;AACA,MAAA,OAAO,KAAA;AAAA,IACT;AACA,IAAA,OAAO,MAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,GAAA,EAAM;AACR,IAAA,MAAM,GAAA,GAAM,IAAA,CAAK,KAAA,CAAM,GAAA,CAAI,GAAG,CAAA;AAC9B,IAAA,IAAI,GAAA,EAAK;AACP,MAAA,MAAM,KAAA,GAAQ,IAAI,KAAA;AAClB,MAAA,IAAI,UAAU,MAAA,EAAW;AACvB,QAAA,IAAA,CAAK,KAAA,CAAM,OAAO,GAAG,CAAA;AACrB,QAAA,OAAO,KAAA;AAAA,MACT;AACA,MAAA,OAAO,IAAA;AAAA,IACT;AACA,IAAA,OAAO,KAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,GAAA,EAAM;AACX,IAAA,OAAO,IAAA,CAAK,KAAA,CAAM,MAAA,CAAO,GAAG,CAAA;AAAA,EAC9B;AACD;MAMY,eAAA,CAAe;AAAA,EAU1B,WAAA,CAAY,MAAA,GAAmC,EAAA,EAAI,MAAA,EAAe;AAP1D,IAAA,IAAA,CAAA,WAAA,uBAAkB,GAAA,EAAG;AACrB,IAAA,IAAA,CAAA,UAAA,uBAAiB,GAAA,EAAG;AAEpB,IAAA,IAAA,CAAA,YAAA,GAAe,KAAA;AACf,IAAA,IAAA,CAAA,UAAA,GAAa,CAAA;AAInB,IAAA,IAAA,CAAK,MAAA,GAAS;AAAA,MACZ,SAAA,EAAW,OAAO,SAAA,IAAa,GAAA;AAAA;AAAA,MAC/B,gBAAA,EAAkB,OAAO,gBAAA,IAAoB,GAAA;AAAA;AAAA,MAC7C,iBAAA,EAAmB,OAAO,iBAAA,IAAqB,GAAA;AAAA;AAAA,MAC/C,UAAA,EAAY,OAAO,UAAA,IAAc,GAAA;AAAA;AAAA,MACjC,MAAA,EAAQ,OAAO,MAAA,IAAU,IAAA;AAAA,MACzB,mBAAA,EAAqB,OAAO,mBAAA,IAAuB,IAAA;AAAA,MACnD,WAAA,EAAa,OAAO,WAAA,IAAe,EAAA;AAAA;AAAA,MACnC,cAAA,EAAgB,OAAO,cAAA,IAAkB,IAAA;AAAA,MACzC,eAAA,EAAiB,MAAA,CAAO,eAAA,KAAoB,MAAK;AAAA,MAAE,CAAA,CAAA;AAAA,MACnD,gBAAA,EAAkB,MAAA,CAAO,gBAAA,KAAqB,MAAK;AAAA,MAAE,CAAA;AAAA;AAEvD,IAAA,IAAA,CAAK,MAAA,GAAS,MAAA;AAEd,IAAA,IAAI,IAAA,CAAK,OAAO,MAAA,EAAQ;AACtB,MAAA,IAAA,CAAK,WAAA,EAAW;AAAA,IAClB;AAGA,IAAA,IAAA,CAAK,qBAAA,EAAqB;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA,EAKA,cAAA,GAAc;AAEZ,IAAA,IAAI,OAAO,MAAA,KAAW,WAAA,IAAgB,MAAA,CAAO,aAAqB,MAAA,EAAQ;AACxE,MAAA,MAAM,MAAA,GAAU,OAAO,WAAA,CAAoB,MAAA;AAC3C,MAAA,OAAO;AAAA,QACL,IAAA,EAAM,MAAA,CAAO,cAAA,GAAiB,IAAA,GAAO,IAAA;AAAA,QACrC,KAAA,EAAO,MAAA,CAAO,eAAA,GAAkB,IAAA,GAAO,IAAA;AAAA,QACvC,UAAA,EAAY,MAAA,CAAO,cAAA,GAAiB,MAAA,CAAO,eAAA;AAAA,QAC3C,IAAA,EAAM;AAAA,UACJ,IAAA,EAAM,MAAA,CAAO,cAAA,GAAiB,IAAA,GAAO,IAAA;AAAA,UACrC,KAAA,EAAO,MAAA,CAAO,eAAA,GAAkB,IAAA,GAAO,IAAA;AAAA,UACvC,KAAA,EAAO,MAAA,CAAO,eAAA,GAAkB,IAAA,GAAO;AAAA;AACxC;IAEL;AAGA,IAAA,OAAO;AAAA,MACL,IAAA,EAAM,CAAA;AAAA,MACN,KAAA,EAAO,KAAK,MAAA,CAAO,SAAA;AAAA,MACnB,UAAA,EAAY,CAAA;AAAA,MACZ,IAAA,EAAM,EAAE,IAAA,EAAM,CAAA,EAAG,OAAO,CAAA,EAAG,KAAA,EAAO,IAAA,CAAK,MAAA,CAAO,SAAA;AAAS;EAE3D;AAAA;AAAA;AAAA;AAAA,EAKA,WAAA,GAAW;AACT,IAAA,MAAM,KAAA,GAAQ,KAAK,cAAA;AAEnB,IAAA,IAAI,KAAA,CAAM,UAAA,GAAa,IAAA,CAAK,MAAA,CAAO,iBAAA,EAAmB;AACpD,MAAA,IAAA,CAAK,MAAA,EAAQ,KAAA,CAAM,uBAAA,EAAyB,KAAK,CAAA;AACjD,MAAA,IAAA,CAAK,MAAA,CAAO,iBAAiB,KAAK,CAAA;AAClC,MAAA,IAAA,CAAK,OAAA,EAAO;AAAA,IACd,CAAA,MAAA,IAAW,KAAA,CAAM,UAAA,GAAa,IAAA,CAAK,OAAO,gBAAA,EAAkB;AAC1D,MAAA,IAAA,CAAK,MAAA,EAAQ,IAAA,CAAK,sBAAA,EAAwB,KAAK,CAAA;AAC/C,MAAA,IAAA,CAAK,MAAA,CAAO,gBAAgB,KAAK,CAAA;AAAA,IACnC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,gBAAA,CACE,IAAA,EACA,OAAA,EACA,KAAA,EACA,OAAA,EAAgB;AAEhB,IAAA,IAAI,CAAC,IAAA,CAAK,MAAA,CAAO,mBAAA,EAAqB;AACpC,MAAA,MAAM,IAAI,MAAM,4BAA4B,CAAA;AAAA,IAC9C;AAEA,IAAA,MAAM,IAAA,GAAO,IAAI,UAAA,CACf,OAAA,EACA,OACA,OAAA,IAAW,IAAA,CAAK,OAAO,WAAW,CAAA;AAGpC,IAAA,IAAA,CAAK,WAAA,CAAY,GAAA,CAAI,IAAA,EAAM,IAAI,CAAA;AAC/B,IAAA,OAAO,IAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,cAAgC,IAAA,EAAY;AAC1C,IAAA,OAAO,IAAA,CAAK,WAAA,CAAY,GAAA,CAAI,IAAI,CAAA;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA,EAKA,eAAA,CACE,MACA,SAAA,EAA4B;AAE5B,IAAA,IAAI,CAAC,IAAA,CAAK,MAAA,CAAO,cAAA,EAAgB;AAC/B,MAAA,MAAM,IAAI,MAAM,8BAA8B,CAAA;AAAA,IAChD;AAEA,IAAA,MAAM,KAAA,GAAQ,IAAI,YAAA,CAAmB,SAAS,CAAA;AAC9C,IAAA,IAAA,CAAK,UAAA,CAAW,GAAA,CAAI,IAAA,EAAM,KAAK,CAAA;AAC/B,IAAA,OAAO,KAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,aAAiD,IAAA,EAAY;AAC3D,IAAA,OAAO,IAAA,CAAK,UAAA,CAAW,GAAA,CAAI,IAAI,CAAA;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA,EAKA,OAAA,GAAO;AACL,IAAA,MAAM,GAAA,GAAM,KAAK,GAAA;AAGjB,IAAA,IAAI,GAAA,GAAM,IAAA,CAAK,UAAA,GAAa,GAAA,EAAM;AAChC,MAAA;AAAA,IACF;AAEA,IAAA,IAAA,CAAK,UAAA,GAAa,GAAA;AAGlB,IAAA,IAAI,OAAQ,UAAA,CAAmB,EAAA,KAAO,UAAA,EAAY;AAC/C,MAAA,UAAA,CAAmB,EAAA,EAAE;AACtB,MAAA,IAAA,CAAK,MAAA,EAAQ,MAAM,qBAAqB,CAAA;AAAA,IAC1C;AAGA,IAAA,KAAA,MAAW,IAAA,IAAQ,IAAA,CAAK,WAAA,CAAY,MAAA,EAAM,EAAI;AAC5C,MAAA,IAAA,CAAK,KAAA,EAAK;AAAA,IACZ;AAEA,IAAA,IAAA,CAAK,MAAA,EAAQ,MAAM,0BAA0B,CAAA;AAAA,EAC/C;AAAA;AAAA;AAAA;AAAA,EAKQ,WAAA,GAAW;AACjB,IAAA,IAAI,KAAK,OAAA,EAAS;AAChB,MAAA,MAAA,CAAO,aAAA,CAAc,KAAK,OAAO,CAAA;AAAA,IACnC;AAEA,IAAA,IAAA,CAAK,OAAA,GAAU,MAAA,CAAO,WAAA,CAAY,MAAK;AACrC,MAAA,IAAA,CAAK,WAAA,EAAW;AAEhB,MAAA,IAAA,CAAK,oBAAA,EAAoB;AAAA,IAC3B,CAAA,EAAG,IAAA,CAAK,MAAA,CAAO,UAAU,CAAA;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA,EAKQ,qBAAA,GAAqB;AAC3B,IAAA,IAAI,KAAK,gBAAA,EAAkB;AACzB,MAAA,MAAA,CAAO,aAAA,CAAc,KAAK,gBAAgB,CAAA;AAAA,IAC5C;AAGA,IAAA,IAAA,CAAK,gBAAA,GAAmB,MAAA,CAAO,WAAA,CAAY,MAAK;AAC9C,MAAA,MAAM,KAAA,GAAQ,KAAK,cAAA;AACnB,MAAA,IAAI,KAAA,CAAM,UAAA,GAAa,IAAA,CAAK,MAAA,CAAO,gBAAA,EAAkB;AACnD,QAAA,IAAA,CAAK,cAAA,EAAc;AAAA,MACrB;AAAA,IACF,GAAG,GAAK,CAAA;AAAA,EACV;AAAA;AAAA;AAAA;AAAA,EAKQ,oBAAA,GAAoB;AAC1B,IAAA,KAAA,MAAW,CAAC,IAAA,EAAM,IAAI,CAAA,IAAK,KAAK,WAAA,EAAa;AAC3C,MAAA,MAAM,KAAA,GAAQ,KAAK,QAAA;AAEnB,MAAA,IAAI,KAAA,CAAM,UAAA,GAAa,EAAA,IAAM,KAAA,CAAM,OAAO,EAAA,EAAI;AAC5C,QAAA,MAAM,QAAA,GAAW,IAAA,CAAK,KAAA,CAAM,KAAA,CAAM,OAAO,GAAG,CAAA;AAC5C,QAAA,KAAA,IAAS,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,QAAA,EAAU,CAAA,EAAA,EAAK;AACjC,UAAA,IAAA,CAAK,OAAA,EAAO;AAAA,QACd;AACA,QAAA,IAAA,CAAK,QAAQ,KAAA,CAAM,CAAA,aAAA,EAAgB,IAAI,CAAA,SAAA,EAAY,QAAQ,CAAA,CAAE,CAAA;AAAA,MAC/D;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKQ,cAAA,GAAc;AAEpB,IAAA,KAAA,MAAW,IAAA,IAAQ,IAAA,CAAK,WAAA,CAAY,MAAA,EAAM,EAAI;AAC5C,MAAA,MAAM,KAAA,GAAQ,KAAK,QAAA;AACnB,MAAA,IAAI,KAAA,CAAM,OAAO,EAAA,EAAI;AACnB,QAAA,IAAA,CAAK,KAAA,EAAK;AAAA,MACZ;AAAA,IACF;AAGA,IAAA,IAAA,CAAK,OAAA,EAAO;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKA,cAAiB,GAAA,EAAQ;AAEvB,IAAA,IAAI,GAAA,CAAI,SAAS,GAAA,EAAO;AACtB,MAAA,IAAA,CAAK,MAAA,EAAQ,KAAA,CAAM,CAAA,sBAAA,EAAyB,GAAA,CAAI,MAAM,CAAA,MAAA,CAAQ,CAAA;AAAA,IAChE;AAGA,IAAA,OAAO,IAAI,MAAA,CAAO,CAAA,IAAA,KAAQ,IAAA,KAAS,MAAA,IAAa,SAAS,IAAI,CAAA;AAAA,EAC/D;AAAA;AAAA;AAAA;AAAA,EAKA,eAAiC,GAAA,EAAM;AAErC,IAAA,MAAM,YAAY,EAAA;AAElB,IAAA,KAAA,MAAW,OAAO,GAAA,EAAK;AACrB,MAAA,IAAI,OAAO,SAAA,CAAU,cAAA,CAAe,IAAA,CAAK,GAAA,EAAK,GAAG,CAAA,EAAG;AAClD,QAAA,MAAM,KAAA,GAAQ,IAAI,GAAG,CAAA;AACrB,QAAA,IAAI,UAAU,MAAA,EAAW;AACvB,UAAA,SAAA,CAAU,GAAG,CAAA,GAAI,KAAA;AAAA,QACnB;AAAA,MACF;AAAA,IACF;AAEA,IAAA,OAAO,SAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,eAAA,CACJ,IAAA,EACA,SAAA,EACA,YAAY,GAAA,EAAI;AAEhB,IAAA,MAAM,UAAe,EAAA;AAErB,IAAA,KAAA,IAAS,IAAI,CAAA,EAAG,CAAA,GAAI,IAAA,CAAK,MAAA,EAAQ,KAAK,SAAA,EAAW;AAC/C,MAAA,MAAM,KAAA,GAAQ,IAAA,CAAK,KAAA,CAAM,CAAA,EAAG,IAAI,SAAS,CAAA;AACzC,MAAA,MAAM,MAAA,GAAS,MAAM,SAAA,CAAU,KAAK,CAAA;AACpC,MAAA,OAAA,CAAQ,KAAK,MAAM,CAAA;AAGnB,MAAA,IAAI,CAAA,IAAK,SAAA,GAAY,CAAA,CAAA,KAAO,CAAA,EAAG;AAC7B,QAAA,IAAA,CAAK,WAAA,EAAW;AAAA,MAClB;AAAA,IACF;AAEA,IAAA,OAAO,OAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,iBAAoB,MAAA,EAA4B;AAC9C,IAAA,IAAI,MAAA;AACJ,IAAA,IAAI,OAAA,GAAU,KAAA;AACd,IAAA,IAAI,OAAA;AAEJ,IAAA,OAAO,YAAW;AAChB,MAAA,IAAI,WAAW,MAAA,EAAW;AACxB,QAAA,OAAO,MAAA;AAAA,MACT;AAEA,MAAA,IAAI,WAAW,OAAA,EAAS;AACtB,QAAA,OAAO,OAAA;AAAA,MACT;AAEA,MAAA,OAAA,GAAU,IAAA;AACV,MAAA,OAAA,GAAU,QAAQ,OAAA,CAAQ,MAAA,EAAQ,CAAA,CAAE,KAAK,CAAA,MAAA,KAAS;AAChD,QAAA,MAAA,GAAS,MAAA;AACT,QAAA,OAAA,GAAU,KAAA;AACV,QAAA,OAAA,GAAU,MAAA;AACV,QAAA,OAAO,MAAA;AAAA,MACT,CAAC,CAAA;AAED,MAAA,OAAO,OAAA;AAAA,IACT,CAAA;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,QAAA,GAAQ;AAKN,IAAA,OAAO;AAAA,MACL,MAAA,EAAQ,KAAK,cAAA,EAAc;AAAA,MAC3B,WAAA,EAAa,KAAA,CAAM,IAAA,CAAK,IAAA,CAAK,WAAA,CAAY,OAAA,EAAS,CAAA,CAAE,GAAA,CAAI,CAAC,CAAC,IAAA,EAAM,IAAI,CAAA,MAAO;AAAA,QACzE,IAAA;AAAA,QACA,IAAA,EAAM,KAAK,IAAA;AAAI,OAChB,CAAC,CAAA;AAAA,MACF,YAAY,KAAA,CAAM,IAAA,CAAK,IAAA,CAAK,UAAA,CAAW,MAAM;AAAA;EAEjD;AAAA;AAAA;AAAA;AAAA,EAKA,OAAA,GAAO;AACL,IAAA,IAAI,KAAK,OAAA,EAAS;AAChB,MAAA,aAAA,CAAc,KAAK,OAAO,CAAA;AAC1B,MAAA,IAAA,CAAK,OAAA,GAAU,MAAA;AAAA,IACjB;AAEA,IAAA,IAAI,KAAK,gBAAA,EAAkB;AACzB,MAAA,aAAA,CAAc,KAAK,gBAAgB,CAAA;AACnC,MAAA,IAAA,CAAK,gBAAA,GAAmB,MAAA;AAAA,IAC1B;AAGA,IAAA,KAAA,MAAW,IAAA,IAAQ,IAAA,CAAK,WAAA,CAAY,MAAA,EAAM,EAAI;AAC5C,MAAA,IAAA,CAAK,KAAA,EAAK;AAAA,IACZ;AACA,IAAA,IAAA,CAAK,YAAY,KAAA;AAGjB,IAAA,IAAA,CAAK,WAAW,KAAA;AAEhB,IAAA,IAAA,CAAK,YAAA,GAAe,KAAA;AAAA,EACtB;AACD;MAMY,kBAAA,CAAkB;AAAA,EAA/B,WAAA,GAAA;AACU,IAAA,IAAA,CAAA,YAIH;AACG,IAAA,IAAA,CAAA,YAAA,GAAe,GAAA;AACf,IAAA,IAAA,CAAA,aAAA,GAAgB,EAAA;AAChB,IAAA,IAAA,CAAA,aAAA,GAAgB,GAAA;AAEhB,IAAA,IAAA,CAAA,YAAA,uBAAmB,GAAA,EAAG;AAAA,EAmIhC;AAAA;AAAA;AAAA;AAAA,EA9HE,KAAA,GAAK;AACH,IAAA,IAAI,IAAA,CAAK,KAAA;AAAO,MAAA;AAEhB,IAAA,IAAA,CAAK,KAAA,GAAQ,MAAA,CAAO,WAAA,CAAY,MAAK;AACnC,MAAA,IAAA,CAAK,YAAA,EAAY;AACjB,MAAA,IAAA,CAAK,gBAAA,EAAgB;AAAA,IACvB,CAAA,EAAG,KAAK,aAAa,CAAA;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAA,GAAI;AACF,IAAA,IAAI,KAAK,KAAA,EAAO;AACd,MAAA,MAAA,CAAO,aAAA,CAAc,KAAK,KAAK,CAAA;AAC/B,MAAA,IAAA,CAAK,KAAA,GAAQ,MAAA;AAAA,IACf;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKQ,YAAA,GAAY;AAClB,IAAA,MAAM,KAAA,GAAQ,KAAK,YAAA;AAEnB,IAAA,IAAA,CAAK,UAAU,IAAA,CAAK;AAAA,MAClB,SAAA,EAAW,KAAK,GAAA,EAAG;AAAA,MACnB,UAAU,KAAA,CAAM,QAAA;AAAA,MAChB,OAAA,EAAS,KAAK,YAAA;AAAY,KAC3B,CAAA;AAGD,IAAA,IAAI,IAAA,CAAK,SAAA,CAAU,MAAA,GAAS,IAAA,CAAK,YAAA,EAAc;AAC7C,MAAA,IAAA,CAAK,UAAU,KAAA;IACjB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKQ,gBAAA,GAAgB;AACtB,IAAA,IAAI,IAAA,CAAK,UAAU,MAAA,GAAS,EAAA;AAAI,MAAA;AAGhC,IAAA,MAAM,MAAA,GAAS,IAAA,CAAK,SAAA,CAAU,KAAA,CAAM,GAAG,CAAA;AACvC,IAAA,MAAM,MAAA,GAAS,OAAO,MAAA,CAAO,MAAA,GAAS,CAAC,CAAA,CAAE,QAAA,GAAW,MAAA,CAAO,CAAC,CAAA,CAAE,QAAA;AAE9D,IAAA,IAAI,MAAA,GAAS,KAAK,aAAA,EAAe;AAC/B,MAAA,OAAA,CAAQ,KAAK,CAAA,gCAAA,EAAmC,MAAA,CAAO,OAAA,CAAQ,CAAC,CAAC,CAAA,SAAA,CAAW,CAAA;AAAA,IAC9E;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKQ,YAAA,GAAY;AAClB,IAAA,IAAI,OAAO,MAAA,KAAW,WAAA,IAAgB,MAAA,CAAO,aAAqB,MAAA,EAAQ;AACxE,MAAA,MAAM,MAAA,GAAU,OAAO,WAAA,CAAoB,MAAA;AAC3C,MAAA,OAAO,EAAE,QAAA,EAAU,MAAA,CAAO,cAAA,GAAiB,OAAO,IAAA,EAAI;AAAA,IACxD;AAEA,IAAA,OAAO,EAAE,UAAU,CAAA;EACrB;AAAA;AAAA;AAAA;AAAA,EAKQ,YAAA,GAAY;AAElB,IAAA,OAAO,KAAK,YAAA,CAAa,IAAA;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA,EAKA,YAAY,EAAA,EAAU;AACpB,IAAA,MAAM,KAAA,GAAQ,IAAA,CAAK,YAAA,CAAa,GAAA,CAAI,EAAE,CAAA,IAAK,CAAA;AAC3C,IAAA,IAAA,CAAK,YAAA,CAAa,GAAA,CAAI,EAAA,EAAI,KAAA,GAAQ,CAAC,CAAA;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA,EAKA,cAAc,EAAA,EAAU;AACtB,IAAA,MAAM,KAAA,GAAQ,IAAA,CAAK,YAAA,CAAa,GAAA,CAAI,EAAE,CAAA,IAAK,CAAA;AAC3C,IAAA,IAAI,SAAS,CAAA,EAAG;AACd,MAAA,IAAA,CAAK,YAAA,CAAa,OAAO,EAAE,CAAA;AAAA,IAC7B,CAAA,MAAO;AACL,MAAA,IAAA,CAAK,YAAA,CAAa,GAAA,CAAI,EAAA,EAAI,KAAA,GAAQ,CAAC,CAAA;AAAA,IACrC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,SAAA,GAAS;AAKP,IAAA,MAAM,gBAA0B,EAAA;AAGhC,IAAA,KAAA,MAAW,CAAC,EAAA,EAAI,KAAK,CAAA,IAAK,KAAK,YAAA,EAAc;AAC3C,MAAA,IAAI,QAAQ,GAAA,EAAK;AACf,QAAA,aAAA,CAAc,IAAA,CAAK,CAAA,OAAA,EAAU,EAAE,CAAA,EAAA,EAAK,KAAK,CAAA,UAAA,CAAY,CAAA;AAAA,MACvD;AAAA,IACF;AAEA,IAAA,OAAO;AAAA,MACL,SAAA,EAAW,IAAA,CAAK,SAAA,CAAU,KAAA,CAAM,GAAG,CAAA;AAAA,MACnC,aAAA;AAAA,MACA,cAAA,EAAgB,aAAA,CAAc,MAAA,GAAS,CAAA,GACnC,mDAAA,GACA;AAAA;EAER;AAAA;AAAA;AAAA;AAAA,EAKA,OAAA,GAAO;AACL,IAAA,IAAA,CAAK,IAAA,EAAI;AACT,IAAA,IAAA,CAAK,YAAY,EAAA;AACjB,IAAA,IAAA,CAAK,aAAa,KAAA;EACpB;AACD;AAMK,SAAU,qBAAA,CACd,QACA,MAAA,EAAe;AAEf,EAAA,OAAO,IAAI,eAAA,CAAgB,MAAA,EAAQ,MAAM,CAAA;AAC3C;SAEgB,wBAAA,GAAwB;AACtC,EAAA,OAAO,IAAI,kBAAA,EAAkB;AAC/B;AAMA,sBAAe;AAAA,EACb,eAAA;AAAA,EACA,kBAAA;AAAA,EACA,UAAA;AAAA,EACA,YAAA;AAAA,EACA,qBAAA;AAAA,EACA;;;;;"}