{"version":3,"file":"batch-processor.js","sources":["../../src/utils/batch-processor.ts"],"sourcesContent":["/**\r\n * 批量处理和并发控制模块\r\n * 优化大量操作的性能，控制并发数量，防止系统过载\r\n */\r\n\r\nexport interface BatchOptions {\r\n  batchSize?: number\r\n  concurrency?: number\r\n  delay?: number\r\n  onProgress?: (progress: number, total: number) => void\r\n  onError?: (error: Error, item: any, index: number) => void\r\n}\r\n\r\nexport interface QueueOptions {\r\n  concurrency?: number\r\n  timeout?: number\r\n  retries?: number\r\n  retryDelay?: number\r\n}\r\n\r\n/**\r\n * 批量处理器\r\n */\r\nexport class BatchProcessor {\r\n  /**\r\n   * 批量处理数组 - 优化内存使用\r\n   */\r\n  static async processInBatches<T, R>(\r\n    items: T[],\r\n    processor: (batch: T[]) => Promise<R[]>,\r\n    options: BatchOptions = {}\r\n  ): Promise<R[]> {\r\n    const {\r\n      batchSize = Math.min(100, Math.max(10, Math.floor(items.length / 10))), // 动态调整批次大小\r\n      delay = 0,\r\n      onProgress\r\n    } = options\r\n\r\n    const results: R[] = []\r\n    const totalBatches = Math.ceil(items.length / batchSize)\r\n\r\n    for (let i = 0; i < totalBatches; i++) {\r\n      const start = i * batchSize\r\n      const end = Math.min(start + batchSize, items.length)\r\n      const batch = items.slice(start, end)\r\n\r\n      try {\r\n        const batchResults = await processor(batch)\r\n        results.push(...batchResults)\r\n\r\n        if (onProgress) {\r\n          onProgress(end, items.length)\r\n        }\r\n\r\n        if (delay > 0 && i < totalBatches - 1) {\r\n          await this.sleep(delay)\r\n        }\r\n      } catch (error) {\r\n        throw new Error(`Batch processing failed at batch ${i + 1}: ${error}`)\r\n      }\r\n    }\r\n\r\n    return results\r\n  }\r\n\r\n  /**\r\n   * 并发处理数组\r\n   */\r\n  static async processConcurrently<T, R>(\r\n    items: T[],\r\n    processor: (item: T, index: number) => Promise<R>,\r\n    options: BatchOptions = {}\r\n  ): Promise<R[]> {\r\n    const {\r\n      concurrency = 5,\r\n      onProgress,\r\n      onError\r\n    } = options\r\n\r\n    const results: R[] = Array.from({length: items.length})\r\n    let completed = 0\r\n    let currentIndex = 0\r\n\r\n    const workers: Promise<void>[] = []\r\n\r\n    const worker = async (): Promise<void> => {\r\n      while (currentIndex < items.length) {\r\n        const index = currentIndex++\r\n        const item = items[index]\r\n\r\n        try {\r\n          results[index] = await processor(item, index)\r\n        } catch (error) {\r\n          if (onError) {\r\n            onError(error as Error, item, index)\r\n          } else {\r\n            throw error\r\n          }\r\n        }\r\n\r\n        completed++\r\n        if (onProgress) {\r\n          onProgress(completed, items.length)\r\n        }\r\n      }\r\n    }\r\n\r\n    // 创建工作协程\r\n    for (let i = 0; i < Math.min(concurrency, items.length); i++) {\r\n      workers.push(worker())\r\n    }\r\n\r\n    await Promise.all(workers)\r\n\r\n    return results\r\n  }\r\n\r\n  /**\r\n   * 分块处理大数组\r\n   */\r\n  static async* chunk<T>(\r\n    items: T[],\r\n    chunkSize: number\r\n  ): AsyncGenerator<T[], void, unknown> {\r\n    for (let i = 0; i < items.length; i += chunkSize) {\r\n      yield items.slice(i, i + chunkSize)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 延迟执行\r\n   */\r\n  private static sleep(ms: number): Promise<void> {\r\n    return new Promise(resolve => setTimeout(resolve, ms))\r\n  }\r\n}\r\n\r\n/**\r\n * 任务队列 - 控制并发执行\r\n */\r\nexport class TaskQueue<T = any> {\r\n  private queue: Array<{\r\n    task: () => Promise<T>\r\n    resolve: (value: T) => void\r\n    reject: (error: Error) => void\r\n  }> = []\r\n  private running = 0\r\n  private paused = false\r\n  private options: Required<QueueOptions>\r\n\r\n  constructor(options: QueueOptions = {}) {\r\n    this.options = {\r\n      concurrency: options.concurrency ?? 3,\r\n      timeout: options.timeout ?? 30000,\r\n      retries: options.retries ?? 3,\r\n      retryDelay: options.retryDelay ?? 1000\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 添加任务到队列\r\n   */\r\n  add<R = T>(task: () => Promise<R>): Promise<R> {\r\n    return new Promise((resolve, reject) => {\r\n      this.queue.push({\r\n        task: task as any,\r\n        resolve: resolve as any,\r\n        reject\r\n      })\r\n\r\n      if (!this.paused) {\r\n        this.processNext()\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 批量添加任务\r\n   */\r\n  addAll<R = T>(tasks: Array<() => Promise<R>>): Promise<R[]> {\r\n    const promises = tasks.map(task => this.add(task))\r\n    return Promise.all(promises)\r\n  }\r\n\r\n  /**\r\n   * 暂停队列\r\n   */\r\n  pause(): void {\r\n    this.paused = true\r\n  }\r\n\r\n  /**\r\n   * 恢复队列\r\n   */\r\n  resume(): void {\r\n    this.paused = false\r\n    this.processNext()\r\n  }\r\n\r\n  /**\r\n   * 清空队列\r\n   */\r\n  clear(): void {\r\n    this.queue = []\r\n  }\r\n\r\n  /**\r\n   * 获取队列状态\r\n   */\r\n  getStatus(): {\r\n    pending: number\r\n    running: number\r\n    paused: boolean\r\n  } {\r\n    return {\r\n      pending: this.queue.length,\r\n      running: this.running,\r\n      paused: this.paused\r\n    }\r\n  }\r\n\r\n  private async processNext(): Promise<void> {\r\n    if (this.paused || this.running >= this.options.concurrency || this.queue.length === 0) {\r\n      return\r\n    }\r\n\r\n    const item = this.queue.shift()\r\n    if (!item) return\r\n\r\n    this.running++\r\n\r\n    try {\r\n      const result = await this.executeWithRetry(item.task)\r\n      item.resolve(result)\r\n    } catch (error) {\r\n      item.reject(error as Error)\r\n    } finally {\r\n      this.running--\r\n      this.processNext()\r\n    }\r\n  }\r\n\r\n  private async executeWithRetry(task: () => Promise<T>): Promise<T> {\r\n    let lastError: Error | undefined\r\n\r\n    for (let i = 0; i < this.options.retries; i++) {\r\n      try {\r\n        return await this.executeWithTimeout(task)\r\n      } catch (error) {\r\n        lastError = error as Error\r\n        if (i < this.options.retries - 1) {\r\n          await this.sleep(this.options.retryDelay)\r\n        }\r\n      }\r\n    }\r\n\r\n    throw lastError || new Error('Task failed')\r\n  }\r\n\r\n  private executeWithTimeout(task: () => Promise<T>): Promise<T> {\r\n    return new Promise((resolve, reject) => {\r\n      const timer = setTimeout(\r\n        () => reject(new Error('Task timeout')),\r\n        this.options.timeout\r\n      )\r\n\r\n      task()\r\n        .then(result => {\r\n          clearTimeout(timer)\r\n          resolve(result)\r\n        })\r\n        .catch(error => {\r\n          clearTimeout(timer)\r\n          reject(error)\r\n        })\r\n    })\r\n  }\r\n\r\n  private sleep(ms: number): Promise<void> {\r\n    return new Promise(resolve => setTimeout(resolve, ms))\r\n  }\r\n}\r\n\r\n/**\r\n * 限流器 - 控制操作频率\r\n */\r\nexport class RateLimiter {\r\n  private tokens: number\r\n  private lastRefill: number\r\n  private queue: Array<() => void> = []\r\n\r\n  constructor(\r\n    private maxTokens: number,\r\n    private refillRate: number // 每秒补充的令牌数\r\n  ) {\r\n    this.tokens = maxTokens\r\n    this.lastRefill = Date.now()\r\n    this.startRefillTimer()\r\n  }\r\n\r\n  /**\r\n   * 获取令牌\r\n   */\r\n  async acquire(count = 1): Promise<void> {\r\n    this.refill()\r\n\r\n    if (this.tokens >= count) {\r\n      this.tokens -= count\r\n      return\r\n    }\r\n\r\n    // 等待令牌\r\n    return new Promise(resolve => {\r\n      this.queue.push(() => {\r\n        this.tokens -= count\r\n        resolve()\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 尝试获取令牌（非阻塞）\r\n   */\r\n  tryAcquire(count = 1): boolean {\r\n    this.refill()\r\n\r\n    if (this.tokens >= count) {\r\n      this.tokens -= count\r\n      return true\r\n    }\r\n\r\n    return false\r\n  }\r\n\r\n  private refill(): void {\r\n    const now = Date.now()\r\n    const elapsed = (now - this.lastRefill) / 1000\r\n    const tokensToAdd = Math.floor(elapsed * this.refillRate)\r\n\r\n    if (tokensToAdd > 0) {\r\n      this.tokens = Math.min(this.maxTokens, this.tokens + tokensToAdd)\r\n      this.lastRefill = now\r\n      this.processQueue()\r\n    }\r\n  }\r\n\r\n  private processQueue(): void {\r\n    while (this.queue.length > 0 && this.tokens > 0) {\r\n      const task = this.queue.shift()\r\n      if (task) task()\r\n    }\r\n  }\r\n\r\n  private startRefillTimer(): void {\r\n    setInterval(() => {\r\n      this.refill()\r\n    }, 1000 / this.refillRate)\r\n  }\r\n}\r\n\r\n/**\r\n * 数据流处理器 - 处理大量数据流\r\n */\r\nexport class StreamProcessor<T, R> {\r\n  private buffer: T[] = []\r\n  private processing = false\r\n\r\n  constructor(\r\n    private processor: (items: T[]) => Promise<R[]>,\r\n    private options: {\r\n      bufferSize?: number\r\n      flushInterval?: number\r\n      onFlush?: (results: R[]) => void\r\n    } = {}\r\n  ) {\r\n    const { flushInterval = 1000 } = options\r\n\r\n    // 定期刷新缓冲区\r\n    setInterval(() => {\r\n      this.flush()\r\n    }, flushInterval)\r\n  }\r\n\r\n  /**\r\n   * 添加数据到流\r\n   */\r\n  async add(item: T): Promise<void> {\r\n    this.buffer.push(item)\r\n\r\n    const bufferSize = this.options.bufferSize ?? 100\r\n    if (this.buffer.length >= bufferSize) {\r\n      await this.flush()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 批量添加数据\r\n   */\r\n  async addBatch(items: T[]): Promise<void> {\r\n    this.buffer.push(...items)\r\n\r\n    const bufferSize = this.options.bufferSize ?? 100\r\n    if (this.buffer.length >= bufferSize) {\r\n      await this.flush()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 刷新缓冲区\r\n   */\r\n  async flush(): Promise<void> {\r\n    if (this.processing || this.buffer.length === 0) {\r\n      return\r\n    }\r\n\r\n    this.processing = true\r\n    const items = this.buffer.splice(0, this.buffer.length)\r\n\r\n    try {\r\n      const results = await this.processor(items)\r\n      if (this.options.onFlush) {\r\n        this.options.onFlush(results)\r\n      }\r\n    } finally {\r\n      this.processing = false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取缓冲区状态\r\n   */\r\n  getStatus(): {\r\n    bufferSize: number\r\n    processing: boolean\r\n  } {\r\n    return {\r\n      bufferSize: this.buffer.length,\r\n      processing: this.processing\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 并发控制装饰器\r\n */\r\nexport function Concurrent(limit = 1) {\r\n  const queue = new TaskQueue({ concurrency: limit })\r\n\r\n  return function (\r\n    target: any,\r\n    propertyKey: string,\r\n    descriptor: PropertyDescriptor\r\n  ) {\r\n    const originalMethod = descriptor.value\r\n\r\n    descriptor.value = async function (...args: any[]) {\r\n      return queue.add(() => originalMethod.apply(this, args))\r\n    }\r\n\r\n    return descriptor\r\n  }\r\n}\r\n\r\n/**\r\n * 限流装饰器\r\n */\r\nexport function RateLimit(maxCalls: number, perSeconds: number) {\r\n  const limiter = new RateLimiter(maxCalls, maxCalls / perSeconds)\r\n\r\n  return function (\r\n    target: any,\r\n    propertyKey: string,\r\n    descriptor: PropertyDescriptor\r\n  ) {\r\n    const originalMethod = descriptor.value\r\n\r\n    descriptor.value = async function (...args: any[]) {\r\n      await limiter.acquire()\r\n      return originalMethod.apply(this, args)\r\n    }\r\n\r\n    return descriptor\r\n  }\r\n}"],"names":[],"mappings":"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"}