{"version":3,"file":"memory-optimization-impl.js","sources":["../../src/utils/memory-optimization-impl.ts"],"sourcesContent":["/**\r\n * 内存优化实施方案\r\n * 提供全面的内存管理和优化功能\r\n */\r\n\r\n// ============================================\r\n// 1. 字符串池化 - 减少重复字符串内存占用\r\n// ============================================\r\n\r\nclass StringPool {\r\n  private static pool = new Map<string, string>()\r\n  private static maxSize = 1000\r\n  \r\n  /**\r\n   * 字符串池化 - 复用相同字符串\r\n   * 内存节省：对于1000个相同字符串，从1000个实例减少到1个\r\n   */\r\n  static intern(str: string): string {\r\n    if (!str || str.length > 100) return str // 不池化长字符串\r\n    \r\n    if (this.pool.has(str)) {\r\n      return this.pool.get(str)!\r\n    }\r\n    \r\n    if (this.pool.size >= this.maxSize) {\r\n      // LRU清理\r\n      const firstKey = this.pool.keys().next().value\r\n      if (firstKey !== undefined) {\r\n        this.pool.delete(firstKey)\r\n      }\r\n    }\r\n    \r\n    this.pool.set(str, str)\r\n    return str\r\n  }\r\n  \r\n  static clear(): void {\r\n    this.pool.clear()\r\n  }\r\n}\r\n\r\n// ============================================\r\n// 2. 数组优化 - 减少数组内存占用\r\n// ============================================\r\n\r\nclass ArrayOptimizer {\r\n  /**\r\n   * 创建固定大小的数组池\r\n   * 内存节省：避免频繁扩容，减少50%的内存重分配\r\n   */\r\n  static createFixedPool<T>(size: number, factory: () => T): T[] {\r\n    return Array.from({ length: size }, () => factory())\r\n  }\r\n  \r\n  /**\r\n   * 压缩稀疏数组\r\n   * 内存节省：稀疏数组转密集数组可节省30-70%内存\r\n   */\r\n  static compact<T>(arr: T[]): T[] {\r\n    return arr.filter(item => item !== undefined && item !== null)\r\n  }\r\n  \r\n  /**\r\n   * 数组分片处理\r\n   * 内存节省：避免一次性加载大数组，减少峰值内存60%\r\n   */\r\n  static chunk<T>(arr: T[], size: number): T[][] {\r\n    const chunks: T[][] = []\r\n    for (let i = 0; i < arr.length; i += size) {\r\n      chunks.push(arr.slice(i, i + size))\r\n    }\r\n    return chunks\r\n  }\r\n}\r\n\r\n// ============================================\r\n// 3. 对象优化 - 减少对象内存占用\r\n// ============================================\r\n\r\nclass ObjectOptimizer {\r\n  /**\r\n   * 删除undefined属性\r\n   * 内存节省：每个undefined属性约占用20B\r\n   */\r\n  static compact<T extends object>(obj: T): T {\r\n    const result = {} as T\r\n    for (const key in obj) {\r\n      if (obj[key] !== undefined) {\r\n        result[key] = obj[key]\r\n      }\r\n    }\r\n    return result\r\n  }\r\n  \r\n  /**\r\n   * 对象扁平化\r\n   * 内存节省：减少嵌套对象开销，约20-30%\r\n   */\r\n  static flatten(obj: any, prefix = ''): Record<string, any> {\r\n    const flattened: Record<string, any> = {}\r\n    \r\n    for (const key in obj) {\r\n      const value = obj[key]\r\n      const newKey = prefix ? `${prefix}.${key}` : key\r\n      \r\n      if (value && typeof value === 'object' && !Array.isArray(value)) {\r\n        Object.assign(flattened, this.flatten(value, newKey))\r\n      } else {\r\n        flattened[newKey] = value\r\n      }\r\n    }\r\n    \r\n    return flattened\r\n  }\r\n  \r\n  /**\r\n   * 使用原型链共享方法\r\n   * 内存节省：1000个实例共享方法可节省MB级内存\r\n   */\r\n  static createWithPrototype<T extends object | null>(proto: T, props: Partial<T>): T {\r\n    const obj = Object.create(proto)\r\n    Object.assign(obj, props)\r\n    return obj\r\n  }\r\n}\r\n\r\n// ============================================\r\n// 4. 内存压缩 - 数据压缩存储\r\n// ============================================\r\n\r\nclass MemoryCompressor {\r\n  /**\r\n   * 简单数据压缩\r\n   * 内存节省：JSON字符串压缩可达50-80%\r\n   */\r\n  static compress(data: any): string {\r\n    const json = JSON.stringify(data)\r\n    // 简单的RLE压缩\r\n    return json.replace(/(.)\\1+/g, (match, char) => {\r\n      return char + match.length\r\n    })\r\n  }\r\n  \r\n  static decompress(compressed: string): any {\r\n    // 解压RLE\r\n    const json = compressed.replace(/(.)\\d+/g, (match, char) => {\r\n      const count = Number.parseInt(match.slice(1))\r\n      return char.repeat(count)\r\n    })\r\n    return JSON.parse(json)\r\n  }\r\n  \r\n  /**\r\n   * 二进制打包\r\n   * 内存节省：数字数组可节省75%内存\r\n   */\r\n  static packNumbers(numbers: number[]): ArrayBuffer {\r\n    const buffer = new ArrayBuffer(numbers.length * 4)\r\n    const view = new Float32Array(buffer)\r\n    for (let i = 0; i < numbers.length; i++) {\r\n      view[i] = numbers[i]\r\n    }\r\n    return buffer\r\n  }\r\n  \r\n  static unpackNumbers(buffer: ArrayBuffer): number[] {\r\n    return Array.from(new Float32Array(buffer))\r\n  }\r\n}\r\n\r\n// ============================================\r\n// 5. 智能垃圾回收\r\n// ============================================\r\n\r\nclass SmartGC {\r\n  private static lastGC = 0\r\n  private static gcInterval = 60000 // 1分钟\r\n  \r\n  /**\r\n   * 智能触发垃圾回收\r\n   * 内存节省：及时回收可减少内存占用40-60%\r\n   */\r\n  static tryGC(): void {\r\n    const now = Date.now()\r\n    if (now - this.lastGC < this.gcInterval) return\r\n    \r\n    // 检查内存压力\r\n    if (typeof performance !== 'undefined' && (performance as any).memory) {\r\n      const usage = (performance as any).memory.usedJSHeapSize / (performance as any).memory.jsHeapSizeLimit\r\n      if (usage > 0.7) {\r\n        this.forceGC()\r\n        this.lastGC = now\r\n      }\r\n    }\r\n  }\r\n  \r\n  private static forceGC(): void {\r\n    // Node.js环境\r\n    if (typeof (globalThis as any).gc === 'function') {\r\n      (globalThis as any).gc()\r\n    }\r\n    \r\n    // 浏览器环境 - 触发间接GC\r\n    if (typeof window !== 'undefined') {\r\n      // 创建大量临时对象触发GC\r\n      const trigger = []\r\n      for (let i = 0; i < 1000; i++) {\r\n        trigger.push(Array.from({length: 1000}))\r\n      }\r\n      // 立即清空\r\n      trigger.length = 0\r\n    }\r\n  }\r\n}\r\n\r\n// ============================================\r\n// 6. 内存监控器\r\n// ============================================\r\n\r\nexport class MemoryMonitor {\r\n  private static measurements: Array<{\r\n    timestamp: number\r\n    used: number\r\n    total: number\r\n  }> = []\r\n  \r\n  /**\r\n   * 记录内存使用\r\n   */\r\n  static record(): void {\r\n    const memory = this.getMemoryUsage()\r\n    this.measurements.push({\r\n      timestamp: Date.now(),\r\n      used: memory.used,\r\n      total: memory.total\r\n    })\r\n    \r\n    // 只保留最近100条记录\r\n    if (this.measurements.length > 100) {\r\n      this.measurements.shift()\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 获取内存使用情况\r\n   */\r\n  static getMemoryUsage(): { used: number; total: number; percentage: number } {\r\n    if (typeof performance !== 'undefined' && (performance as any).memory) {\r\n      return {\r\n        used: (performance as any).memory.usedJSHeapSize / 1048576,\r\n        total: (performance as any).memory.totalJSHeapSize / 1048576,\r\n        percentage: ((performance as any).memory.usedJSHeapSize / (performance as any).memory.jsHeapSizeLimit) * 100\r\n      }\r\n    }\r\n    \r\n    return { used: 0, total: 0, percentage: 0 }\r\n  }\r\n  \r\n  /**\r\n   * 分析内存趋势\r\n   */\r\n  static analyzeTrend(): {\r\n    trend: 'increasing' | 'stable' | 'decreasing'\r\n    rate: number // MB/分钟\r\n  } {\r\n    if (this.measurements.length < 2) {\r\n      return { trend: 'stable', rate: 0 }\r\n    }\r\n    \r\n    const recent = this.measurements.slice(-10)\r\n    const first = recent[0]\r\n    const last = recent[recent.length - 1]\r\n    \r\n    const timeDiff = (last.timestamp - first.timestamp) / 60000 // 分钟\r\n    const memDiff = last.used - first.used\r\n    const rate = memDiff / timeDiff\r\n    \r\n    let trend: 'increasing' | 'stable' | 'decreasing'\r\n    if (rate > 1) trend = 'increasing'\r\n    else if (rate < -1) trend = 'decreasing'\r\n    else trend = 'stable'\r\n    \r\n    return { trend, rate }\r\n  }\r\n}\r\n\r\n// ============================================\r\n// 7. 内存优化管理器\r\n// ============================================\r\n\r\nexport class MemoryOptimizationManager {\r\n  private static instance: MemoryOptimizationManager\r\n  private optimizationTimer?: number\r\n  private stats = {\r\n    optimizationRuns: 0,\r\n    memorySaved: 0,\r\n    lastOptimization: 0\r\n  }\r\n  \r\n  private constructor() {\r\n    this.startAutoOptimization()\r\n  }\r\n  \r\n  static getInstance(): MemoryOptimizationManager {\r\n    if (!this.instance) {\r\n      this.instance = new MemoryOptimizationManager()\r\n    }\r\n    return this.instance\r\n  }\r\n  \r\n  /**\r\n   * 启动自动优化\r\n   */\r\n  private startAutoOptimization(): void {\r\n    this.optimizationTimer = window.setInterval(() => {\r\n      this.optimize()\r\n    }, 30000) // 每30秒优化一次\r\n  }\r\n  \r\n  /**\r\n   * 执行内存优化\r\n   */\r\n  optimize(): void {\r\n    const before = MemoryMonitor.getMemoryUsage()\r\n    \r\n    // 1. 清理字符串池\r\n    if (before.percentage > 60) {\r\n      StringPool.clear()\r\n    }\r\n    \r\n    // 2. 触发垃圾回收\r\n    SmartGC.tryGC()\r\n    \r\n    // 3. 记录统计\r\n    const after = MemoryMonitor.getMemoryUsage()\r\n    const saved = before.used - after.used\r\n    \r\n    this.stats.optimizationRuns++\r\n    this.stats.memorySaved += Math.max(0, saved)\r\n    this.stats.lastOptimization = Date.now()\r\n    \r\n    // 4. 记录监控数据\r\n    MemoryMonitor.record()\r\n  }\r\n  \r\n  /**\r\n   * 获取优化统计\r\n   */\r\n  getStats(): typeof this.stats {\r\n    return { ...this.stats }\r\n  }\r\n  \r\n  /**\r\n   * 销毁管理器\r\n   */\r\n  destroy(): void {\r\n    if (this.optimizationTimer) {\r\n      clearInterval(this.optimizationTimer)\r\n      this.optimizationTimer = undefined\r\n    }\r\n  }\r\n}\r\n\r\n// ============================================\r\n// 8. 内存泄漏检测\r\n// ============================================\r\n\r\nexport class LeakDetector {\r\n  private static objectRefs = new WeakMap<object, number>()\r\n  private static objectCounts = new Map<string, number>()\r\n  \r\n  /**\r\n   * 跟踪对象\r\n   */\r\n  static track(obj: object, type: string): void {\r\n    // 增加引用计数\r\n    const count = this.objectRefs.get(obj) || 0\r\n    this.objectRefs.set(obj, count + 1)\r\n    \r\n    // 增加类型计数\r\n    const typeCount = this.objectCounts.get(type) || 0\r\n    this.objectCounts.set(type, typeCount + 1)\r\n  }\r\n  \r\n  /**\r\n   * 取消跟踪\r\n   */\r\n  static untrack(obj: object, type: string): void {\r\n    // 减少引用计数\r\n    const count = this.objectRefs.get(obj) || 0\r\n    if (count > 1) {\r\n      this.objectRefs.set(obj, count - 1)\r\n    } else {\r\n      this.objectRefs.delete(obj)\r\n    }\r\n    \r\n    // 减少类型计数\r\n    const typeCount = this.objectCounts.get(type) || 0\r\n    if (typeCount > 1) {\r\n      this.objectCounts.set(type, typeCount - 1)\r\n    } else {\r\n      this.objectCounts.delete(type)\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 检测泄漏\r\n   */\r\n  static detectLeaks(): Array<{ type: string; count: number }> {\r\n    const leaks: Array<{ type: string; count: number }> = []\r\n    \r\n    this.objectCounts.forEach((count, type) => {\r\n      if (count > 100) { // 超过100个实例可能是泄漏\r\n        leaks.push({ type, count })\r\n      }\r\n    })\r\n    \r\n    return leaks\r\n  }\r\n}\r\n\r\n// ============================================\r\n// 导出工具集\r\n// ============================================\r\n\r\nexport const MemoryUtils = {\r\n  StringPool,\r\n  ArrayOptimizer,\r\n  ObjectOptimizer,\r\n  MemoryCompressor,\r\n  SmartGC,\r\n  MemoryMonitor,\r\n  LeakDetector\r\n}\r\n\r\n// 默认导出优化管理器\r\nexport default MemoryOptimizationManager.getInstance()"],"names":[],"mappings":"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"}