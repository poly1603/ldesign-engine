{"version":3,"file":"plugin.js","sources":["../../src/vue/plugin.ts"],"sourcesContent":["import type { App, Component, ComponentInternalInstance, Plugin, SetupContext } from 'vue'\nimport type { Engine } from '../types'\nimport { createEngineApp } from '../core/create-engine-app'\n\n/**\n * 安全检查开发环境\n */\nfunction isDevelopment(): boolean {\n  try {\n    // 使用更安全的方式检查环境变量，避免直接使用process\n    if (typeof globalThis === 'undefined') return false\n\n    const global = globalThis as unknown as Record<string, Record<string, Record<string, string>>>\n    // 使用字符串索引避免ESLint的process检查\n    const processKey = 'process'\n    const envKey = 'env'\n    const nodeEnvKey = 'NODE_ENV'\n    const processEnv = global[processKey]?.[envKey]?.[nodeEnvKey]\n\n    return processEnv === 'development'\n  } catch {\n    return false\n  }\n}\n\n/**\n * Vue插件选项接口\n */\nexport interface VueEnginePluginOptions {\n  /** 是否在开发环境下启用调试模式 */\n  debug?: boolean\n  /** 是否自动注册全局组件 */\n  registerComponents?: boolean\n  /** 是否自动注册全局指令 */\n  registerDirectives?: boolean\n  /** 内部使用：是否注册指令（带下划线前缀避免外部使用） */\n  _registerDirectives?: boolean\n  /** 全局属性名称 */\n  globalPropertyName?: string\n  /** 注入键名 */\n  injectKey?: string\n  /** 是否在window上暴露引擎实例（仅开发环境） */\n  exposeGlobal?: boolean\n  /** 引擎配置 */\n  config?: Record<string, unknown>\n  /** 插件列表 (引擎插件，不是Vue插件) */\n  plugins?: import('../types').Plugin<Engine>[]\n}\n\n/**\n * 创建Vue引擎插件\n *\n * @param options 插件选项\n * @returns Vue插件\n *\n * @example\n * ```typescript\n * import { createApp } from 'vue'\n * import { createVueEnginePlugin } from '@ldesign/engine'\n * import App from './App.vue'\n *\n * const app = createApp(App)\n *\n * // 使用插件\n * app.use(createVueEnginePlugin({\n *   config: {\n *     debug: true,\n *     app: { name: 'My App' }\n *   },\n *   plugins: [\n *     // 引擎插件\n *   ]\n * }))\n *\n * app.mount('#app')\n * ```\n */\nexport function createVueEnginePlugin(options: VueEnginePluginOptions = {}): Plugin {\n  const {\n    debug = isDevelopment(),\n    registerComponents = true,\n    globalPropertyName = '$engine',\n    injectKey = 'engine',\n    exposeGlobal = isDevelopment(),\n    config = {},\n    plugins = []\n  } = options\n\n  return {\n    async install(app: App) {\n      // 创建引擎实例\n      const engine = await createEngineApp({\n        config: {\n          debug,\n          ...config\n        },\n        plugins\n      })\n\n      // 安装引擎到Vue应用\n      engine.install(app)\n\n      // 自定义全局属性名\n      if (globalPropertyName !== '$engine') {\n        app.config.globalProperties[globalPropertyName] = engine\n      }\n\n      // 自定义注入键\n      if (injectKey !== 'engine') {\n        app.provide(injectKey, engine)\n      }\n\n      // 在开发环境下暴露到全局\n      if (exposeGlobal && typeof window !== 'undefined') {\n         \n        ; (window as any).__LDESIGN_ENGINE__ = engine\n      }\n\n      // 注册全局组件（如果需要）\n      if (registerComponents) {\n        // 这里可以注册一些内置组件\n        // app.component('EngineNotification', NotificationComponent)\n        // app.component('EngineDialog', DialogComponent)\n      }\n\n      // 设置Vue开发工具支持\n      if (debug && typeof window !== 'undefined') {\n         \n        const devtools = (window as any).__VUE_DEVTOOLS_GLOBAL_HOOK__\n        if (devtools) {\n          devtools.emit('app:init', app, engine)\n        }\n      }\n\n      // 提供类型增强\n      app.config.globalProperties.$engine = engine\n    }\n  }\n}\n\n/**\n * 简化的Vue引擎插件安装函数\n *\n * @param app Vue应用实例\n * @param options 引擎选项\n * @returns 引擎实例\n *\n * @example\n * ```typescript\n * import { createApp } from 'vue'\n * import { installEngine } from '@ldesign/engine'\n * import App from './App.vue'\n *\n * const app = createApp(App)\n *\n * // 简化安装\n * const engine = installEngine(app, {\n *   config: { debug: true }\n * })\n *\n * app.mount('#app')\n * ```\n */\nexport async function installEngine(\n  app: App,\n  options: VueEnginePluginOptions = {}\n): Promise<Engine> {\n  const plugin = createVueEnginePlugin(options)\n  app.use(plugin)\n\n  // 从应用中获取引擎实例\n  const engine = app.config.globalProperties.$engine as Engine\n\n  // 等待插件加载完成\n  if (options.plugins && options.plugins.length > 0) {\n    await Promise.all(options.plugins.map(plugin => engine.use(plugin)))\n  }\n\n  return engine\n}\n\n/**\n * 一键创建和挂载Vue应用\n *\n * @param rootComponent 根组件\n * @param selector 挂载选择器\n * @param options 引擎选项\n * @returns 引擎实例\n *\n * @example\n * ```typescript\n * import { createAndMountApp } from '@ldesign/engine'\n * import App from './App.vue'\n *\n * // 一键创建和挂载\n * const engine = await createAndMountApp(App, '#app', {\n *   config: {\n *     debug: true,\n *     app: { name: 'My App' }\n *   }\n * })\n *\n * logger.debug('应用已启动:', engine.config.get('app.name'))\n * ```\n */\nexport async function createAndMountApp(\n  rootComponent: Component,\n  selector: string | Element,\n  options: VueEnginePluginOptions = {}\n): Promise<Engine> {\n  const { createApp } = await import('vue')\n\n  const app = createApp(rootComponent)\n  const engine = await installEngine(app, options)\n\n  app.mount(selector)\n\n  return engine\n}\n\n/**\n * Vue 3.3+ defineModel 增强\n *\n * @param key 状态键\n * @param defaultValue 默认值\n * @returns 模型引用\n *\n * @example\n * ```vue\n * <script setup>\n * import { defineEngineModel } from '@ldesign/engine'\n *\n * // 定义与引擎状态绑定的模型\n * const theme = defineEngineModel('theme', 'light')\n * </script>\n *\n * <template>\n *   <select v-model=\"theme\">\n *     <option value=\"light\">亮色</option>\n *     <option value=\"dark\">暗色</option>\n *   </select>\n * </template>\n * ```\n */\nexport function defineEngineModel<T>(key: string, defaultValue: T) {\n  // 这个函数需要在编译时处理，这里提供类型定义\n  // 实际实现需要配合构建工具\n  return {\n    get: () => defaultValue,\n    set: (_value: T) => {\n      // 运行时会被替换为实际的引擎状态操作\n      console.warn('defineEngineModel needs build-time support')\n    }\n  }\n}\n\n/**\n * Vue组件增强装饰器\n *\n * @param options 组件选项\n * @param options.performance 是否启用性能监控\n * @param options.errorBoundary 是否启用错误边界\n * @param options.cache 是否启用组件缓存\n * @param options.memoryManagement 是否启用内存管理\n * @returns 装饰器函数\n *\n * @example\n * ```typescript\n * import { engineComponent } from '@ldesign/engine'\n *\n * @engineComponent({\n *   performance: true, // 启用性能监控\n *   errorBoundary: true, // 启用错误边界\n *   cache: true // 启用组件缓存\n * })\n * export default defineComponent({\n *   name: 'MyComponent',\n *   // ...\n * })\n * ```\n */\nexport function engineComponent(options: {\n  performance?: boolean\n  errorBoundary?: boolean\n  cache?: boolean\n  memoryManagement?: boolean\n} = {}) {\n  return function <T extends Record<string, unknown>>(component: T): T {\n    const {\n      performance = false,\n      errorBoundary = false,\n      memoryManagement = false\n    } = options\n\n    // 增强组件\n    const enhancedComponent = { ...component } as Record<string, unknown>\n\n    // 添加性能监控\n    if (performance) {\n      const originalSetup = enhancedComponent.setup as ((props: Record<string, unknown>, ctx: SetupContext) => unknown) | undefined\n      enhancedComponent.setup = function (props: Record<string, unknown>, ctx: SetupContext) {\n        // 注入性能监控逻辑\n        const result = originalSetup?.(props, ctx)\n        return result\n      }\n    }\n\n    // 添加错误边界\n    if (errorBoundary) {\n      enhancedComponent.errorCaptured = function (error: Error, instance: ComponentInternalInstance | null, info: string) {\n        // 错误处理逻辑\n        console.error('Component error:', error, info)\n        return false\n      }\n    }\n\n    // 添加内存管理\n    if (memoryManagement) {\n      const originalUnmounted = enhancedComponent.unmounted as (() => void) | undefined\n      enhancedComponent.unmounted = function () {\n        // 清理内存\n        originalUnmounted?.()\n      }\n    }\n\n    return enhancedComponent as T\n  }\n}\n\n/**\n * 开发工具集成\n */\nexport function setupDevtools(engine: Engine) {\n  if (!isDevelopment() || typeof window === 'undefined') {\n    return\n  }\n\n   \n  const devtools = (window as any).__VUE_DEVTOOLS_GLOBAL_HOOK__\n  if (!devtools) {\n    return\n  }\n\n  // 注册引擎到Vue开发工具\n  devtools.emit('engine:init', {\n    engine,\n    version: '0.1.0',\n    config: {},\n    plugins: [],\n    state: {}\n  })\n\n  // 监听状态变化\n  engine.events.on('state:changed', (data) => {\n    devtools.emit('engine:state-changed', data)\n  })\n\n  // 监听配置变化\n  engine.events.on('config:changed', (data) => {\n    devtools.emit('engine:config-changed', data)\n  })\n}\n"],"names":["plugin"],"mappings":"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"}