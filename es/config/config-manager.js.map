{"version":3,"file":"config-manager.js","sources":["../../src/config/config-manager.ts"],"sourcesContent":["import type {\n  ConfigManager,\n  ConfigSchema,\n  ConfigSnapshot,\n  ConfigWatcher,\n  Logger,\n  UnwatchFunction,\n  ValidationResult,\n} from '../types'\nimport type { ConfigLoader, ConfigObject } from './loaders'\nimport { getNestedValue, isObject, setNestedValue } from '../utils'\n\n/**\n * 配置管理器实现\n *\n * 提供完整的配置管理功能，包括：\n * - 配置加载和保存\n * - 配置验证\n * - 配置监听\n * - 快照和回滚\n * - 环境检测\n */\nexport class ConfigManagerImpl implements ConfigManager {\n  private config: Record<string, unknown> = {}\n  private schema?: ConfigSchema\n  private watchers = new Map<string, ConfigWatcher[]>()\n  private snapshots: ConfigSnapshot[] = []\n  private environment: 'development' | 'production' | 'test' = 'development'\n  private autoSaveInterval?: number\n  private maxSnapshots = 5 // 从10减少到5，降低内存占用\n  private logger?: Logger\n  private loaders: ConfigLoader[] = []\n  private loadWatchers: Array<() => void> = []\n\n  // 内存优化：限制数量\n  private readonly MAX_WATCHERS_PER_PATH = 50\n  private readonly MAX_LOADERS = 20\n\n  constructor(initialConfig: Record<string, unknown> = {}, logger?: Logger) {\n    this.config = { ...initialConfig }\n    this.logger = logger\n    this.environment = this.detectEnvironment()\n\n    // 创建初始快照\n    this.createSnapshot()\n\n    this.logger?.info('ConfigManager initialized', {\n      environment: this.environment,\n      keys: Object.keys(this.config).length,\n    })\n  }\n\n  /**\n   * 添加配置加载器 - 优化版：限制加载器数量\n   *\n   * @param loader 配置加载器实例\n   * @returns this 支持链式调用\n   */\n  addLoader(loader: ConfigLoader): this {\n    if (this.loaders.length >= this.MAX_LOADERS) {\n      this.logger?.warn(`Maximum config loaders limit (${this.MAX_LOADERS}) reached, removing oldest`)\n      this.loaders.shift()\n    }\n    this.loaders.push(loader)\n    return this\n  }\n\n  /**\n   * 从所有加载器加载配置\n   *\n   * 按顺序加载所有配置源，后面的配置会覆盖前面的\n   */\n  async loadFromLoaders(): Promise<void> {\n    for (const loader of this.loaders) {\n      try {\n        const loadedConfig = await loader.load()\n        this.merge(loadedConfig as Partial<Record<string, unknown>>)\n\n        // 如果加载器支持监听，启用热重载\n        if (loader.watch) {\n          const unwatcher = loader.watch((newConfig: ConfigObject) => {\n            this.merge(newConfig as Partial<Record<string, unknown>>)\n            this.logger?.info('Configuration hot-reloaded')\n          })\n          if (unwatcher) {\n            this.loadWatchers.push(unwatcher)\n          }\n        }\n      }\n      catch (error) {\n        this.logger?.error('Failed to load config from loader', error)\n      }\n    }\n  }\n\n  /**\n   * 销毁配置管理器 - 增强版\n   *\n   * 清理所有监听器和定时器\n   */\n  destroy(): void {\n    // 清理加载器监听器\n    this.loadWatchers.forEach(unwatch => unwatch())\n    this.loadWatchers.length = 0 // 更高效的数组清空\n\n    // 清理自动保存定时器\n    if (this.autoSaveInterval) {\n      window.clearInterval(this.autoSaveInterval)\n      this.autoSaveInterval = undefined\n    }\n\n    // 清理所有watchers\n    this.watchers.clear()\n\n    // 清理快照\n    this.snapshots.length = 0\n\n    // 清理加载器\n    this.loaders.length = 0\n\n    // 清理配置\n    this.config = {}\n\n    // 清理 schema\n    this.schema = undefined\n\n    this.logger?.info('ConfigManager destroyed')\n    this.logger = undefined\n  }\n\n  // 基础操作\n  get<T = unknown>(path: string, defaultValue?: T): T {\n    const value = getNestedValue(this.config, path) as T\n    return value !== undefined ? value : (defaultValue as T)\n  }\n\n  set(path: string, value: unknown): void {\n    const oldValue = this.get(path)\n\n    // 验证新值\n    if (this.schema) {\n      const validation = this.validatePath(path, value)\n      if (!validation.valid) {\n        throw new Error(\n          `Configuration validation failed for \"${path}\": ${validation.errors.join(', ')}`\n        )\n      }\n    }\n\n    setNestedValue(this.config, path, value)\n\n    // 触发监听器\n    this.triggerWatchers(path, value, oldValue)\n\n    this.logger?.debug('Configuration updated', { path, value, oldValue })\n  }\n\n  has(path: string): boolean {\n    return getNestedValue(this.config, path) !== undefined\n  }\n\n  remove(path: string): void {\n    const oldValue = this.get(path)\n    this.deleteNestedValue(this.config, path)\n    this.triggerWatchers(path, undefined, oldValue)\n\n    this.logger?.debug('Configuration removed', { path, oldValue })\n  }\n\n  clear(): void {\n    const oldConfig = { ...this.config }\n    this.config = {}\n\n    // 触发所有监听器\n    for (const path of Object.keys(oldConfig)) {\n      this.triggerWatchers(path, undefined, oldConfig[path])\n    }\n\n    this.logger?.info('Configuration cleared')\n  }\n\n  // 配置合并\n  merge(newConfig: Partial<Record<string, unknown>>): void {\n    const oldConfig = { ...this.config }\n    this.deepMerge(this.config, newConfig)\n\n    // 触发变更的路径监听器\n    this.triggerMergeWatchers(oldConfig, this.config)\n\n    this.logger?.info('Configuration merged', {\n      newKeys: Object.keys(newConfig).length,\n    })\n  }\n\n  reset(path?: string): void {\n    if (path) {\n      // 重置特定路径到默认值\n      if (this.schema) {\n        const defaultValue = this.getDefaultValue(path)\n        if (defaultValue !== undefined) {\n          this.set(path, defaultValue)\n        } else {\n          this.remove(path)\n        }\n      } else {\n        this.remove(path)\n      }\n    } else {\n      // 重置整个配置\n      this.clear()\n      if (this.schema) {\n        this.config = this.getDefaultConfig()\n      }\n    }\n\n    this.logger?.info('Configuration reset', { path })\n  }\n\n  // 环境管理\n  setEnvironment(env: 'development' | 'production' | 'test'): void {\n    const oldEnv = this.environment\n    this.environment = env\n\n    this.logger?.info('Environment changed', { from: oldEnv, to: env })\n  }\n\n  getEnvironment(): string {\n    return this.environment\n  }\n\n  // 配置验证\n  validate(schema?: ConfigSchema): ValidationResult {\n    const targetSchema = schema || this.schema\n    if (!targetSchema) {\n      return { valid: true, errors: [], warnings: [] }\n    }\n\n    return this.validateConfig(this.config, targetSchema)\n  }\n\n  setSchema(schema: ConfigSchema): void {\n    this.schema = schema\n\n    // 验证当前配置\n    const validation = this.validate()\n    if (!validation.valid) {\n      this.logger?.warn(\n        'Current configuration is invalid after schema update',\n        {\n          errors: validation.errors,\n          warnings: validation.warnings,\n        }\n      )\n    }\n\n    this.logger?.info('Configuration schema updated')\n  }\n\n  getSchema(): ConfigSchema | undefined {\n    return this.schema\n  }\n\n  // 配置监听\n  watch(path: string, callback: ConfigWatcher): UnwatchFunction {\n    if (!this.watchers.has(path)) {\n      this.watchers.set(path, [])\n    }\n\n    const watchers = this.watchers.get(path)\n    watchers?.push(callback)\n\n    return () => {\n      this.unwatch(path, callback)\n    }\n  }\n\n  unwatch(path: string, callback?: ConfigWatcher): void {\n    const callbacks = this.watchers.get(path)\n    if (!callbacks) return\n\n    if (callback) {\n      const index = callbacks.indexOf(callback)\n      if (index > -1) {\n        callbacks.splice(index, 1)\n      }\n\n      if (callbacks.length === 0) {\n        this.watchers.delete(path)\n      }\n    } else {\n      this.watchers.delete(path)\n    }\n  }\n\n  // 事件监听（兼容方法）\n  on(event: string, callback: (...args: unknown[]) => void): () => void {\n    // 使用 watch 方法实现事件监听\n    return this.watch(event, callback as ConfigWatcher)\n  }\n\n  // 持久化\n  async save(): Promise<void> {\n    try {\n      const data = JSON.stringify({\n        config: this.config,\n        environment: this.environment,\n        timestamp: Date.now(),\n      })\n\n      if (typeof localStorage !== 'undefined') {\n        localStorage.setItem('engine-config', data)\n      }\n\n      this.logger?.debug('Configuration saved to storage')\n    } catch (error) {\n      this.logger?.error('Failed to save configuration', error)\n      throw error\n    }\n  }\n\n  async load(): Promise<void> {\n    try {\n      if (typeof localStorage === 'undefined') {\n        return\n      }\n\n      const data = localStorage.getItem('engine-config')\n      if (!data) {\n        return\n      }\n\n      const parsed = JSON.parse(data)\n      this.config = parsed.config || {}\n      this.environment = parsed.environment || this.environment\n\n      this.logger?.debug('Configuration loaded from storage')\n    } catch (error) {\n      this.logger?.error('Failed to load configuration', error)\n      throw error\n    }\n  }\n\n  enableAutoSave(interval = 30000): void {\n    this.disableAutoSave()\n\n    this.autoSaveInterval = window.setInterval(() => {\n      this.save().catch(error => {\n        this.logger?.error('Auto-save failed', error)\n      })\n    }, interval)\n\n    this.logger?.info('Auto-save enabled', { interval })\n  }\n\n  disableAutoSave(): void {\n    if (this.autoSaveInterval) {\n      window.clearInterval(this.autoSaveInterval)\n      this.autoSaveInterval = undefined\n      this.logger?.info('Auto-save disabled')\n    }\n  }\n\n  // 配置快照\n  createSnapshot(): ConfigSnapshot {\n    const snapshot: ConfigSnapshot = {\n      timestamp: Date.now(),\n      config: JSON.parse(JSON.stringify(this.config)),\n      environment: this.environment,\n      version: '1.0.0', // 可以从package.json获取\n    }\n\n    this.snapshots.unshift(snapshot)\n\n    // 限制快照数量\n    if (this.snapshots.length > this.maxSnapshots) {\n      this.snapshots = this.snapshots.slice(0, this.maxSnapshots)\n    }\n\n    this.logger?.debug('Configuration snapshot created')\n    return snapshot\n  }\n\n  restoreSnapshot(snapshot: ConfigSnapshot): void {\n    const oldConfig = { ...this.config }\n    this.config = JSON.parse(JSON.stringify(snapshot.config))\n    this.environment = snapshot.environment\n\n    // 触发所有监听器\n    this.triggerMergeWatchers(oldConfig, this.config)\n\n    this.logger?.info('Configuration restored from snapshot', {\n      timestamp: snapshot.timestamp,\n    })\n  }\n\n  getSnapshots(): ConfigSnapshot[] {\n    return [...this.snapshots]\n  }\n\n  // 配置统计\n  getStats(): {\n    totalKeys: number\n    watchers: number\n    snapshots: number\n    lastModified: number\n    memoryUsage: string\n  } {\n    const totalWatchers = Array.from(this.watchers.values()).reduce(\n      (sum, array) => sum + array.length,\n      0\n    )\n\n    const memoryUsage = JSON.stringify(this.config).length\n    const lastSnapshot = this.snapshots[0]\n\n    return {\n      totalKeys: this.getAllKeys().length,\n      watchers: totalWatchers,\n      snapshots: this.snapshots.length,\n      lastModified: lastSnapshot?.timestamp || 0,\n      memoryUsage: `${(memoryUsage / 1024).toFixed(2)} KB`,\n    }\n  }\n\n  // 配置导入导出\n  export(format: 'json' | 'yaml' = 'json'): string {\n    const data = {\n      config: this.config,\n      environment: this.environment,\n      timestamp: Date.now(),\n    }\n\n    if (format === 'json') {\n      return JSON.stringify(data, null, 2)\n    } else {\n      // 简单的YAML导出（实际项目中可以使用yaml库）\n      return this.toYAML(data)\n    }\n  }\n\n  import(data: string, format: 'json' | 'yaml' = 'json'): void {\n    try {\n      let parsed: Record<string, unknown>\n\n      if (format === 'json') {\n        parsed = JSON.parse(data)\n      } else {\n        // 简单的YAML解析（实际项目中可以使用yaml库）\n        parsed = this.fromYAML(data)\n      }\n\n      if (parsed.config) {\n        this.merge(parsed.config)\n      }\n\n      if (parsed.environment && typeof parsed.environment === 'string') {\n        this.setEnvironment(parsed.environment as 'development' | 'production' | 'test')\n      }\n\n      this.logger?.info('Configuration imported', { format })\n    } catch (error) {\n      this.logger?.error('Failed to import configuration', error)\n      throw error\n    }\n  }\n\n  // 命名空间\n  namespace(name: string): ConfigManager {\n    return new NamespacedConfigManager(this, name)\n  }\n\n  // 私有方法\n  private detectEnvironment(): 'development' | 'production' | 'test' {\n    // Check if running in test environment\n    if (\n      typeof globalThis !== 'undefined' &&\n      (globalThis as Record<string, unknown>).__vitest__ !== undefined\n    ) {\n      return 'test'\n    }\n\n    // Check if in production mode (commonly set by build tools)\n    if (typeof window !== 'undefined') {\n      // @ts-expect-error - may be set by build tools\n      if (window.__ENV__ === 'production') {\n        return 'production'\n      }\n    }\n\n    return 'development'\n  }\n\n  private triggerWatchers(path: string, newValue: unknown, oldValue: unknown): void {\n    const callbacks = this.watchers.get(path)\n    if (callbacks) {\n      callbacks.forEach(callback => {\n        try {\n          callback(newValue, oldValue, path)\n        } catch (error) {\n          this.logger?.error('Error in config watcher callback', {\n            path,\n            error,\n          })\n        }\n      })\n    }\n\n    // 触发父路径监听器\n    const pathParts = path.split('.')\n    for (let i = pathParts.length - 1; i > 0; i--) {\n      const parentPath = pathParts.slice(0, i).join('.')\n      const parentCallbacks = this.watchers.get(parentPath)\n      if (parentCallbacks) {\n        const parentNewValue = this.get(parentPath)\n        const parentOldValue = this.get(parentPath) // 这里需要优化，应该保存旧值\n        parentCallbacks.forEach(callback => {\n          try {\n            callback(parentNewValue, parentOldValue, parentPath)\n          } catch (error) {\n            this.logger?.error('Error in parent config watcher callback', {\n              path: parentPath,\n              error,\n            })\n          }\n        })\n      }\n    }\n  }\n\n  private triggerMergeWatchers(\n    oldConfig: Record<string, unknown>,\n    newConfig: Record<string, unknown>\n  ): void {\n    const allKeys = new Set([\n      ...this.getAllKeysFromObject(oldConfig),\n      ...this.getAllKeysFromObject(newConfig),\n    ])\n\n    for (const key of allKeys) {\n      const oldValue = getNestedValue(oldConfig, key)\n      const newValue = getNestedValue(newConfig, key)\n\n      if (JSON.stringify(oldValue) !== JSON.stringify(newValue)) {\n        this.triggerWatchers(key, newValue, oldValue)\n      }\n    }\n  }\n\n  private deleteNestedValue(obj: Record<string, unknown>, path: string): void {\n    const keys = path.split('.')\n    let current = obj\n\n    for (let i = 0; i < keys.length - 1; i++) {\n      const key = keys[i]\n      if (!(key in current) || !isObject(current[key])) {\n        return // 路径不存在\n      }\n      current = current[key] as Record<string, unknown>\n    }\n\n    delete current[keys[keys.length - 1]]\n  }\n\n  private deepMerge(target: Record<string, unknown>, source: Record<string, unknown>): void {\n    for (const key in source) {\n      if (source[key] && isObject(source[key])) {\n        if (!target[key] || !isObject(target[key])) {\n          target[key] = {}\n        }\n        this.deepMerge(\n          target[key] as Record<string, unknown>,\n          source[key] as Record<string, unknown>\n        )\n      } else {\n        target[key] = source[key]\n      }\n    }\n  }\n\n  private validateConfig(\n    config: Record<string, unknown>,\n    schema: ConfigSchema,\n    basePath = ''\n  ): ValidationResult {\n    const errors: string[] = []\n    const warnings: string[] = []\n\n    for (const [key, schemaItem] of Object.entries(schema)) {\n      const fullPath = basePath ? `${basePath}.${key}` : key\n      const value = getNestedValue(config, fullPath)\n\n      // 检查必需字段\n      if (schemaItem.required && value === undefined) {\n        errors.push(`Required field \"${fullPath}\" is missing`)\n        continue\n      }\n\n      // 如果值不存在且不是必需的，跳过验证\n      if (value === undefined) {\n        continue\n      }\n\n      // 类型验证\n      if (!this.validateType(value, schemaItem.type)) {\n        errors.push(\n          `Field \"${fullPath}\" has invalid type. Expected ${schemaItem.type}, got ${typeof value}`\n        )\n        continue\n      }\n\n      // 自定义验证器\n      if (schemaItem.validator && !schemaItem.validator(value)) {\n        errors.push(`Field \"${fullPath}\" failed custom validation`)\n        continue\n      }\n\n      // 递归验证子对象\n      if (\n        schemaItem.type === 'object' &&\n        schemaItem.children &&\n        isObject(value)\n      ) {\n        const childResult = this.validateConfig(\n          config,\n          schemaItem.children,\n          fullPath\n        )\n        errors.push(...childResult.errors)\n        warnings.push(...childResult.warnings)\n      }\n    }\n\n    return { valid: errors.length === 0, errors, warnings }\n  }\n\n  private validatePath(path: string, value: unknown): ValidationResult {\n    if (!this.schema) {\n      return { valid: true, errors: [], warnings: [] }\n    }\n\n    const pathParts = path.split('.')\n    let currentSchema = this.schema\n\n    for (const part of pathParts) {\n      if (!currentSchema[part]) {\n        return { valid: true, errors: [], warnings: [] } // 路径不在schema中，允许\n      }\n\n      const schemaItem = currentSchema[part]\n\n      // 如果是最后一个部分，验证值\n      if (part === pathParts[pathParts.length - 1]) {\n        if (!this.validateType(value, schemaItem.type)) {\n          return {\n            valid: false,\n            errors: [\n              `Invalid type. Expected ${schemaItem.type}, got ${typeof value}`,\n            ],\n            warnings: [],\n          }\n        }\n\n        if (schemaItem.validator && !schemaItem.validator(value)) {\n          return {\n            valid: false,\n            errors: ['Failed custom validation'],\n            warnings: [],\n          }\n        }\n\n        return { valid: true, errors: [], warnings: [] }\n      }\n\n      // 继续到下一级\n      if (schemaItem.children) {\n        currentSchema = schemaItem.children\n      } else {\n        return { valid: true, errors: [], warnings: [] }\n      }\n    }\n\n    return { valid: true, errors: [], warnings: [] }\n  }\n\n  private validateType(value: unknown, expectedType: string): boolean {\n    switch (expectedType) {\n      case 'string':\n        return typeof value === 'string'\n      case 'number':\n        return typeof value === 'number' && !Number.isNaN(value)\n      case 'boolean':\n        return typeof value === 'boolean'\n      case 'object':\n        return isObject(value)\n      case 'array':\n        return Array.isArray(value)\n      default:\n        return true\n    }\n  }\n\n  private getDefaultValue(path: string): unknown {\n    if (!this.schema) return undefined\n\n    const pathParts = path.split('.')\n    let currentSchema = this.schema\n\n    for (const part of pathParts) {\n      if (!currentSchema[part]) {\n        return undefined\n      }\n\n      const schemaItem = currentSchema[part]\n\n      if (part === pathParts[pathParts.length - 1]) {\n        return schemaItem.default\n      }\n\n      if (schemaItem.children) {\n        currentSchema = schemaItem.children\n      } else {\n        return undefined\n      }\n    }\n\n    return undefined\n  }\n\n  private getDefaultConfig(): Record<string, unknown> {\n    if (!this.schema) return {}\n\n    const config: Record<string, unknown> = {}\n    this.buildDefaultConfig(config, this.schema)\n    return config\n  }\n\n  private buildDefaultConfig(\n    config: Record<string, unknown>,\n    schema: ConfigSchema,\n    basePath = ''\n  ): void {\n    for (const [key, schemaItem] of Object.entries(schema)) {\n      const fullPath = basePath ? `${basePath}.${key}` : key\n\n      if (schemaItem.default !== undefined) {\n        setNestedValue(config, fullPath, schemaItem.default)\n      }\n\n      if (schemaItem.children) {\n        this.buildDefaultConfig(config, schemaItem.children, fullPath)\n      }\n    }\n  }\n\n  private getAllKeys(): string[] {\n    return this.getAllKeysFromObject(this.config)\n  }\n\n  private getAllKeysFromObject(obj: Record<string, unknown>, prefix = ''): string[] {\n    const keys: string[] = []\n\n    for (const key in obj) {\n      const fullKey = prefix ? `${prefix}.${key}` : key\n      keys.push(fullKey)\n\n      if (isObject(obj[key])) {\n        keys.push(...this.getAllKeysFromObject(obj[key] as Record<string, unknown>, fullKey))\n      }\n    }\n\n    return keys\n  }\n\n  private toYAML(obj: Record<string, unknown> | Array<unknown>, indent = 0): string {\n    const spaces = '  '.repeat(indent)\n    let result = ''\n\n    for (const [key, value] of Object.entries(obj)) {\n      if (isObject(value)) {\n        result += `${spaces}${key}:\\n${this.toYAML(value as Record<string, unknown>, indent + 1)}`\n      } else if (Array.isArray(value)) {\n        result += `${spaces}${key}:\\n`\n        value.forEach(item => {\n          result += `${spaces}  - ${item}\\n`\n        })\n      } else {\n        result += `${spaces}${key}: ${value}\\n`\n      }\n    }\n\n    return result\n  }\n\n  private fromYAML(yamlString: string): Record<string, unknown> {\n    // 简单的YAML解析实现（实际项目中应使用专业的YAML库）\n    const lines = yamlString.split('\\n').filter(line => line.trim())\n    const result: Record<string, unknown> = {}\n\n    // 这里只是一个简单的实现，实际应该使用js-yaml等库\n    lines.forEach(line => {\n      const colonIndex = line.indexOf(':')\n      if (colonIndex === -1) return\n\n      const beforeColon = line.slice(0, colonIndex)\n      const afterColon = line.slice(colonIndex + 1)\n      const key = beforeColon.trim()\n      const value = afterColon.trim()\n\n      if (key && value !== undefined) {\n        try {\n          result[key] = JSON.parse(value)\n        } catch {\n          result[key] = value\n        }\n      }\n    })\n\n    return result\n  }\n}\n\n// 命名空间配置管理器\nexport class NamespacedConfigManager implements ConfigManager {\n  constructor(\n    private parent: ConfigManager,\n    private namespaceName: string\n  ) { }\n\n  private getKey(key: string): string {\n    return `${this.namespaceName}.${key}`\n  }\n\n  // 基础操作\n  get<T = unknown>(key: string, defaultValue?: T): T {\n    return this.parent.get(this.getKey(key), defaultValue) as T\n  }\n\n  set(key: string, value: unknown): void {\n    this.parent.set(this.getKey(key), value)\n  }\n\n  has(key: string): boolean {\n    return this.parent.has(this.getKey(key))\n  }\n\n  remove(key: string): void {\n    this.parent.remove(this.getKey(key))\n  }\n\n  clear(): void {\n    // 只清理当前命名空间的配置\n    this.parent.remove(this.namespaceName)\n  }\n\n  // 配置合并\n  merge(config: Partial<Record<string, unknown>>): void {\n    const namespacedConfig: Record<string, unknown> = {}\n    for (const [key, value] of Object.entries(config)) {\n      namespacedConfig[this.getKey(key)] = value\n    }\n    this.parent.merge(namespacedConfig)\n  }\n\n  reset(path?: string): void {\n    if (path) {\n      this.parent.reset(this.getKey(path))\n    } else {\n      this.clear()\n    }\n  }\n\n  // 环境管理\n  setEnvironment(env: 'development' | 'production' | 'test'): void {\n    this.parent.setEnvironment(env)\n  }\n\n  getEnvironment(): string {\n    return this.parent.getEnvironment()\n  }\n\n  // 配置验证\n  validate(schema?: ConfigSchema): ValidationResult {\n    return this.parent.validate(schema)\n  }\n\n  setSchema(schema: ConfigSchema): void {\n    this.parent.setSchema(schema)\n  }\n\n  getSchema(): ConfigSchema | undefined {\n    return this.parent.getSchema()\n  }\n\n  // 配置监听\n  watch(key: string, callback: ConfigWatcher): UnwatchFunction {\n    return this.parent.watch(this.getKey(key), callback)\n  }\n\n  unwatch(key: string, callback?: ConfigWatcher): void {\n    this.parent.unwatch(this.getKey(key), callback)\n  }\n\n  // 事件监听（兼容方法）\n  on(event: string, callback: (...args: unknown[]) => void): () => void {\n    return this.parent.on(this.getKey(event), callback)\n  }\n\n  // 持久化\n  async save(): Promise<void> {\n    return this.parent.save()\n  }\n\n  async load(): Promise<void> {\n    return this.parent.load()\n  }\n\n  enableAutoSave(interval?: number): void {\n    this.parent.enableAutoSave(interval)\n  }\n\n  disableAutoSave(): void {\n    this.parent.disableAutoSave()\n  }\n\n  // 配置快照\n  createSnapshot(): ConfigSnapshot {\n    return this.parent.createSnapshot()\n  }\n\n  restoreSnapshot(snapshot: ConfigSnapshot): void {\n    this.parent.restoreSnapshot(snapshot)\n  }\n\n  getSnapshots(): ConfigSnapshot[] {\n    return this.parent.getSnapshots()\n  }\n\n  // 配置统计\n  getStats(): {\n    totalKeys: number\n    watchers: number\n    snapshots: number\n    lastModified: number\n    memoryUsage: string\n  } {\n    return this.parent.getStats()\n  }\n\n  // 配置导入导出\n  export(format?: 'json' | 'yaml'): string {\n    return this.parent.export(format)\n  }\n\n  import(data: string, format?: 'json' | 'yaml'): void {\n    this.parent.import(data, format)\n  }\n\n  // 命名空间\n  namespace(name: string): ConfigManager {\n    return this.parent.namespace(`${this.namespaceName}.${name}`)\n  }\n}\n\n// 工厂函数\nexport function createConfigManager(\n  initialConfig?: Record<string, unknown>,\n  logger?: Logger\n): ConfigManager {\n  return new ConfigManagerImpl(initialConfig, logger)\n}\n\n// 默认配置Schema\nexport const defaultConfigSchema: ConfigSchema = {\n  app: {\n    type: 'object',\n    required: true,\n    default: {\n      name: 'Vue Engine App',\n      version: '1.0.0',\n    },\n    children: {\n      name: {\n        type: 'string',\n        required: true,\n        default: 'Vue Engine App',\n        description: '应用名称',\n      },\n      version: {\n        type: 'string',\n        required: true,\n        default: '1.0.0',\n        description: '应用版本',\n      },\n      description: {\n        type: 'string',\n        description: '应用描述',\n      },\n      author: {\n        type: 'string',\n        description: '应用作者',\n      },\n      homepage: {\n        type: 'string',\n        description: '应用主页',\n      },\n    },\n  },\n  environment: {\n    type: 'string',\n    required: true,\n    default: 'development',\n    validator: (value: unknown) =>\n      typeof value === 'string' && ['development', 'production', 'test'].includes(value),\n    description: '运行环境',\n  },\n  debug: {\n    type: 'boolean',\n    required: true,\n    default: true,\n    description: '是否启用调试模式',\n  },\n  features: {\n    type: 'object',\n    required: true,\n    default: {\n      enableHotReload: true,\n      enableDevTools: true,\n      enablePerformanceMonitoring: true,\n      enableErrorReporting: true,\n      enableSecurityProtection: true,\n      enableCaching: true,\n      enableNotifications: true,\n    },\n    children: {\n      enableHotReload: {\n        type: 'boolean',\n        default: true,\n        description: '是否启用热重载',\n      },\n      enableDevTools: {\n        type: 'boolean',\n        default: true,\n        description: '是否启用开发工具',\n      },\n      enablePerformanceMonitoring: {\n        type: 'boolean',\n        default: true,\n        description: '是否启用性能监控',\n      },\n      enableErrorReporting: {\n        type: 'boolean',\n        default: true,\n        description: '是否启用错误报告',\n      },\n      enableSecurityProtection: {\n        type: 'boolean',\n        default: true,\n        description: '是否启用安全防护',\n      },\n      enableCaching: {\n        type: 'boolean',\n        default: true,\n        description: '是否启用缓存',\n      },\n      enableNotifications: {\n        type: 'boolean',\n        default: true,\n        description: '是否启用通知',\n      },\n    },\n  },\n}\n"],"names":[],"mappings":"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"}