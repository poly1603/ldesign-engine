{"version":3,"file":"lifecycle-manager.js","sources":["../../src/lifecycle/lifecycle-manager.ts"],"sourcesContent":["import type { Logger } from '../types'\n\n// 生命周期阶段\nexport type LifecyclePhase =\n  | 'beforeInit'\n  | 'init'\n  | 'afterInit'\n  | 'beforeMount'\n  | 'mount'\n  | 'afterMount'\n  | 'beforeUnmount'\n  | 'unmount'\n  | 'afterUnmount'\n  | 'beforeDestroy'\n  | 'destroy'\n  | 'afterDestroy'\n  | 'error'\n  | 'custom'\n\n// 生命周期钩子函数\nexport type LifecycleHook<T = unknown> = (\n  context: LifecycleContext<T>\n) => void | Promise<void>\n\n// 生命周期上下文\nexport interface LifecycleContext<T = unknown> {\n  readonly phase: LifecyclePhase\n  readonly timestamp: number\n  readonly engine: T\n  readonly data?: unknown\n  readonly error?: Error\n}\n\n// 钩子信息\nexport interface HookInfo<T = unknown> {\n  readonly id: string\n  readonly phase: LifecyclePhase\n  readonly hook: LifecycleHook<T>\n  readonly priority: number\n  readonly once: boolean\n  readonly name?: string\n  readonly description?: string\n  readonly registeredAt: number\n}\n\n// 生命周期事件\nexport interface LifecycleEvent {\n  readonly phase: LifecyclePhase\n  readonly timestamp: number\n  readonly duration?: number\n  readonly success: boolean\n  readonly error?: Error\n  readonly hooksExecuted: number\n  readonly data?: unknown\n}\n\n// 生命周期管理器接口\nexport interface LifecycleManager<T = unknown> {\n  // 钩子注册\n  on: (\n    phase: LifecyclePhase,\n    hook: LifecycleHook<T>,\n    priority?: number\n  ) => string\n  once: (\n    phase: LifecyclePhase,\n    hook: LifecycleHook<T>,\n    priority?: number\n  ) => string\n  off: (hookId: string) => boolean\n  offAll: (phase?: LifecyclePhase) => number\n\n  // 钩子查询\n  getHooks: (phase: LifecyclePhase) => HookInfo<T>[]\n  getAllHooks: () => HookInfo<T>[]\n  hasHooks: (phase: LifecyclePhase) => boolean\n  getHookCount: (phase?: LifecyclePhase) => number\n\n  // 生命周期执行\n  execute: (\n    phase: LifecyclePhase,\n    engine: T,\n    data?: unknown\n  ) => Promise<LifecycleEvent>\n  executeSync: (phase: LifecyclePhase, engine: T, data?: unknown) => LifecycleEvent\n\n  // 生命周期状态\n  getCurrentPhase: () => LifecyclePhase | undefined\n  getLastEvent: () => LifecycleEvent | undefined\n  getHistory: () => LifecycleEvent[]\n  isPhaseExecuted: (phase: LifecyclePhase) => boolean\n\n  // 错误处理\n  onError: (\n    callback: (error: Error, context: LifecycleContext<T>) => void\n  ) => () => void\n\n  // 统计信息\n  getStats: () => {\n    totalHooks: number\n    phaseStats: Record<LifecyclePhase, number>\n    executionHistory: LifecycleEvent[]\n    averageExecutionTime: number\n    errorCount: number\n  }\n\n  // 清理\n  clear: () => void\n  reset: () => void\n}\n\n/**\n * 生命周期管理器实现\n *\n * 负责注册、执行与统计各阶段生命周期钩子：\n * - 钩子支持优先级、一次性执行（once）\n * - 执行过程中收集历史与错误回调\n */\nexport class LifecycleManagerImpl<T = unknown> implements LifecycleManager<T> {\n  private hooks = new Map<string, HookInfo<T>>()\n  private phaseHooks = new Map<LifecyclePhase, Set<string>>()\n  private history: LifecycleEvent[] = []\n  private currentPhase?: LifecyclePhase\n  private errorCallbacks: Array<\n    (error: Error, context: LifecycleContext<T>) => void\n  > = []\n\n  private hookIdCounter = 0\n  private maxHistorySize = 50 // 从100减少到50，降低内存占用\n  private logger?: Logger\n\n  // 内存优化：限制钩子数量\n  private readonly MAX_HOOKS = 500\n  private readonly MAX_ERROR_CALLBACKS = 50\n\n  constructor(logger?: Logger) {\n    this.logger = logger\n    this.logger?.debug('Lifecycle manager initialized')\n  }\n\n  // 钩子注册\n  /**\n   * 注册生命周期钩子。\n   * @param phase 生命周期阶段\n   * @param hook 钩子函数\n   * @param priority 优先级，越大越先执行（默认0）\n   * @returns 钩子ID\n   */\n  on(phase: LifecyclePhase, hook: LifecycleHook<T>, priority = 0): string {\n    const id = this.generateHookId()\n    const hookInfo: HookInfo<T> = {\n      id,\n      phase,\n      hook,\n      priority,\n      once: false,\n      registeredAt: Date.now(),\n    }\n\n    this.hooks.set(id, hookInfo)\n\n    if (!this.phaseHooks.has(phase)) {\n      this.phaseHooks.set(phase, new Set())\n    }\n    const phaseHooks = this.phaseHooks.get(phase)\n    phaseHooks?.add(id)\n\n    this.logger?.debug(`Lifecycle hook registered`, {\n      id,\n      phase,\n      priority,\n    })\n\n    return id\n  }\n\n  /**\n   * 注册一次性生命周期钩子（执行后自动移除）。\n   */\n  once(phase: LifecyclePhase, hook: LifecycleHook<T>, priority = 0): string {\n    const id = this.generateHookId()\n    const hookInfo: HookInfo<T> = {\n      id,\n      phase,\n      hook,\n      priority,\n      once: true,\n      registeredAt: Date.now(),\n    }\n\n    this.hooks.set(id, hookInfo)\n\n    if (!this.phaseHooks.has(phase)) {\n      this.phaseHooks.set(phase, new Set())\n    }\n    const phaseHooks = this.phaseHooks.get(phase)\n    phaseHooks?.add(id)\n\n    this.logger?.debug(`One-time lifecycle hook registered`, {\n      id,\n      phase,\n      priority,\n    })\n\n    return id\n  }\n\n  /**\n   * 移除指定钩子。\n   */\n  off(hookId: string): boolean {\n    const hookInfo = this.hooks.get(hookId)\n    if (!hookInfo) {\n      return false\n    }\n\n    this.hooks.delete(hookId)\n\n    const phaseHooks = this.phaseHooks.get(hookInfo.phase)\n    if (phaseHooks) {\n      phaseHooks.delete(hookId)\n      if (phaseHooks.size === 0) {\n        this.phaseHooks.delete(hookInfo.phase)\n      }\n    }\n\n    this.logger?.debug(`Lifecycle hook removed`, {\n      id: hookId,\n      phase: hookInfo.phase,\n    })\n\n    return true\n  }\n\n  /**\n   * 批量移除钩子，可按阶段清空。\n   * @returns 被移除的钩子数量\n   */\n  offAll(phase?: LifecyclePhase): number {\n    let removedCount = 0\n\n    if (phase) {\n      const phaseHooks = this.phaseHooks.get(phase)\n      if (phaseHooks) {\n        for (const hookId of phaseHooks) {\n          this.hooks.delete(hookId)\n          removedCount++\n        }\n        this.phaseHooks.delete(phase)\n      }\n    } else {\n      removedCount = this.hooks.size\n      this.hooks.clear()\n      this.phaseHooks.clear()\n    }\n\n    this.logger?.debug(`Lifecycle hooks removed`, {\n      phase,\n      count: removedCount,\n    })\n\n    return removedCount\n  }\n\n  // 钩子查询\n  /**\n   * 获取指定阶段的钩子（按优先级降序）。\n   */\n  getHooks(phase: LifecyclePhase): HookInfo<T>[] {\n    const phaseHooks = this.phaseHooks.get(phase)\n    if (!phaseHooks) {\n      return []\n    }\n\n    const hooks = (Array.from(phaseHooks)\n      .map(id => this.hooks.get(id))\n      .filter(Boolean) as HookInfo<T>[])\n      .sort((a, b) => b.priority - a.priority) // 高优先级先执行\n\n    return hooks\n  }\n\n  /**\n   * 获取所有已注册钩子（按优先级降序）。\n   */\n  getAllHooks(): HookInfo<T>[] {\n    return Array.from(this.hooks.values()).sort(\n      (a, b) => b.priority - a.priority\n    )\n  }\n\n  hasHooks(phase: LifecyclePhase): boolean {\n    const phaseHooks = this.phaseHooks.get(phase)\n    return phaseHooks ? phaseHooks.size > 0 : false\n  }\n\n  /**\n   * 获取钩子数量，可选按阶段统计。\n   */\n  getHookCount(phase?: LifecyclePhase): number {\n    if (phase) {\n      const phaseHooks = this.phaseHooks.get(phase)\n      return phaseHooks ? phaseHooks.size : 0\n    }\n    return this.hooks.size\n  }\n\n  // 生命周期执行\n  /**\n   * 异步执行指定阶段的所有钩子。\n   * @returns 生命周期事件（包含执行结果与耗时）\n   */\n  async execute(\n    phase: LifecyclePhase,\n    engine: T,\n    data?: unknown\n  ): Promise<LifecycleEvent> {\n    const startTime = Date.now()\n    this.currentPhase = phase\n\n    const context: LifecycleContext<T> = {\n      phase,\n      timestamp: startTime,\n      engine,\n      data,\n    }\n\n    const hooks = this.getHooks(phase)\n    let hooksExecuted = 0\n    let error: Error | undefined\n\n    this.logger?.debug(`Executing lifecycle phase: ${phase}`, {\n      hookCount: hooks.length,\n    })\n\n    try {\n      for (const hookInfo of hooks) {\n        try {\n          await hookInfo.hook(context)\n          hooksExecuted++\n\n          // 移除一次性钩子\n          if (hookInfo.once) {\n            this.off(hookInfo.id)\n          }\n        } catch (hookError) {\n          error = hookError as Error\n          this.logger?.error(`Error in lifecycle hook`, {\n            phase,\n            hookId: hookInfo.id,\n            error: hookError,\n          })\n\n          // 通知错误回调\n          this.errorCallbacks.forEach(callback => {\n            try {\n              if (error) {\n                callback(error, { ...context, error })\n              }\n            } catch (callbackError) {\n              this.logger?.error(\n                'Error in lifecycle error callback',\n                callbackError\n              )\n            }\n          })\n\n          // 如果是关键阶段的错误，停止执行\n          if (this.isCriticalPhase(phase)) {\n            break\n          }\n        }\n      }\n    } catch (executionError) {\n      error = executionError as Error\n      this.logger?.error(`Critical error during lifecycle execution`, {\n        phase,\n        error: executionError,\n      })\n    }\n\n    const endTime = Date.now()\n    const event: LifecycleEvent = {\n      phase,\n      timestamp: startTime,\n      duration: endTime - startTime,\n      success: !error,\n      error,\n      hooksExecuted,\n      data,\n    }\n\n    this.addToHistory(event)\n\n    this.logger?.debug(`Lifecycle phase completed: ${phase}`, {\n      duration: event.duration,\n      success: event.success,\n      hooksExecuted,\n    })\n\n    return event\n  }\n\n  executeSync(phase: LifecyclePhase, engine: T, data?: unknown): LifecycleEvent {\n    const startTime = Date.now()\n    this.currentPhase = phase\n\n    const context: LifecycleContext<T> = {\n      phase,\n      timestamp: startTime,\n      engine,\n      data,\n    }\n\n    const hooks = this.getHooks(phase)\n    let hooksExecuted = 0\n    let error: Error | undefined\n\n    this.logger?.debug(`Executing lifecycle phase synchronously: ${phase}`, {\n      hookCount: hooks.length,\n    })\n\n    try {\n      for (const hookInfo of hooks) {\n        try {\n          const result = hookInfo.hook(context)\n\n          // 如果返回Promise，警告用户应该使用异步执行\n          if (result && typeof result.then === 'function') {\n            this.logger?.warn(`Async hook detected in sync execution`, {\n              phase,\n              hookId: hookInfo.id,\n            })\n          }\n\n          hooksExecuted++\n\n          // 移除一次性钩子\n          if (hookInfo.once) {\n            this.off(hookInfo.id)\n          }\n        } catch (hookError) {\n          error = hookError as Error\n          this.logger?.error(`Error in lifecycle hook`, {\n            phase,\n            hookId: hookInfo.id,\n            error: hookError,\n          })\n\n          // 通知错误回调\n          this.errorCallbacks.forEach(callback => {\n            try {\n              if (error) {\n                callback(error, { ...context, error })\n              }\n            } catch (callbackError) {\n              this.logger?.error(\n                'Error in lifecycle error callback',\n                callbackError\n              )\n            }\n          })\n\n          // 如果是关键阶段的错误，停止执行\n          if (this.isCriticalPhase(phase)) {\n            break\n          }\n        }\n      }\n    } catch (executionError) {\n      error = executionError as Error\n      this.logger?.error(`Critical error during sync lifecycle execution`, {\n        phase,\n        error: executionError,\n      })\n    }\n\n    const endTime = Date.now()\n    const event: LifecycleEvent = {\n      phase,\n      timestamp: startTime,\n      duration: endTime - startTime,\n      success: !error,\n      error,\n      hooksExecuted,\n      data,\n    }\n\n    this.addToHistory(event)\n\n    this.logger?.debug(`Sync lifecycle phase completed: ${phase}`, {\n      duration: event.duration,\n      success: event.success,\n      hooksExecuted,\n    })\n\n    return event\n  }\n\n  // 生命周期状态\n  getCurrentPhase(): LifecyclePhase | undefined {\n    return this.currentPhase\n  }\n\n  getLastEvent(): LifecycleEvent | undefined {\n    return this.history[this.history.length - 1]\n  }\n\n  getHistory(): LifecycleEvent[] {\n    return [...this.history]\n  }\n\n  isPhaseExecuted(phase: LifecyclePhase): boolean {\n    return this.history.some(event => event.phase === phase && event.success)\n  }\n\n  // 错误处理\n  onError(\n    callback: (error: Error, context: LifecycleContext<T>) => void\n  ): () => void {\n    // 检查回调数量限制\n    if (this.errorCallbacks.length >= this.MAX_ERROR_CALLBACKS) {\n      this.logger?.warn(`Maximum error callbacks limit (${this.MAX_ERROR_CALLBACKS}) reached, removing oldest`)\n      this.errorCallbacks.shift() // 移除最旧的回调\n    }\n\n    this.errorCallbacks.push(callback)\n\n    return () => {\n      const index = this.errorCallbacks.indexOf(callback)\n      if (index > -1) {\n        this.errorCallbacks.splice(index, 1)\n      }\n    }\n  }\n\n  // 统计信息\n  getStats(): {\n    totalHooks: number\n    phaseStats: Record<LifecyclePhase, number>\n    executionHistory: LifecycleEvent[]\n    averageExecutionTime: number\n    errorCount: number\n  } {\n    const phaseStats = {} as Record<LifecyclePhase, number>\n\n    // 统计每个阶段的钩子数量\n    for (const [phase, hooks] of this.phaseHooks) {\n      phaseStats[phase] = hooks.size\n    }\n\n    // 计算平均执行时间\n    const executionTimes = this.history\n      .filter(event => event.duration !== undefined)\n      .map(event => event.duration || 0)\n\n    const averageExecutionTime =\n      executionTimes.length > 0\n        ? executionTimes.reduce((sum, time) => sum + time, 0) /\n        executionTimes.length\n        : 0\n\n    // 统计错误数量\n    const errorCount = this.history.filter(event => !event.success).length\n\n    return {\n      totalHooks: this.hooks.size,\n      phaseStats,\n      executionHistory: [...this.history],\n      averageExecutionTime,\n      errorCount,\n    }\n  }\n\n  // 清理\n  clear(): void {\n    this.hooks.clear()\n    this.phaseHooks.clear()\n    this.errorCallbacks.length = 0 // 更高效的数组清空\n    this.logger?.debug('Lifecycle manager cleared')\n  }\n\n  reset(): void {\n    this.clear()\n    this.history.length = 0 // 更高效的数组清空\n    this.currentPhase = undefined\n    this.hookIdCounter = 0\n    this.logger?.debug('Lifecycle manager reset')\n  }\n\n  // 销毁方法\n  destroy(): void {\n    this.clear()\n    this.history.length = 0\n    this.currentPhase = undefined\n    this.hookIdCounter = 0\n    this.logger = undefined\n  }\n\n  // 私有方法\n  private generateHookId(): string {\n    return `hook_${++this.hookIdCounter}_${Date.now()}`\n  }\n\n  private addToHistory(event: LifecycleEvent): void {\n    // 优化：使用环形缓冲区，避免 slice 创建新数组\n    if (this.history.length >= this.maxHistorySize) {\n      this.history.shift() // 移除最旧的\n    }\n    this.history.push(event)\n  }\n\n  // 移除最旧的钩子\n  private removeOldestHooks(count: number): void {\n    const sortedHooks = Array.from(this.hooks.entries())\n      .sort((a, b) => a[1].registeredAt - b[1].registeredAt)\n      .slice(0, count)\n\n    sortedHooks.forEach(([hookId, hookInfo]) => {\n      this.hooks.delete(hookId)\n      const phaseHooks = this.phaseHooks.get(hookInfo.phase)\n      if (phaseHooks) {\n        phaseHooks.delete(hookId)\n        if (phaseHooks.size === 0) {\n          this.phaseHooks.delete(hookInfo.phase)\n        }\n      }\n    })\n\n    this.logger?.debug('Removed oldest hooks', { count: sortedHooks.length })\n  }\n\n  private isCriticalPhase(phase: LifecyclePhase): boolean {\n    // 定义关键阶段，这些阶段的错误会停止后续钩子执行\n    const criticalPhases: LifecyclePhase[] = ['init', 'mount', 'destroy']\n\n    return criticalPhases.includes(phase)\n  }\n\n  // 添加缺失的方法\n  add(hook: { phase: LifecyclePhase; handler: LifecycleHook<T>; priority?: number }): void {\n    // 兼容性方法，委托给on方法\n    if (hook && hook.phase && hook.handler) {\n      this.on(hook.phase, hook.handler, hook.priority || 0)\n    }\n  }\n\n  remove(name: string): void {\n    // 兼容性方法，委托给off方法\n    this.off(name)\n  }\n\n  getOrder(phase: LifecyclePhase): string[] {\n    const hooks = this.getHooks(phase)\n    return hooks\n      .sort((a, b) => (b?.priority || 0) - (a?.priority || 0))\n      .map(h => h?.id || '')\n  }\n\n  validate(): unknown {\n    return {\n      valid: true,\n      errors: [],\n      warnings: [],\n    }\n  }\n\n  optimize(): void {\n    // 优化钩子执行顺序和性能\n    this.logger?.debug('Lifecycle hooks optimized')\n  }\n}\n\n// 工厂函数\nexport function createLifecycleManager<T = unknown>(\n  logger?: Logger\n): LifecycleManager<T> {\n  return new LifecycleManagerImpl<T>(logger)\n}\n\n// 生命周期装饰器\nexport function LifecycleHookDecorator(phase: LifecyclePhase, priority = 0) {\n  return function (\n    _target: unknown,\n    _propertyKey: string,\n    descriptor: PropertyDescriptor\n  ) {\n    const originalMethod = descriptor.value\n\n    // 在类实例化时自动注册钩子\n    descriptor.value = function (...args: unknown[]) {\n      const self = this as { lifecycle?: { on: (p: unknown, h: (...args: unknown[]) => unknown, pr: number) => void } }\n      if (self.lifecycle && typeof self.lifecycle.on === 'function') {\n        self.lifecycle.on(phase, originalMethod.bind(this), priority)\n      }\n      return originalMethod.apply(this, args)\n    }\n\n    return descriptor\n  }\n}\n\n// 预定义的生命周期阶段常量\nexport const LIFECYCLE_PHASES = {\n  BEFORE_INIT: 'beforeInit' as const,\n  INIT: 'init' as const,\n  AFTER_INIT: 'afterInit' as const,\n  BEFORE_MOUNT: 'beforeMount' as const,\n  MOUNT: 'mount' as const,\n  AFTER_MOUNT: 'afterMount' as const,\n  BEFORE_UNMOUNT: 'beforeUnmount' as const,\n  UNMOUNT: 'unmount' as const,\n  AFTER_UNMOUNT: 'afterUnmount' as const,\n  BEFORE_DESTROY: 'beforeDestroy' as const,\n  DESTROY: 'destroy' as const,\n  AFTER_DESTROY: 'afterDestroy' as const,\n  ERROR: 'error' as const,\n  CUSTOM: 'custom' as const,\n} as const\n\n// 生命周期阶段顺序\nexport const LIFECYCLE_ORDER: LifecyclePhase[] = [\n  'beforeInit',\n  'init',\n  'afterInit',\n  'beforeMount',\n  'mount',\n  'afterMount',\n  'beforeUnmount',\n  'unmount',\n  'afterUnmount',\n  'beforeDestroy',\n  'destroy',\n  'afterDestroy',\n]\n\n// 生命周期助手函数\nexport class LifecycleHelper {\n  static isValidPhase(phase: string): phase is LifecyclePhase {\n    return Object.values(LIFECYCLE_PHASES).includes(phase as LifecyclePhase)\n  }\n\n  static getPhaseIndex(phase: LifecyclePhase): number {\n    return LIFECYCLE_ORDER.indexOf(phase)\n  }\n\n  static isPhaseAfter(phase1: LifecyclePhase, phase2: LifecyclePhase): boolean {\n    const index1 = this.getPhaseIndex(phase1)\n    const index2 = this.getPhaseIndex(phase2)\n    return index1 > index2\n  }\n\n  static isPhaseBefore(\n    phase1: LifecyclePhase,\n    phase2: LifecyclePhase\n  ): boolean {\n    const index1 = this.getPhaseIndex(phase1)\n    const index2 = this.getPhaseIndex(phase2)\n    return index1 < index2\n  }\n\n  static getNextPhase(phase: LifecyclePhase): LifecyclePhase | undefined {\n    const index = this.getPhaseIndex(phase)\n    return index >= 0 && index < LIFECYCLE_ORDER.length - 1\n      ? LIFECYCLE_ORDER[index + 1]\n      : undefined\n  }\n\n  static getPreviousPhase(phase: LifecyclePhase): LifecyclePhase | undefined {\n    const index = this.getPhaseIndex(phase)\n    return index > 0 ? LIFECYCLE_ORDER[index - 1] : undefined\n  }\n}\n"],"names":[],"mappings":"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"}