{"version":3,"file":"create-locale-aware-plugin.js","sources":["../../src/locale/create-locale-aware-plugin.ts"],"sourcesContent":["/**\r\n * createLocaleAwarePlugin - 插件包装工具\r\n * \r\n * 将普通插件包装成支持自动语言同步的插件\r\n * 大幅减少样板代码，统一多语言管理\r\n */\r\n\r\nimport type { App } from 'vue'\r\nimport type { Engine } from '../types/engine'\r\nimport type { Plugin, PluginContext } from '../types/plugin'\r\nimport type { LocaleAwarePlugin } from './locale-manager'\r\n\r\n/**\r\n * 创建支持语言同步的插件配置\r\n */\r\nexport interface CreateLocaleAwarePluginOptions {\r\n  /**\r\n   * 插件名称（唯一标识）\r\n   * 用于在 LocaleManager 中注册\r\n   */\r\n  name: string\r\n\r\n  /**\r\n   * 是否同步语言\r\n   * @default true\r\n   */\r\n  syncLocale?: boolean\r\n\r\n  /**\r\n   * 插件版本号\r\n   * @default '1.0.0'\r\n   */\r\n  version?: string\r\n\r\n  /**\r\n   * 自定义安装逻辑\r\n   * 在插件本身的 install 方法执行后调用\r\n   */\r\n  afterInstall?: (engine: Engine, app: App) => void | Promise<void>\r\n}\r\n\r\n/**\r\n * 创建支持自动语言同步的 Engine 插件\r\n * \r\n * @param plugin 原始插件实例（必须实现 LocaleAwarePlugin 接口）\r\n * @param options 配置选项\r\n * @returns Engine Plugin\r\n * \r\n * @example\r\n * ```typescript\r\n * // 1. 创建原始插件\r\n * const colorPlugin = createColorPlugin(options)\r\n * \r\n * // 2. 包装成 Engine 插件（自动同步语言）\r\n * const colorEnginePlugin = createLocaleAwarePlugin(colorPlugin, {\r\n *   name: 'color',\r\n *   syncLocale: true\r\n * })\r\n * \r\n * // 3. 在应用中使用\r\n * const engine = await createEngineApp({\r\n *   plugins: [colorEnginePlugin]\r\n * })\r\n * \r\n * // 4. 语言自动同步到所有插件\r\n * engine.localeManager.setLocale('en-US')\r\n * ```\r\n */\r\nexport function createLocaleAwarePlugin<T extends LocaleAwarePlugin>(\r\n  plugin: T,\r\n  options: CreateLocaleAwarePluginOptions\r\n): Plugin {\r\n  const {\r\n    name,\r\n    syncLocale = true,\r\n    version = '1.0.0',\r\n    afterInstall\r\n  } = options\r\n\r\n  return {\r\n    name: `${name}-locale-aware`,\r\n    version,\r\n\r\n    async install(context: PluginContext<Engine>) {\r\n      const { engine } = context\r\n      // 1. 安装原始插件  \r\n      const app = (engine as any).app as App\r\n      if (typeof (plugin as any).install === 'function') {\r\n        (plugin as any).install(app)\r\n        ;(engine as any).logger?.debug(`Plugin \\\"${name}\\\" installed`, { syncLocale })\r\n      }\r\n\r\n      // 2. 注册到 LocaleManager（如果启用同步且 LocaleManager 存在）\r\n      // @deprecated - 保留用于兼容旧代码\r\n      if (syncLocale && (engine as any).localeManager) {\r\n        (engine as any).localeManager.register(name, plugin);\r\n        (engine as any).logger?.debug(`Plugin \"${name}\" registered to LocaleManager`)\r\n      }\r\n\r\n      // 3. 存储插件实例到 engine.state（方便其他地方访问）\r\n      if ((engine as any).state) {\r\n        (engine as any).state.set(`plugins.${name}`, plugin)\r\n      }\r\n\r\n      // 4. 调用自定义安装后钩子\r\n      if (afterInstall) {\r\n        await afterInstall(engine, app)\r\n      }\r\n\r\n      (engine as any).logger?.info(`Locale-aware plugin \"${name}\" installed successfully`)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 创建简化版的 LocaleAware Engine Plugin\r\n * \r\n * 适用于简单场景，直接传入插件创建函数和选项\r\n * \r\n * @example\r\n * ```typescript\r\n * export const createColorEnginePlugin = createSimpleLocaleAwarePlugin(\r\n *   createColorPlugin,\r\n *   'color'\r\n * )\r\n * \r\n * // 使用\r\n * const plugin = createColorEnginePlugin({ defaultTheme: 'blue' })\r\n * ```\r\n */\r\nexport function createSimpleLocaleAwarePlugin<\r\n  TOptions,\r\n  TPlugin extends LocaleAwarePlugin\r\n>(\r\n  pluginFactory: (options: TOptions) => TPlugin,\r\n  name: string\r\n): (options?: TOptions) => Plugin {\r\n  return (options?: TOptions) => {\r\n    const plugin = pluginFactory(options as TOptions)\r\n    return createLocaleAwarePlugin(plugin, { name })\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;AAoEM,SAAU,uBAAA,CACd,QACA,OAAA,EAAuC;AAEvC,EAAA,MAAM,EACJ,IAAA,EACA,UAAA,GAAa,MACb,OAAA,GAAU,OAAA,EACV,cAAY,GACV,OAAA;AAEJ,EAAA,OAAO;AAAA,IACL,IAAA,EAAM,GAAG,IAAI,CAAA,aAAA,CAAA;AAAA,IACb,OAAA;AAAA,IAEA,MAAM,QAAQ,OAAA,EAA8B;AAC1C,MAAA,MAAM,EAAE,QAAM,GAAK,OAAA;AAEnB,MAAA,MAAM,MAAO,MAAA,CAAe,GAAA;AAC5B,MAAA,IAAI,OAAQ,MAAA,CAAe,OAAA,KAAY,UAAA,EAAY;AAChD,QAAA,MAAA,CAAe,QAAQ,GAAG,CAAA;AACzB,QAAA,MAAA,CAAe,QAAQ,KAAA,CAAM,CAAA,QAAA,EAAY,IAAI,CAAA,WAAA,CAAA,EAAgB,EAAE,YAAY,CAAA;AAAA,MAC/E;AAIA,MAAA,IAAI,UAAA,IAAe,OAAe,aAAA,EAAe;AAC9C,QAAA,MAAA,CAAe,aAAA,CAAc,QAAA,CAAS,IAAA,EAAM,MAAM,CAAA;AAClD,QAAA,MAAA,CAAe,MAAA,EAAQ,KAAA,CAAM,CAAA,QAAA,EAAW,IAAI,CAAA,6BAAA,CAA+B,CAAA;AAAA,MAC9E;AAGA,MAAA,IAAK,OAAe,KAAA,EAAO;AACxB,QAAA,MAAA,CAAe,KAAA,CAAM,GAAA,CAAI,CAAA,QAAA,EAAW,IAAI,IAAI,MAAM,CAAA;AAAA,MACrD;AAGA,MAAA,IAAI,YAAA,EAAc;AAChB,QAAA,MAAM,YAAA,CAAa,QAAQ,GAAG,CAAA;AAAA,MAChC;AAEC,MAAA,MAAA,CAAe,MAAA,EAAQ,IAAA,CAAK,CAAA,qBAAA,EAAwB,IAAI,CAAA,wBAAA,CAA0B,CAAA;AAAA,IACrF;AAAA;AAEJ;AAkBM,SAAU,6BAAA,CAId,eACA,IAAA,EAAY;AAEZ,EAAA,OAAO,CAAC,OAAA,KAAsB;AAC5B,IAAA,MAAM,MAAA,GAAS,cAAc,OAAmB,CAAA;AAChD,IAAA,OAAO,uBAAA,CAAwB,MAAA,EAAQ,EAAE,IAAA,EAAM,CAAA;AAAA,EACjD,CAAA;AACF;;;;"}