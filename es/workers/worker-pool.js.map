{"version":3,"file":"worker-pool.js","sources":["../../src/workers/worker-pool.ts"],"sourcesContent":["/**\n * WebWorker Pool Manager\n * \n * 提供高效的 WebWorker 池管理，支持：\n * - 动态 Worker 池大小调整\n * - 任务队列和优先级\n * - 自动负载均衡\n * - 错误恢复和重试\n * - 内存监控和自动清理\n */\n\nimport type { Logger } from '../types'\n\n// Worker 任务类型\nexport interface WorkerTask<T = unknown> {\n  id: string\n  type: string\n  data: T\n  priority?: number\n  timeout?: number\n  retries?: number\n  transferable?: Transferable[]\n}\n\n// Worker 任务结果\nexport interface WorkerResult<R = unknown> {\n  id: string\n  success: boolean\n  data?: R\n  error?: string\n  duration: number\n}\n\n// Worker 配置\nexport interface WorkerPoolConfig {\n  minWorkers?: number\n  maxWorkers?: number\n  workerScript?: string | URL | (() => Worker)\n  taskTimeout?: number\n  idleTimeout?: number\n  maxRetries?: number\n  enableSharedArrayBuffer?: boolean\n  enablePreheating?: boolean // 启用预热\n  preheatTasks?: Array<WorkerTask> // 预热任务\n  enableSmartScheduling?: boolean // 启用智能调度\n  onError?: (error: Error, task: WorkerTask) => void\n  onSuccess?: (result: WorkerResult) => void\n}\n\n// Worker 状态\nexport interface WorkerState {\n  id: string\n  worker: Worker\n  busy: boolean\n  currentTask?: WorkerTask\n  tasksCompleted: number\n  errors: number\n  createdAt: number\n  lastUsedAt: number\n  // 智能调度相关\n  averageTaskTime: number // 平均任务时间\n  taskTypeStats: Map<string, { count: number; totalTime: number }> // 按任务类型统计\n  load: number // 当前负载（0-1）\n}\n\n// 任务队列项\ninterface QueuedTask<T = unknown, R = unknown> {\n  task: WorkerTask<T>\n  resolve: (result: WorkerResult<R>) => void\n  reject: (error: Error) => void\n  addedAt: number\n  attempts: number\n}\n\n/**\n * WebWorker 池管理器\n */\nexport class WorkerPool<T = unknown, R = unknown> {\n  private workers: Map<string, WorkerState> = new Map()\n  private taskQueue: QueuedTask<T, R>[] = []\n  private pendingTasks: Map<string, QueuedTask<T, R>> = new Map()\n  private config: Required<WorkerPoolConfig>\n  private idleCheckInterval?: NodeJS.Timeout\n  private metricsInterval?: NodeJS.Timeout\n  private isTerminated = false\n\n  // 性能指标\n  private metrics = {\n    totalTasks: 0,\n    completedTasks: 0,\n    failedTasks: 0,\n    averageTime: 0,\n    peakWorkers: 0,\n    currentQueueSize: 0\n  }\n\n  constructor(\n    config: WorkerPoolConfig = {},\n    private logger?: Logger\n  ) {\n    this.config = {\n      minWorkers: config.minWorkers || 2,\n      maxWorkers: config.maxWorkers || navigator.hardwareConcurrency || 4,\n      workerScript: config.workerScript || this.createDefaultWorker,\n      taskTimeout: config.taskTimeout || 30000,\n      idleTimeout: config.idleTimeout || 60000,\n      maxRetries: config.maxRetries || 3,\n      enableSharedArrayBuffer: config.enableSharedArrayBuffer || false,\n      enablePreheating: config.enablePreheating ?? true, // 默认启用预热\n      preheatTasks: config.preheatTasks || [],\n      enableSmartScheduling: config.enableSmartScheduling ?? true, // 默认启用智能调度\n      onError: config.onError || (() => { }),\n      onSuccess: config.onSuccess || (() => { })\n    }\n\n    this.initialize()\n\n    // 预热Workers\n    if (this.config.enablePreheating) {\n      this.preheatWorkers()\n    }\n  }\n\n  /**\n   * 初始化 Worker 池\n   */\n  private initialize(): void {\n    // 创建最小数量的 workers\n    for (let i = 0; i < this.config.minWorkers; i++) {\n      this.createWorker()\n    }\n\n    // 启动空闲检查\n    this.idleCheckInterval = setInterval(() => {\n      this.checkIdleWorkers()\n    }, 10000)\n\n    // 启动指标收集\n    this.metricsInterval = setInterval(() => {\n      this.updateMetrics()\n    }, 5000)\n\n    this.logger?.info('Worker pool initialized', {\n      minWorkers: this.config.minWorkers,\n      maxWorkers: this.config.maxWorkers\n    })\n  }\n\n  /**\n   * 预热Workers - 提前让Workers准备好执行任务\n   */\n  private async preheatWorkers(): Promise<void> {\n    const preheatTasks = this.config.preheatTasks || []\n\n    // 如果没有预定义的预热任务，创建一个简单的预热任务\n    if (preheatTasks.length === 0) {\n      preheatTasks.push({\n        id: 'preheat-default',\n        type: 'compute',\n        data: { iterations: 1000 } as any\n      })\n    }\n\n    this.logger?.debug('Preheating workers', { tasks: preheatTasks.length })\n\n    // 并行预热所有workers\n    const preheatPromises = Array.from(this.workers.values()).map(async (workerState) => {\n      for (const task of preheatTasks) {\n        try {\n          // 发送预热任务但不等待结果\n          workerState.worker.postMessage({\n            ...task,\n            id: `preheat-${workerState.id}-${task.id}`\n          })\n        } catch (error) {\n          this.logger?.warn(`Failed to preheat worker ${workerState.id}`, error)\n        }\n      }\n    })\n\n    await Promise.allSettled(preheatPromises)\n    this.logger?.debug('Worker preheating completed')\n  }\n\n  /**\n   * 创建新的 Worker\n   */\n  private createWorker(): WorkerState | null {\n    if (this.workers.size >= this.config.maxWorkers) {\n      return null\n    }\n\n    const workerId = `worker-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n\n    let worker: Worker\n    if (typeof this.config.workerScript === 'function') {\n      worker = this.config.workerScript()\n    } else if (typeof this.config.workerScript === 'string' || this.config.workerScript instanceof URL) {\n      worker = new Worker(this.config.workerScript)\n    } else {\n      worker = this.createDefaultWorker()\n    }\n\n    const state: WorkerState = {\n      id: workerId,\n      worker,\n      busy: false,\n      tasksCompleted: 0,\n      errors: 0,\n      createdAt: Date.now(),\n      lastUsedAt: Date.now(),\n      averageTaskTime: 0,\n      taskTypeStats: new Map(),\n      load: 0\n    }\n\n    // 设置 Worker 消息处理\n    worker.onmessage = (event) => {\n      this.handleWorkerMessage(workerId, event.data)\n    }\n\n    worker.onerror = (error) => {\n      this.handleWorkerError(workerId, error)\n    }\n\n    this.workers.set(workerId, state)\n\n    // 更新峰值\n    if (this.workers.size > this.metrics.peakWorkers) {\n      this.metrics.peakWorkers = this.workers.size\n    }\n\n    this.logger?.debug(`Worker ${workerId} created`)\n\n    return state\n  }\n\n  /**\n   * 创建默认 Worker 脚本\n   */\n  private createDefaultWorker(): Worker {\n    // 清理之前的 blob URL\n    if ((this as any).__workerBlobUrl) {\n      URL.revokeObjectURL((this as any).__workerBlobUrl)\n      delete (this as any).__workerBlobUrl\n    }\n\n    const workerScript = `\n      self.onmessage = async function(e) {\n        const { id, type, data } = e.data;\n        \n        try {\n          let result;\n          \n          // 根据任务类型执行不同操作\n          switch (type) {\n            case 'compute':\n              result = await performComputation(data);\n              break;\n            case 'transform':\n              result = await transformData(data);\n              break;\n            case 'analyze':\n              result = await analyzeData(data);\n              break;\n            default:\n              // 默认处理：执行传入的函数字符串\n              if (typeof data === 'string' && data.startsWith('function')) {\n                const fn = new Function('return ' + data)();\n                result = await fn();\n              } else {\n                result = data;\n              }\n          }\n          \n          self.postMessage({ id, success: true, data: result });\n        } catch (error) {\n          self.postMessage({ id, success: false, error: error.message });\n        }\n      };\n      \n      // 示例计算函数\n      async function performComputation(data) {\n        // 模拟耗时计算\n        let result = 0;\n        for (let i = 0; i < data.iterations || 1000000; i++) {\n          result += Math.sqrt(i);\n        }\n        return result;\n      }\n      \n      async function transformData(data) {\n        // 数据转换逻辑\n        return JSON.parse(JSON.stringify(data));\n      }\n      \n      async function analyzeData(data) {\n        // 数据分析逻辑\n        return {\n          size: JSON.stringify(data).length,\n          type: typeof data,\n          timestamp: Date.now()\n        };\n      }\n    `\n\n    const blob = new Blob([workerScript], { type: 'application/javascript' })\n    const url = URL.createObjectURL(blob)\n\n      // 存储 URL 以便后续清理\n      ; (this as any).__workerBlobUrl = url\n\n    return new Worker(url)\n  }\n\n  /**\n   * 执行任务\n   */\n  async execute(task: WorkerTask<T>): Promise<WorkerResult<R>> {\n    if (this.isTerminated) {\n      throw new Error('Worker pool has been terminated')\n    }\n\n    this.metrics.totalTasks++\n\n    return new Promise((resolve, reject) => {\n      const taskId = task.id || this.generateTaskId()\n      const queuedTask: QueuedTask<T, R> = {\n        task: {\n          ...task,\n          id: taskId,\n          priority: task.priority ?? 0,\n          timeout: task.timeout ?? this.config.taskTimeout,\n          retries: task.retries ?? this.config.maxRetries\n        },\n        resolve,\n        reject,\n        addedAt: Date.now(),\n        attempts: 0\n      }\n\n      // 尝试立即执行或加入队列\n      if (!this.tryExecuteTask(queuedTask)) {\n        this.enqueueTask(queuedTask)\n      }\n    })\n  }\n\n  /**\n   * 批量执行任务\n   */\n  async executeBatch(tasks: WorkerTask<T>[]): Promise<WorkerResult<R>[]> {\n    return Promise.all(tasks.map(task => this.execute(task)))\n  }\n\n  /**\n   * 并行执行任务并合并结果\n   */\n  async parallel<TR = R>(\n    data: T[],\n    mapper: (item: T, index: number) => WorkerTask<T>,\n    reducer?: (results: TR[]) => R\n  ): Promise<R> {\n    const tasks = data.map((item, index) => mapper(item, index))\n    const results = await this.executeBatch(tasks)\n\n    const successResults = results\n      .filter(r => r.success)\n      .map(r => r.data as TR)\n\n    if (reducer) {\n      return reducer(successResults) as R\n    }\n\n    return successResults as unknown as R\n  }\n\n  /**\n   * 尝试执行任务\n   */\n  private tryExecuteTask(queuedTask: QueuedTask<T, R>): boolean {\n    // 查找空闲的 worker（传入任务以支持智能调度）\n    let worker = this.findIdleWorker(queuedTask.task)\n\n    // 如果没有空闲 worker，尝试创建新的\n    if (!worker && this.workers.size < this.config.maxWorkers) {\n      const newWorker = this.createWorker()\n      if (newWorker) {\n        worker = newWorker\n      }\n    }\n\n    if (!worker) {\n      return false\n    }\n\n    // 标记为忙碌并执行任务\n    worker.busy = true\n    worker.currentTask = queuedTask.task\n    worker.lastUsedAt = Date.now()\n    queuedTask.attempts++\n\n    // 设置超时\n    const timeoutId = setTimeout(() => {\n      this.handleTaskTimeout(worker.id, queuedTask)\n    }, queuedTask.task.timeout!)\n\n    // 存储待处理任务\n    this.pendingTasks.set(queuedTask.task.id, {\n      ...queuedTask,\n      resolve: (result) => {\n        clearTimeout(timeoutId)\n        queuedTask.resolve(result)\n      },\n      reject: (error) => {\n        clearTimeout(timeoutId)\n        queuedTask.reject(error)\n      }\n    })\n\n    // 发送任务到 worker\n    try {\n      if (queuedTask.task.transferable) {\n        worker.worker.postMessage(queuedTask.task, queuedTask.task.transferable)\n      } else {\n        worker.worker.postMessage(queuedTask.task)\n      }\n\n      this.logger?.debug(`Task ${queuedTask.task.id} assigned to worker ${worker.id}`)\n      return true\n    } catch (error) {\n      this.handleWorkerError(worker.id, error as Error)\n      return false\n    }\n  }\n\n  /**\n   * 将任务加入队列\n   */\n  private enqueueTask(task: QueuedTask<T, R>): void {\n    // 按优先级插入队列\n    const insertIndex = this.taskQueue.findIndex(\n      t => (t.task.priority || 0) < (task.task.priority || 0)\n    )\n\n    if (insertIndex === -1) {\n      this.taskQueue.push(task)\n    } else {\n      this.taskQueue.splice(insertIndex, 0, task)\n    }\n\n    this.metrics.currentQueueSize = this.taskQueue.length\n\n    this.logger?.debug(`Task ${task.task.id} queued`, {\n      queueSize: this.taskQueue.length,\n      priority: task.task.priority\n    })\n  }\n\n  /**\n   * 处理 Worker 消息\n   */\n  private handleWorkerMessage(workerId: string, message: WorkerResult): void {\n    const worker = this.workers.get(workerId)\n    if (!worker) return\n\n    const task = this.pendingTasks.get(message.id)\n    if (!task) return\n\n    // 清理待处理任务\n    this.pendingTasks.delete(message.id)\n\n    // 更新 worker 状态\n    worker.busy = false\n    worker.currentTask = undefined\n    worker.tasksCompleted++\n\n    // 处理结果\n    const duration = Date.now() - task.addedAt\n    const result: WorkerResult<R> = {\n      id: message.id,\n      success: message.success,\n      data: message.data as R | undefined,\n      error: message.error,\n      duration\n    }\n\n    // 更新worker统计信息（用于智能调度）\n    if (message.success && this.config.enableSmartScheduling) {\n      // 更新平均任务时间\n      const totalTime = worker.averageTaskTime * (worker.tasksCompleted - 1) + duration\n      worker.averageTaskTime = totalTime / worker.tasksCompleted\n\n      // 更新任务类型统计\n      const taskType = task.task.type\n      const typeStats = worker.taskTypeStats.get(taskType) || { count: 0, totalTime: 0 }\n      typeStats.count++\n      typeStats.totalTime += duration\n      worker.taskTypeStats.set(taskType, typeStats)\n\n      // 更新负载（简单实现：基于任务完成速度）\n      worker.load = Math.min(duration / 1000 / 10, 1) // 归一化到0-1\n    }\n\n    if (message.success) {\n      this.metrics.completedTasks++\n      this.config.onSuccess(result)\n      task.resolve(result)\n\n      this.logger?.debug(`Task ${message.id} completed`, { duration })\n    } else {\n      // 重试逻辑\n      if (task.attempts < (task.task.retries || 0)) {\n        this.logger?.debug(`Retrying task ${message.id}`, {\n          attempt: task.attempts,\n          maxRetries: task.task.retries\n        })\n\n        if (!this.tryExecuteTask(task)) {\n          this.enqueueTask(task)\n        }\n      } else {\n        this.metrics.failedTasks++\n        const error = new Error(message.error || 'Task failed')\n        this.config.onError(error, task.task)\n        task.reject(error)\n\n        this.logger?.error(`Task ${message.id} failed`, { error: message.error })\n      }\n    }\n\n    // 处理队列中的下一个任务\n    this.processQueue()\n  }\n\n  /**\n   * 处理 Worker 错误\n   */\n  private handleWorkerError(workerId: string, error: Error | ErrorEvent): void {\n    const worker = this.workers.get(workerId)\n    if (!worker) return\n\n    worker.errors++\n\n    this.logger?.error(`Worker ${workerId} error`, error)\n\n    // 如果错误太多，终止并重建 worker\n    if (worker.errors > 3) {\n      this.terminateWorker(workerId)\n      this.createWorker()\n    }\n\n    // 重新分配当前任务\n    if (worker.currentTask) {\n      const task = this.pendingTasks.get(worker.currentTask.id)\n      if (task) {\n        this.pendingTasks.delete(worker.currentTask.id)\n        if (!this.tryExecuteTask(task)) {\n          this.enqueueTask(task)\n        }\n      }\n    }\n  }\n\n  /**\n   * 处理任务超时\n   */\n  private handleTaskTimeout(workerId: string, task: QueuedTask<T, R>): void {\n    this.logger?.warn(`Task ${task.task.id} timeout on worker ${workerId}`)\n\n    // 清理待处理任务\n    this.pendingTasks.delete(task.task.id)\n\n    // 重置 worker 状态而不是终止（避免频繁创建/销毁）\n    const worker = this.workers.get(workerId)\n    if (worker) {\n      worker.busy = false\n      worker.currentTask = undefined\n      worker.errors++\n\n      // 只有在错误过多时才终止\n      if (worker.errors > 3) {\n        this.terminateWorker(workerId)\n        this.createWorker()\n      }\n    }\n\n    // 重试任务\n    if (task.attempts < (task.task.retries || 0)) {\n      if (!this.tryExecuteTask(task)) {\n        this.enqueueTask(task)\n      }\n    } else {\n      task.reject(new Error('Task timeout'))\n    }\n  }\n\n  /**\n   * 处理队列中的任务\n   */\n  private processQueue(): void {\n    while (this.taskQueue.length > 0) {\n      const task = this.taskQueue[0]\n\n      if (this.tryExecuteTask(task)) {\n        this.taskQueue.shift()\n        this.metrics.currentQueueSize = this.taskQueue.length\n      } else {\n        break\n      }\n    }\n  }\n\n  /**\n   * 查找空闲的 Worker（智能调度版本）\n   * 根据任务类型和worker性能选择最合适的worker\n   */\n  private findIdleWorker(task?: WorkerTask): WorkerState | undefined {\n    const idleWorkers = Array.from(this.workers.values()).filter(w => !w.busy)\n\n    if (idleWorkers.length === 0) {\n      return undefined\n    }\n\n    // 如果未启用智能调度或没有任务信息，返回第一个空闲worker\n    if (!this.config.enableSmartScheduling || !task) {\n      return idleWorkers[0]\n    }\n\n    // 智能调度：根据任务类型和worker历史性能选择最佳worker\n    const taskType = task.type\n\n    // 为每个空闲worker计算得分\n    const scoredWorkers = idleWorkers.map(worker => {\n      let score = 0\n\n      // 1. 任务类型匹配度（如果worker之前执行过此类型任务）\n      const taskStats = worker.taskTypeStats.get(taskType)\n      if (taskStats && taskStats.count > 0) {\n        // 执行过该类型任务的worker优先级更高\n        const avgTime = taskStats.totalTime / taskStats.count\n        // 平均时间越短，得分越高\n        score += 100 - Math.min(avgTime / 10, 100)\n      } else {\n        // 没有执行过的worker得分较低\n        score += 30\n      }\n\n      // 2. 整体性能（平均任务时间）\n      if (worker.tasksCompleted > 0 && worker.averageTaskTime > 0) {\n        score += 100 - Math.min(worker.averageTaskTime / 10, 100)\n      } else {\n        score += 50 // 新worker给中等得分\n      }\n\n      // 3. 负载均衡（倾向选择负载较轻的worker）\n      score += (1 - worker.load) * 50\n\n      // 4. 错误率（错误少的worker得分高）\n      if (worker.tasksCompleted > 0) {\n        const errorRate = worker.errors / worker.tasksCompleted\n        score -= errorRate * 100\n      }\n\n      return { worker, score }\n    })\n\n    // 选择得分最高的worker\n    scoredWorkers.sort((a, b) => b.score - a.score)\n    const selected = scoredWorkers[0].worker\n\n    this.logger?.debug(`Smart scheduling selected worker ${selected.id}`, {\n      taskType,\n      score: scoredWorkers[0].score.toFixed(2)\n    })\n\n    return selected\n  }\n\n  /**\n   * 检查并清理空闲 Worker\n   */\n  private checkIdleWorkers(): void {\n    const now = Date.now()\n    const toTerminate: string[] = []\n\n    for (const [id, worker] of this.workers) {\n      if (!worker.busy &&\n        this.workers.size > this.config.minWorkers &&\n        now - worker.lastUsedAt > this.config.idleTimeout) {\n        toTerminate.push(id)\n      }\n    }\n\n    toTerminate.forEach(id => this.terminateWorker(id))\n  }\n\n  /**\n   * 终止指定 Worker\n   */\n  private terminateWorker(workerId: string): void {\n    const worker = this.workers.get(workerId)\n    if (!worker) return\n\n    // 清理当前任务的待处理项\n    if (worker.currentTask) {\n      const pendingTask = this.pendingTasks.get(worker.currentTask.id)\n      if (pendingTask) {\n        this.pendingTasks.delete(worker.currentTask.id)\n        pendingTask.reject(new Error('Worker terminated'))\n      }\n    }\n\n    // 清理事件监听器\n    worker.worker.onmessage = null\n    worker.worker.onerror = null\n\n    worker.worker.terminate()\n    this.workers.delete(workerId)\n\n    this.logger?.debug(`Worker ${workerId} terminated`)\n  }\n\n  /**\n   * 更新性能指标\n   */\n  private updateMetrics(): void {\n    const times: number[] = []\n\n    for (const worker of this.workers.values()) {\n      if (worker.tasksCompleted > 0) {\n        const avgTime = (Date.now() - worker.createdAt) / worker.tasksCompleted\n        times.push(avgTime)\n      }\n    }\n\n    if (times.length > 0) {\n      this.metrics.averageTime = times.reduce((a, b) => a + b, 0) / times.length\n    }\n\n    this.logger?.debug('Worker pool metrics', this.metrics)\n  }\n\n  /**\n   * 生成任务 ID\n   */\n  private generateTaskId(): string {\n    return `task-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n  }\n\n  /**\n   * 获取池状态\n   */\n  getStatus(): {\n    workers: number\n    busyWorkers: number\n    queueSize: number\n    metrics: typeof WorkerPool.prototype.metrics\n  } {\n    let busyWorkers = 0\n    for (const worker of this.workers.values()) {\n      if (worker.busy) busyWorkers++\n    }\n\n    return {\n      workers: this.workers.size,\n      busyWorkers,\n      queueSize: this.taskQueue.length,\n      metrics: { ...this.metrics }\n    }\n  }\n\n  /**\n   * 调整池大小\n   */\n  resize(minWorkers?: number, maxWorkers?: number): void {\n    if (minWorkers !== undefined) {\n      this.config.minWorkers = minWorkers\n    }\n\n    if (maxWorkers !== undefined) {\n      this.config.maxWorkers = maxWorkers\n    }\n\n    // 确保最小数量的 workers\n    while (this.workers.size < this.config.minWorkers) {\n      this.createWorker()\n    }\n\n    // 如果超过最大数量，终止多余的空闲 workers\n    if (this.workers.size > this.config.maxWorkers) {\n      const toTerminate: string[] = []\n\n      for (const [id, worker] of this.workers) {\n        if (!worker.busy && this.workers.size - toTerminate.length > this.config.maxWorkers) {\n          toTerminate.push(id)\n        }\n      }\n\n      toTerminate.forEach(id => this.terminateWorker(id))\n    }\n\n    this.logger?.info('Worker pool resized', {\n      minWorkers: this.config.minWorkers,\n      maxWorkers: this.config.maxWorkers,\n      currentWorkers: this.workers.size\n    })\n  }\n\n  /**\n   * 初始化统计数据\n   */\n  private initStats() {\n    return {\n      totalTasks: 0,\n      completedTasks: 0,\n      failedTasks: 0,\n      averageTime: 0,\n      peakWorkers: 0,\n      currentQueueSize: 0\n    }\n  }\n\n  /**\n   * 终止所有 Workers 和清理资源\n   */\n  terminate(): void {\n    this.isTerminated = true\n\n    // 清理定时器\n    if (this.idleCheckInterval) {\n      clearInterval(this.idleCheckInterval)\n      this.idleCheckInterval = undefined\n    }\n\n    if (this.metricsInterval) {\n      clearInterval(this.metricsInterval)\n      this.metricsInterval = undefined\n    }\n\n    // 终止所有 workers\n    for (const worker of this.workers.values()) {\n      // 清理事件监听器\n      worker.worker.onmessage = null\n      worker.worker.onerror = null\n      worker.worker.terminate()\n    }\n\n    this.workers.clear()\n\n    // 拒绝所有待处理任务\n    for (const task of this.pendingTasks.values()) {\n      task.reject(new Error('Worker pool terminated'))\n    }\n\n    for (const task of this.taskQueue) {\n      task.reject(new Error('Worker pool terminated'))\n    }\n\n    this.pendingTasks.clear()\n    this.taskQueue.length = 0 // 更高效的清空数组\n\n    // 清理 blob URLs（可能有多个）\n    if ((this as any).__workerBlobUrl) {\n      URL.revokeObjectURL((this as any).__workerBlobUrl)\n      delete (this as any).__workerBlobUrl\n    }\n\n    // 清理所有统计数据\n    this.metrics = this.initStats()\n\n    this.logger?.info('Worker pool terminated')\n  }\n\n  /**\n   * 别名方法 - 用于统一接口\n   */\n  destroy(): void {\n    this.terminate()\n  }\n}\n\n/**\n * 创建 Worker 池实例\n */\nexport function createWorkerPool<T = unknown, R = unknown>(\n  config?: WorkerPoolConfig,\n  logger?: Logger\n): WorkerPool<T, R> {\n  return new WorkerPool<T, R>(config, logger)\n}\n\n/**\n * 装饰器：在 Worker 中执行方法\n */\nexport function InWorker<T = unknown, R = unknown>(poolConfig?: WorkerPoolConfig) {\n  return function (\n    target: any,\n    propertyName: string,\n    descriptor: PropertyDescriptor\n  ) {\n    const originalMethod = descriptor.value\n    const pool = createWorkerPool<T, R>(poolConfig)\n\n    descriptor.value = async function (...args: any[]) {\n      const task: WorkerTask<T> = {\n        id: `${propertyName}-${Date.now()}`,\n        type: 'function',\n        data: {\n          fn: originalMethod.toString(),\n          args\n        } as T\n      }\n\n      const result = await pool.execute(task)\n\n      if (result.success) {\n        return result.data\n      } else {\n        throw new Error(result.error)\n      }\n    }\n\n    return descriptor\n  }\n}"],"names":[],"mappings":"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"}