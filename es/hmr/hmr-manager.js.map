{"version":3,"file":"hmr-manager.js","sources":["../../src/hmr/hmr-manager.ts"],"sourcesContent":["/**\r\n * 热模块替换(HMR)管理器\r\n * 🔥 提供开发环境的热更新支持，提升开发体验\r\n */\r\n\r\nimport type { Engine } from '../types/engine'\r\nimport type { Plugin } from '../types/plugin'\r\n\r\n// 扩展 ImportMeta 接口以支持 Vite HMR\r\ndeclare global {\r\n  interface ImportMeta {\r\n    hot?: {\r\n       \r\n      accept: (deps?: string | string[] | ((mod: any) => void), callback?: (newModule: any) => void) => void\r\n       \r\n      on: (event: string, callback: (...args: any[]) => void) => void\r\n       \r\n      dispose: (callback: (data: any) => void) => void\r\n       \r\n      data: any\r\n    }\r\n  }\r\n}\r\n\r\nexport interface HMROptions {\r\n  /** 是否启用HMR */\r\n  enabled?: boolean\r\n  /** HMR服务器地址 */\r\n  host?: string\r\n  /** HMR服务器端口 */\r\n  port?: number\r\n  /** 是否启用自动重连 */\r\n  autoReconnect?: boolean\r\n  /** 重连间隔(ms) */\r\n  reconnectInterval?: number\r\n  /** 最大重连次数 */\r\n  maxReconnectAttempts?: number\r\n  /** 是否保留应用状态 */\r\n  preserveState?: boolean\r\n  /** 自定义更新策略 */\r\n  updateStrategy?: 'reload' | 'patch' | 'preserve'\r\n}\r\n\r\nexport interface HMRModule {\r\n  /** 模块ID */\r\n  id: string\r\n  /** 模块类型 */\r\n  type: 'component' | 'plugin' | 'store' | 'route' | 'style'\r\n  /** 模块内容 */\r\n  content: unknown\r\n  /** 时间戳 */\r\n  timestamp: number\r\n  /** 依赖模块 */\r\n  dependencies?: string[]\r\n  /** 热更新处理器 */\r\n  hot?: {\r\n    accept?: (callback: (module: HMRModule) => void) => void\r\n    dispose?: (callback: (data?: unknown) => void) => void\r\n    data?: Record<string, unknown>\r\n  }\r\n}\r\n\r\nexport interface HMRUpdateEvent {\r\n  /** 更新类型 */\r\n  type: 'added' | 'modified' | 'removed'\r\n  /** 更新的模块 */\r\n  modules: HMRModule[]\r\n  /** 更新时间戳 */\r\n  timestamp: number\r\n}\r\n\r\n/**\r\n * HMR管理器实现\r\n */\r\nexport class HMRManager {\r\n  private engine: Engine\r\n  private options: Required<HMROptions>\r\n  private ws?: WebSocket\r\n  private modules: Map<string, HMRModule> = new Map()\r\n  private updateQueue: HMRUpdateEvent[] = []\r\n  private isProcessing = false\r\n  private reconnectAttempts = 0\r\n  private reconnectTimer?: number\r\n  private stateSnapshot?: Record<string, unknown>\r\n  \r\n  // Memory optimization\r\n  private readonly maxModules = 100\r\n  private readonly maxQueueSize = 50\r\n  private moduleAccessOrder = new Map<string, number>()\r\n  private accessCounter = 0\r\n\r\n  /** HMR事件监听器 */\r\n  private listeners: Map<string, Set<(event: HMRUpdateEvent) => void>> = new Map()\r\n\r\n  constructor(engine: Engine, options: HMROptions = {}) {\r\n    this.engine = engine\r\n    this.options = {\r\n      enabled: options.enabled ?? true,\r\n      host: options.host ?? 'localhost',\r\n      port: options.port ?? 3000,\r\n      autoReconnect: options.autoReconnect ?? true,\r\n      reconnectInterval: options.reconnectInterval ?? 2000,\r\n      maxReconnectAttempts: options.maxReconnectAttempts ?? 10,\r\n      preserveState: options.preserveState ?? true,\r\n      updateStrategy: options.updateStrategy ?? 'patch'\r\n    }\r\n\r\n    if (this.options.enabled && this.isDevelopment()) {\r\n      this.initialize()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 初始化HMR\r\n   */\r\n  private initialize(): void {\r\n    this.connect()\r\n    this.setupGlobalHandlers()\r\n    this.engine.logger.info('HMR Manager initialized', {\r\n      host: this.options.host,\r\n      port: this.options.port,\r\n      strategy: this.options.updateStrategy\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 连接到HMR服务器\r\n   */\r\n  private connect(): void {\r\n    const wsUrl = `ws://${this.options.host}:${this.options.port}/hmr`\r\n\r\n    try {\r\n      this.ws = new WebSocket(wsUrl)\r\n\r\n      this.ws.onopen = () => {\r\n        this.reconnectAttempts = 0\r\n        this.engine.logger.info('HMR connected to server')\r\n        this.engine.events.emit('hmr:connected', { url: wsUrl })\r\n      }\r\n\r\n      this.ws.onmessage = (event) => {\r\n        this.handleMessage(event.data)\r\n      }\r\n\r\n      this.ws.onerror = (error) => {\r\n        this.engine.logger.error('HMR connection error', error)\r\n      }\r\n\r\n      this.ws.onclose = () => {\r\n        this.engine.logger.warn('HMR connection closed')\r\n        this.engine.events.emit('hmr:disconnected')\r\n\r\n        if (this.options.autoReconnect) {\r\n          this.scheduleReconnect()\r\n        }\r\n      }\r\n    } catch (error) {\r\n      this.engine.logger.error('Failed to create HMR connection', error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 处理HMR消息\r\n   */\r\n  private handleMessage(data: string): void {\r\n    try {\r\n      const message = JSON.parse(data)\r\n\r\n      switch (message.type) {\r\n        case 'update':\r\n          this.handleUpdate(message.payload)\r\n          break\r\n        case 'full-reload':\r\n          this.handleFullReload()\r\n          break\r\n        case 'error':\r\n          this.handleError(message.payload)\r\n          break\r\n        case 'heartbeat':\r\n          // 心跳包，保持连接\r\n          break\r\n        default:\r\n          this.engine.logger.warn('Unknown HMR message type', message.type)\r\n      }\r\n    } catch (error) {\r\n      this.engine.logger.error('Failed to parse HMR message', error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 处理模块更新\r\n   */\r\n  private async handleUpdate(payload: HMRUpdateEvent): Promise<void> {\r\n    // 限制更新队列大小\r\n    if (this.updateQueue.length >= this.maxQueueSize) {\r\n      this.engine.logger.warn('HMR update queue full, removing oldest updates')\r\n      this.updateQueue = this.updateQueue.slice(-Math.floor(this.maxQueueSize / 2))\r\n    }\r\n    \r\n    // 加入更新队列\r\n    this.updateQueue.push(payload)\r\n\r\n    // 如果正在处理，直接返回\r\n    if (this.isProcessing) {\r\n      return\r\n    }\r\n\r\n    // 批量处理更新\r\n    this.isProcessing = true\r\n\r\n    try {\r\n      // 保存当前状态\r\n      if (this.options.preserveState) {\r\n        this.saveState()\r\n      }\r\n\r\n      while (this.updateQueue.length > 0) {\r\n        const update = this.updateQueue.shift()\r\n        if (!update) break\r\n        await this.applyUpdate(update)\r\n      }\r\n\r\n      // 恢复状态\r\n      if (this.options.preserveState) {\r\n        this.restoreState()\r\n      }\r\n\r\n      this.engine.logger.info('HMR updates applied successfully')\r\n      this.engine.events.emit('hmr:updated', payload)\r\n    } catch (error) {\r\n      this.engine.logger.error('Failed to apply HMR updates', error)\r\n      this.handleFullReload()\r\n    } finally {\r\n      this.isProcessing = false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 应用单个更新\r\n   */\r\n  private async applyUpdate(update: HMRUpdateEvent): Promise<void> {\r\n    for (const module of update.modules) {\r\n      switch (module.type) {\r\n        case 'component':\r\n          await this.updateComponent(module)\r\n          break\r\n        case 'plugin':\r\n          await this.updatePlugin(module)\r\n          break\r\n        case 'store':\r\n          await this.updateStore(module)\r\n          break\r\n        case 'route':\r\n          await this.updateRoute(module)\r\n          break\r\n        case 'style':\r\n          await this.updateStyle(module)\r\n          break\r\n        default:\r\n          this.engine.logger.warn('Unknown module type', module.type)\r\n      }\r\n\r\n      // 更新模块缓存 with LRU eviction\r\n      this.setModuleWithEviction(module.id, module)\r\n\r\n      // 触发模块的热更新回调\r\n      if (module.hot?.accept) {\r\n        module.hot.accept(() => {\r\n          this.engine.logger.debug('Module hot reload callback', module.id)\r\n        })\r\n      }\r\n    }\r\n\r\n    // 通知监听器\r\n    this.notifyListeners(update)\r\n  }\r\n\r\n  /**\r\n   * 更新组件\r\n   */\r\n  private async updateComponent(module: HMRModule): Promise<void> {\r\n    // 使用Vue的热更新API\r\n    if (import.meta.hot && typeof import.meta.hot.accept === 'function') {\r\n       \r\n      import.meta.hot.accept(module.id, (newModule: any) => {\r\n        // 更新组件实例\r\n        this.engine.logger.debug('Component hot updated', { moduleId: module.id, newModule })\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 更新插件\r\n   */\r\n  private async updatePlugin(module: HMRModule): Promise<void> {\r\n    const plugin = module.content as Plugin\r\n\r\n    // 先卸载旧插件\r\n    if (module.hot?.dispose) {\r\n      module.hot.dispose((_data: unknown) => {\r\n        // 保存需要的数据\r\n        this.engine.logger.debug('Plugin disposed', module.id)\r\n      })\r\n    }\r\n\r\n    // 重新安装插件\r\n    await this.engine.use(plugin)\r\n\r\n    this.engine.logger.debug('Plugin hot updated', module.id)\r\n  }\r\n\r\n  /**\r\n   * 更新存储\r\n   */\r\n  private async updateStore(module: HMRModule): Promise<void> {\r\n    // 获取当前状态\r\n    const currentState = this.engine.state.getState()\r\n\r\n    // 应用新的store模块\r\n    // 这里需要根据具体的状态管理方案实现\r\n\r\n    // 合并状态\r\n    if (this.options.preserveState) {\r\n      this.engine.state.setState({\r\n        ...currentState,\r\n        ...module.content as Record<string, unknown>\r\n      })\r\n    }\r\n\r\n    this.engine.logger.debug('Store hot updated', module.id)\r\n  }\r\n\r\n  /**\r\n   * 更新路由\r\n   */\r\n  private async updateRoute(module: HMRModule): Promise<void> {\r\n    if (!this.engine.router) {\r\n      return\r\n    }\r\n\r\n    // 更新路由配置\r\n    // 这里需要根据具体的路由方案实现\r\n\r\n    this.engine.logger.debug('Route hot updated', module.id)\r\n  }\r\n\r\n  /**\r\n   * 更新样式\r\n   */\r\n  private async updateStyle(module: HMRModule): Promise<void> {\r\n    const styleId = `hmr-style-${module.id}`\r\n    let styleElement = document.getElementById(styleId)\r\n\r\n    if (!styleElement) {\r\n      styleElement = document.createElement('style')\r\n      styleElement.id = styleId\r\n      document.head.appendChild(styleElement)\r\n    }\r\n\r\n    styleElement.textContent = module.content as string\r\n\r\n    this.engine.logger.debug('Style hot updated', module.id)\r\n  }\r\n\r\n  /**\r\n   * 处理完全重载\r\n   */\r\n  private handleFullReload(): void {\r\n    this.engine.logger.info('Full reload required')\r\n    window.location.reload()\r\n  }\r\n\r\n  /**\r\n   * 处理错误\r\n   */\r\n  private handleError(error: unknown): void {\r\n    this.engine.logger.error('HMR error', error)\r\n\r\n    // 显示错误覆盖层\r\n    this.showErrorOverlay(error)\r\n  }\r\n\r\n  /**\r\n   * 显示错误覆盖层\r\n   */\r\n  private showErrorOverlay(error: unknown): void {\r\n    // Remove existing overlay if exists\r\n    const existingOverlay = document.getElementById('hmr-error-overlay')\r\n    if (existingOverlay) {\r\n      existingOverlay.remove()\r\n    }\r\n    \r\n    const overlay = document.createElement('div')\r\n    overlay.id = 'hmr-error-overlay'\r\n    overlay.style.cssText = `\r\n      position: fixed;\r\n      top: 0;\r\n      left: 0;\r\n      right: 0;\r\n      bottom: 0;\r\n      background: rgba(0, 0, 0, 0.85);\r\n      color: #e74c3c;\r\n      font-family: monospace;\r\n      padding: 20px;\r\n      z-index: 999999;\r\n      overflow: auto;\r\n    `\r\n\r\n    const errorText = error instanceof Error\r\n      ? `${error.message}\\n\\n${error.stack}`\r\n      : String(error)\r\n\r\n    overlay.innerHTML = `\r\n      <div style=\"max-width: 800px; margin: 0 auto;\">\r\n        <h2 style=\"color: #e74c3c;\">⚠️ HMR Error</h2>\r\n        <pre style=\"white-space: pre-wrap; word-wrap: break-word;\">${errorText}</pre>\r\n        <button onclick=\"document.getElementById('hmr-error-overlay').remove()\" \r\n                style=\"margin-top: 20px; padding: 10px 20px; background: #e74c3c; color: white; border: none; cursor: pointer;\">\r\n          Dismiss\r\n        </button>\r\n      </div>\r\n    `\r\n\r\n    document.body.appendChild(overlay)\r\n    \r\n    // Auto-remove after 30 seconds to prevent memory leak\r\n    setTimeout(() => {\r\n      if (document.getElementById('hmr-error-overlay') === overlay) {\r\n        overlay.remove()\r\n      }\r\n    }, 30000)\r\n  }\r\n\r\n  /**\r\n   * 安排重连\r\n   */\r\n  private scheduleReconnect(): void {\r\n    if (this.reconnectAttempts >= this.options.maxReconnectAttempts) {\r\n      this.engine.logger.error('Max reconnection attempts reached')\r\n      return\r\n    }\r\n\r\n    this.reconnectAttempts++\r\n\r\n    this.reconnectTimer = window.setTimeout(() => {\r\n      this.engine.logger.info('Attempting to reconnect HMR...', {\r\n        attempt: this.reconnectAttempts\r\n      })\r\n      this.connect()\r\n    }, this.options.reconnectInterval)\r\n  }\r\n\r\n  /**\r\n   * 保存当前状态\r\n   */\r\n  private saveState(): void {\r\n    this.stateSnapshot = {\r\n      store: this.engine.state.getState(),\r\n      router: this.engine.router?.getCurrentRoute?.(),\r\n      // 可以添加更多需要保存的状态\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 恢复状态\r\n   */\r\n  private restoreState(): void {\r\n    if (!this.stateSnapshot) {\r\n      return\r\n    }\r\n\r\n    // 恢复存储状态\r\n    if (this.stateSnapshot.store) {\r\n      this.engine.state.setState(this.stateSnapshot.store as Record<string, unknown>)\r\n    }\r\n\r\n    // 恢复路由状态\r\n    if (this.stateSnapshot.router && this.engine.router?.navigate) {\r\n      this.engine.router.navigate(this.stateSnapshot.router as string)\r\n    }\r\n\r\n    this.stateSnapshot = undefined\r\n  }\r\n\r\n  /**\r\n   * 设置全局处理器\r\n   */\r\n  private setupGlobalHandlers(): void {\r\n    // 监听Vite/Webpack的HMR API\r\n    if (import.meta.hot) {\r\n      import.meta.hot.on('vite:beforeUpdate', () => {\r\n        this.engine.logger.debug('Vite HMR update detected')\r\n      })\r\n\r\n       \r\n      import.meta.hot.on('vite:error', (error: any) => {\r\n        this.handleError(error)\r\n      })\r\n    }\r\n\r\n    // 监听webpack的HMR API\r\n     \r\n    if ((module as any).hot) {\r\n       \r\n      (module as any).hot.addStatusHandler((status: string) => {\r\n        this.engine.logger.debug('Webpack HMR status', status)\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 检查是否为开发环境\r\n   */\r\n  private isDevelopment(): boolean {\r\n    return this.engine.config.get('debug', false) as boolean ||\r\n           (typeof window !== 'undefined' && window.location?.hostname === 'localhost')\r\n  }\r\n\r\n  /**\r\n   * 注册HMR监听器\r\n   */\r\n  on(event: string, listener: (event: HMRUpdateEvent) => void): void {\r\n    if (!this.listeners.has(event)) {\r\n      this.listeners.set(event, new Set())\r\n    }\r\n    const listeners = this.listeners.get(event)\r\n    listeners?.add(listener)\r\n  }\r\n\r\n  /**\r\n   * 移除HMR监听器\r\n   */\r\n  off(event: string, listener: (event: HMRUpdateEvent) => void): void {\r\n    this.listeners.get(event)?.delete(listener)\r\n  }\r\n\r\n  /**\r\n   * 通知监听器\r\n   */\r\n  private notifyListeners(event: HMRUpdateEvent): void {\r\n    const listeners = this.listeners.get(event.type)\r\n    if (listeners) {\r\n      listeners.forEach(listener => listener(event))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 手动触发模块更新\r\n   */\r\n  async updateModule(moduleId: string, content: unknown): Promise<void> {\r\n    const module: HMRModule = {\r\n      id: moduleId,\r\n      type: 'component', // 默认类型\r\n      content,\r\n      timestamp: Date.now()\r\n    }\r\n\r\n    await this.applyUpdate({\r\n      type: 'modified',\r\n      modules: [module],\r\n      timestamp: Date.now()\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 获取模块\r\n   */\r\n  getModule(moduleId: string): HMRModule | undefined {\r\n    return this.modules.get(moduleId)\r\n  }\r\n\r\n  /**\r\n   * 检查是否已连接\r\n   */\r\n  isConnected(): boolean {\r\n    return this.ws?.readyState === WebSocket.OPEN\r\n  }\r\n\r\n  /**\r\n   * 设置模块并进行LRU驱逐\r\n   */\r\n  private setModuleWithEviction(id: string, module: HMRModule): void {\r\n    // Update access order\r\n    this.moduleAccessOrder.set(id, ++this.accessCounter)\r\n    \r\n    // Check if eviction needed\r\n    if (this.modules.size >= this.maxModules && !this.modules.has(id)) {\r\n      // Find least recently used module\r\n      let lruId: string | null = null\r\n      let minAccess = Infinity\r\n      \r\n      for (const [moduleId] of this.modules) {\r\n        const access = this.moduleAccessOrder.get(moduleId) || 0\r\n        if (access < minAccess) {\r\n          minAccess = access\r\n          lruId = moduleId\r\n        }\r\n      }\r\n      \r\n      // Evict LRU module\r\n      if (lruId) {\r\n        const oldModule = this.modules.get(lruId)\r\n        if (oldModule?.hot?.dispose) {\r\n          oldModule.hot.dispose(() => {})\r\n        }\r\n        this.modules.delete(lruId)\r\n        this.moduleAccessOrder.delete(lruId)\r\n      }\r\n    }\r\n    \r\n    this.modules.set(id, module)\r\n  }\r\n  \r\n  /**\r\n   * 销毁HMR管理器\r\n   */\r\n  destroy(): void {\r\n    // Close WebSocket connection\r\n    if (this.ws) {\r\n      this.ws.onopen = null\r\n      this.ws.onmessage = null\r\n      this.ws.onerror = null\r\n      this.ws.onclose = null\r\n      this.ws.close()\r\n      this.ws = undefined\r\n    }\r\n\r\n    // Clear timers\r\n    if (this.reconnectTimer) {\r\n      clearTimeout(this.reconnectTimer)\r\n      this.reconnectTimer = undefined\r\n    }\r\n\r\n    // Dispose all modules\r\n    for (const [, module] of this.modules) {\r\n      if (module.hot?.dispose) {\r\n        module.hot.dispose(() => {})\r\n      }\r\n    }\r\n    \r\n    // Clear error overlay\r\n    const overlay = document.getElementById('hmr-error-overlay')\r\n    if (overlay) {\r\n      overlay.remove()\r\n    }\r\n\r\n    // Clear all collections\r\n    this.modules.clear()\r\n    this.moduleAccessOrder.clear()\r\n    this.updateQueue.length = 0\r\n    this.listeners.clear()\r\n    this.stateSnapshot = undefined\r\n\r\n    this.engine.logger.info('HMR Manager destroyed')\r\n  }\r\n}\r\n\r\n/**\r\n * 创建HMR管理器\r\n */\r\nexport function createHMRManager(engine: Engine, options?: HMROptions): HMRManager {\r\n  return new HMRManager(engine, options)\r\n}\r\n"],"names":["module"],"mappings":"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"}