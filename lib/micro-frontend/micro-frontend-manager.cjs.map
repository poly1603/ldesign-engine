{"version":3,"file":"micro-frontend-manager.cjs","sources":["../../src/micro-frontend/micro-frontend-manager.ts"],"sourcesContent":["/**\r\n * 微前端管理器\r\n * 支持模块联邦、动态加载和应用隔离\r\n */\r\n\r\nimport type { Logger } from '../types'\r\nimport type { Engine } from '../types/engine'\r\n\r\n// ==================== 类型定义 ====================\r\n\r\nexport interface MicroApp {\r\n  name: string\r\n  entry: string | MicroAppEntry\r\n  container: string | HTMLElement\r\n  activeRule: string | RegExp | ((location: Location) => boolean)\r\n  props?: Record<string, unknown>\r\n  sandbox?: boolean | SandboxConfig\r\n  prefetch?: boolean | 'all'\r\n  singular?: boolean\r\n  loader?: (loading: boolean) => void\r\n}\r\n\r\nexport interface MicroAppEntry {\r\n  scripts?: string[]\r\n  styles?: string[]\r\n  html?: string\r\n}\r\n\r\nexport interface SandboxConfig {\r\n  strictStyleIsolation?: boolean\r\n  experimentalStyleIsolation?: boolean\r\n  patchers?: SandboxPatcher[]\r\n}\r\n\r\nexport interface SandboxPatcher {\r\n  mount?: (app: LoadedMicroApp) => void\r\n  unmount?: (app: LoadedMicroApp) => void\r\n}\r\n\r\nexport interface LoadedMicroApp extends MicroApp {\r\n  id: string\r\n  status: 'loading' | 'loaded' | 'mounting' | 'mounted' | 'unmounting' | 'error'\r\n  instance?: MicroAppInstance\r\n  error?: Error\r\n  sandboxInstance?: Sandbox\r\n}\r\n\r\nexport interface MicroAppInstance {\r\n  mount: (props?: Record<string, unknown>) => Promise<void>\r\n  unmount: () => Promise<void>\r\n  update?: (props: Record<string, unknown>) => Promise<void>\r\n  getStatus?: () => string\r\n}\r\n\r\nexport interface Sandbox {\r\n  proxy: WindowProxy\r\n  active: boolean\r\n  mount: () => void\r\n  unmount: () => void\r\n  clear: () => void\r\n}\r\n\r\nexport interface ModuleFederationConfig {\r\n  name: string\r\n  filename?: string\r\n  exposes?: Record<string, string>\r\n  remotes?: Record<string, string>\r\n  shared?: Record<string, SharedConfig>\r\n}\r\n\r\nexport interface SharedConfig {\r\n  singleton?: boolean\r\n  strictVersion?: boolean\r\n  requiredVersion?: string\r\n  eager?: boolean\r\n}\r\n\r\n// ==================== 实现 ====================\r\n\r\nexport class MicroFrontendManager {\r\n  private apps = new Map<string, LoadedMicroApp>()\r\n  private currentApp?: LoadedMicroApp\r\n  private engine?: Engine\r\n  private logger?: Logger\r\n  private routerMode: 'hash' | 'history' = 'history'\r\n  private globalState = new Map<string, unknown>()\r\n  private eventBus = new Map<string, Set<(...args: any[]) => void>>()\r\n  private prefetchQueue: Set<string> = new Set()\r\n  private moduleFederations = new Map<string, ModuleFederationConfig>()\r\n\r\n  constructor(engine?: Engine) {\r\n    this.engine = engine\r\n    this.logger = engine?.logger\r\n    this.initialize()\r\n  }\r\n\r\n  // ==================== 公共 API ====================\r\n\r\n  /**\r\n   * 注册微应用\r\n   */\r\n  registerApp(app: MicroApp): void {\r\n    const id = this.generateAppId(app.name)\r\n    const loadedApp: LoadedMicroApp = {\r\n      ...app,\r\n      id,\r\n      status: 'loading'\r\n    }\r\n    \r\n    this.apps.set(app.name, loadedApp)\r\n    this.logger?.debug(`Micro app registered: ${app.name}`)\r\n    \r\n    // 预加载\r\n    if (app.prefetch) {\r\n      this.prefetchApp(loadedApp)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 批量注册微应用\r\n   */\r\n  registerApps(apps: MicroApp[]): void {\r\n    apps.forEach(app => this.registerApp(app))\r\n  }\r\n\r\n  /**\r\n   * 启动微前端系统\r\n   */\r\n  async start(): Promise<void> {\r\n    this.logger?.info('Starting micro frontend system')\r\n    \r\n    // 监听路由变化\r\n    this.setupRouteListener()\r\n    \r\n    // 检查当前路由\r\n    await this.checkCurrentRoute()\r\n  }\r\n\r\n  /**\r\n   * 手动加载应用\r\n   */\r\n  async loadApp(name: string): Promise<LoadedMicroApp> {\r\n    const app = this.apps.get(name)\r\n    if (!app) {\r\n      throw new Error(`Micro app not found: ${name}`)\r\n    }\r\n    \r\n    if (app.status === 'loaded' || app.status === 'mounted') {\r\n      return app\r\n    }\r\n    \r\n    try {\r\n      app.status = 'loading'\r\n      app.loader?.(true)\r\n      \r\n      // 加载应用资源\r\n      const { scripts, styles } = await this.fetchAppResources(app)\r\n      \r\n      // 创建沙箱\r\n      if (app.sandbox !== false) {\r\n        app.sandboxInstance = this.createSandbox(app)\r\n      }\r\n      \r\n      // 执行脚本\r\n      const instance = await this.executeScripts(scripts, app)\r\n      app.instance = instance\r\n      \r\n      // 应用样式\r\n      this.applyStyles(styles, app)\r\n      \r\n      app.status = 'loaded'\r\n      app.loader?.(false)\r\n      \r\n      this.logger?.info(`Micro app loaded: ${name}`)\r\n      return app\r\n      \r\n    } catch (error) {\r\n      app.status = 'error'\r\n      app.error = error as Error\r\n      app.loader?.(false)\r\n      this.logger?.error(`Failed to load micro app: ${name}`, error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 挂载应用\r\n   */\r\n  async mountApp(name: string, props?: Record<string, unknown>): Promise<void> {\r\n    const app = await this.loadApp(name)\r\n    \r\n    if (app.status === 'mounted') {\r\n      return\r\n    }\r\n    \r\n    // 卸载当前应用（如果是单例模式）\r\n    if (app.singular && this.currentApp && this.currentApp !== app) {\r\n      await this.unmountApp(this.currentApp.name)\r\n    }\r\n    \r\n    try {\r\n      app.status = 'mounting'\r\n      \r\n      // 激活沙箱\r\n      if (app.sandboxInstance) {\r\n        app.sandboxInstance.mount()\r\n      }\r\n      \r\n      // 挂载应用\r\n      await app.instance?.mount({\r\n        ...app.props,\r\n        ...props,\r\n        container: this.getContainer(app.container),\r\n        globalState: this.globalState,\r\n        onGlobalStateChange: this.onGlobalStateChange.bind(this),\r\n        setGlobalState: this.setGlobalState.bind(this),\r\n        emit: this.emit.bind(this),\r\n        on: this.on.bind(this),\r\n        off: this.off.bind(this)\r\n      })\r\n      \r\n      app.status = 'mounted'\r\n      this.currentApp = app\r\n      \r\n      this.logger?.info(`Micro app mounted: ${name}`)\r\n      \r\n    } catch (error) {\r\n      app.status = 'error'\r\n      app.error = error as Error\r\n      this.logger?.error(`Failed to mount micro app: ${name}`, error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 卸载应用\r\n   */\r\n  async unmountApp(name: string): Promise<void> {\r\n    const app = this.apps.get(name)\r\n    if (!app || app.status !== 'mounted') {\r\n      return\r\n    }\r\n    \r\n    try {\r\n      app.status = 'unmounting'\r\n      \r\n      // 卸载应用\r\n      await app.instance?.unmount()\r\n      \r\n      // 停用沙箱\r\n      if (app.sandboxInstance) {\r\n        app.sandboxInstance.unmount()\r\n      }\r\n      \r\n      app.status = 'loaded'\r\n      \r\n      if (this.currentApp === app) {\r\n        this.currentApp = undefined\r\n      }\r\n      \r\n      this.logger?.info(`Micro app unmounted: ${name}`)\r\n      \r\n    } catch (error) {\r\n      app.error = error as Error\r\n      this.logger?.error(`Failed to unmount micro app: ${name}`, error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 更新应用\r\n   */\r\n  async updateApp(name: string, props: Record<string, unknown>): Promise<void> {\r\n    const app = this.apps.get(name)\r\n    if (!app || app.status !== 'mounted') {\r\n      return\r\n    }\r\n    \r\n    if (app.instance?.update) {\r\n      await app.instance.update(props)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 设置全局状态\r\n   */\r\n  setGlobalState(state: Record<string, unknown>): void {\r\n    Object.entries(state).forEach(([key, value]) => {\r\n      const oldValue = this.globalState.get(key)\r\n      this.globalState.set(key, value)\r\n      \r\n      // 触发变化监听\r\n      this.emit(`globalState:${key}`, { oldValue, newValue: value })\r\n    })\r\n    \r\n    this.emit('globalStateChange', state)\r\n  }\r\n\r\n  /**\r\n   * 监听全局状态变化\r\n   */\r\n  onGlobalStateChange(\r\n    callback: (state: Map<string, unknown>, prev: Map<string, unknown>) => void\r\n  ): () => void {\r\n    const handler = (_data?: unknown) => {\r\n      callback(this.globalState, new Map(this.globalState))\r\n    }\r\n    \r\n    this.on('globalStateChange', handler)\r\n    \r\n    return () => this.off('globalStateChange', handler)\r\n  }\r\n\r\n  /**\r\n   * 配置模块联邦\r\n   */\r\n  configureModuleFederation(config: ModuleFederationConfig): void {\r\n    this.moduleFederations.set(config.name, config)\r\n    this.setupModuleFederation(config)\r\n  }\r\n\r\n  /**\r\n   * 加载联邦模块\r\n   */\r\n  async loadFederatedModule<T = any>(\r\n    scope: string,\r\n    module: string\r\n  ): Promise<T> {\r\n    try {\r\n      // @ts-expect-error webpack runtime\r\n      await __webpack_init_sharing__('default')\r\n      \r\n      const container = (window as any)[scope]\r\n      // @ts-expect-error webpack runtime\r\n      await container.init(__webpack_share_scopes__.default)\r\n      \r\n      const factory = await container.get(module)\r\n      const Module = factory()\r\n      \r\n      return Module as T\r\n    } catch (error) {\r\n      this.logger?.error(`Failed to load federated module: ${scope}/${module}`, error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  // ==================== 私有方法 ====================\r\n\r\n  private initialize(): void {\r\n    // 初始化全局错误处理\r\n    this.setupErrorHandler()\r\n    \r\n    // 初始化性能监控\r\n    this.setupPerformanceMonitor()\r\n  }\r\n\r\n  private generateAppId(name: string): string {\r\n    return `micro-app-${name}-${Date.now()}`\r\n  }\r\n\r\n  private setupRouteListener(): void {\r\n    const handleRouteChange = async () => {\r\n      await this.checkCurrentRoute()\r\n    }\r\n    \r\n    // 监听 popstate 事件\r\n    window.addEventListener('popstate', handleRouteChange)\r\n    \r\n    // 劫持 pushState 和 replaceState\r\n    const originalPushState = window.history.pushState\r\n    const originalReplaceState = window.history.replaceState\r\n    \r\n    window.history.pushState = (...args) => {\r\n      originalPushState.apply(window.history, args)\r\n      handleRouteChange()\r\n    }\r\n    \r\n    window.history.replaceState = (...args) => {\r\n      originalReplaceState.apply(window.history, args)\r\n      handleRouteChange()\r\n    }\r\n  }\r\n\r\n  private async checkCurrentRoute(): Promise<void> {\r\n    const location = window.location\r\n    \r\n    for (const app of this.apps.values()) {\r\n      const isActive = this.isAppActive(app, location)\r\n      \r\n      if (isActive && app.status !== 'mounted') {\r\n        await this.mountApp(app.name)\r\n      } else if (!isActive && app.status === 'mounted') {\r\n        await this.unmountApp(app.name)\r\n      }\r\n    }\r\n  }\r\n\r\n  private isAppActive(app: LoadedMicroApp, location: Location): boolean {\r\n    const { activeRule } = app\r\n    \r\n    if (typeof activeRule === 'string') {\r\n      return location.pathname.startsWith(activeRule)\r\n    } else if (activeRule instanceof RegExp) {\r\n      return activeRule.test(location.pathname)\r\n    } else if (typeof activeRule === 'function') {\r\n      return activeRule(location)\r\n    }\r\n    \r\n    return false\r\n  }\r\n\r\n  private async fetchAppResources(app: LoadedMicroApp): Promise<{\r\n    scripts: string[]\r\n    styles: string[]\r\n    html: string\r\n  }> {\r\n    const entry = app.entry\r\n    \r\n    if (typeof entry === 'string') {\r\n      // 从 HTML 入口加载\r\n      const html = await fetch(entry).then(res => res.text())\r\n      const { scripts, styles } = this.extractResources(html, entry)\r\n      return { scripts, styles, html }\r\n    } else {\r\n      // 直接使用配置的资源\r\n      return {\r\n        scripts: entry.scripts || [],\r\n        styles: entry.styles || [],\r\n        html: entry.html || ''\r\n      }\r\n    }\r\n  }\r\n\r\n  private extractResources(html: string, baseUrl: string): {\r\n    scripts: string[]\r\n    styles: string[]\r\n  } {\r\n    const parser = new DOMParser()\r\n    const doc = parser.parseFromString(html, 'text/html')\r\n    \r\n    const scripts = Array.from(doc.querySelectorAll('script[src]'))\r\n      .map(script => this.resolveUrl(script.getAttribute('src')!, baseUrl))\r\n    \r\n    const styles = Array.from(doc.querySelectorAll('link[rel=\"stylesheet\"]'))\r\n      .map(link => this.resolveUrl(link.getAttribute('href')!, baseUrl))\r\n    \r\n    return { scripts, styles }\r\n  }\r\n\r\n  private resolveUrl(url: string, baseUrl: string): string {\r\n    if (url.startsWith('http') || url.startsWith('//')) {\r\n      return url\r\n    }\r\n    \r\n    const base = new URL(baseUrl)\r\n    return new URL(url, base.origin + base.pathname).href\r\n  }\r\n\r\n  private async executeScripts(\r\n    scripts: string[],\r\n    app: LoadedMicroApp\r\n  ): Promise<MicroAppInstance> {\r\n    const sandbox = app.sandboxInstance\r\n    const context = sandbox?.proxy || window\r\n    \r\n    // 执行脚本\r\n    for (const script of scripts) {\r\n      const code = await fetch(script).then(res => res.text())\r\n      \r\n      if (sandbox) {\r\n        // 在沙箱中执行 - 使用动态 script 标签\r\n        const scriptEl = document.createElement('script')\r\n        scriptEl.textContent = `\r\n          (function(window, self, globalThis) {\r\n            ${code}\r\n          }).call(this, window, window, window);\r\n        `\r\n        scriptEl.dataset.microApp = app.name\r\n        document.head.appendChild(scriptEl)\r\n        document.head.removeChild(scriptEl)\r\n      } else {\r\n        // 直接执行 - 使用动态 script 标签\r\n        const scriptEl = document.createElement('script')\r\n        scriptEl.textContent = code\r\n        scriptEl.dataset.microApp = app.name\r\n        document.head.appendChild(scriptEl)\r\n        document.head.removeChild(scriptEl)\r\n      }\r\n    }\r\n    \r\n    // 获取应用导出\r\n    const exports = (context as any)[app.name]\r\n    \r\n    if (!exports) {\r\n      throw new Error(`Micro app ${app.name} did not export lifecycle methods`)\r\n    }\r\n    \r\n    return exports as MicroAppInstance\r\n  }\r\n\r\n  private applyStyles(styles: string[], app: LoadedMicroApp): void {\r\n    const container = this.getContainer(app.container)\r\n    \r\n    styles.forEach(href => {\r\n      const link = document.createElement('link')\r\n      link.rel = 'stylesheet'\r\n      link.href = href\r\n      link.dataset.microApp = app.name\r\n      \r\n      if (app.sandbox && (app.sandbox as SandboxConfig).strictStyleIsolation) {\r\n        // 样式隔离\r\n        container.appendChild(link)\r\n      } else {\r\n        document.head.appendChild(link)\r\n      }\r\n    })\r\n  }\r\n\r\n  private createSandbox(_app: LoadedMicroApp): Sandbox {\r\n    const fakeWindow = {} as any\r\n    const proxy = new Proxy(fakeWindow, {\r\n      get(target, prop) {\r\n        if (prop in target) {\r\n          return target[prop]\r\n        }\r\n        return (window as any)[prop]\r\n      },\r\n      set(target, prop, value) {\r\n        target[prop] = value\r\n        return true\r\n      },\r\n      has(target, prop) {\r\n        return prop in target || prop in window\r\n      }\r\n    })\r\n    \r\n    return {\r\n      proxy,\r\n      active: false,\r\n      mount() {\r\n        this.active = true\r\n      },\r\n      unmount() {\r\n        this.active = false\r\n      },\r\n      clear() {\r\n        Object.keys(fakeWindow).forEach(key => {\r\n          delete fakeWindow[key]\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  private getContainer(container: string | HTMLElement): HTMLElement {\r\n    if (typeof container === 'string') {\r\n      const element = document.querySelector(container)\r\n      if (!element) {\r\n        throw new Error(`Container not found: ${container}`)\r\n      }\r\n      return element as HTMLElement\r\n    }\r\n    return container\r\n  }\r\n\r\n  private prefetchApp(app: LoadedMicroApp): void {\r\n    if (this.prefetchQueue.has(app.name)) {\r\n      return\r\n    }\r\n    \r\n    this.prefetchQueue.add(app.name)\r\n    \r\n    // 使用 requestIdleCallback 进行预加载\r\n    const prefetch = () => {\r\n      this.loadApp(app.name).catch(error => {\r\n        this.logger?.warn(`Failed to prefetch app: ${app.name}`, error)\r\n      }).finally(() => {\r\n        this.prefetchQueue.delete(app.name)\r\n      })\r\n    }\r\n    \r\n    if ('requestIdleCallback' in window) {\r\n      window.requestIdleCallback(prefetch)\r\n    } else {\r\n      setTimeout(prefetch, 1000)\r\n    }\r\n  }\r\n\r\n  private setupModuleFederation(config: ModuleFederationConfig): void {\r\n    // 这里应该配置 webpack module federation\r\n    // 简化示例\r\n    this.logger?.info(`Module federation configured: ${config.name}`)\r\n  }\r\n\r\n  private setupErrorHandler(): void {\r\n    window.addEventListener('error', event => {\r\n      const app = this.findAppByError(event.error)\r\n      if (app) {\r\n        this.logger?.error(`Error in micro app ${app.name}:`, event.error)\r\n        app.error = event.error\r\n      }\r\n    })\r\n  }\r\n\r\n  private setupPerformanceMonitor(): void {\r\n    if ('PerformanceObserver' in window) {\r\n      const observer = new PerformanceObserver(list => {\r\n        list.getEntries().forEach(entry => {\r\n          if (entry.entryType === 'navigation') {\r\n            this.logger?.debug('Navigation performance:', entry)\r\n          }\r\n        })\r\n      })\r\n      \r\n      observer.observe({ entryTypes: ['navigation'] })\r\n    }\r\n  }\r\n\r\n  private findAppByError(error: Error): LoadedMicroApp | undefined {\r\n    // 简化实现：通过错误栈判断来源\r\n    const stack = error.stack || ''\r\n    \r\n    for (const app of this.apps.values()) {\r\n      if (stack.includes(app.name)) {\r\n        return app\r\n      }\r\n    }\r\n    \r\n    return undefined\r\n  }\r\n\r\n  // ==================== 事件系统 ====================\r\n\r\n  private emit(event: string, data?: unknown): void {\r\n    const handlers = this.eventBus.get(event)\r\n    if (handlers) {\r\n      handlers.forEach(handler => handler(data))\r\n    }\r\n  }\r\n\r\n  private on(event: string, handler: (data?: unknown) => void): void {\r\n    if (!this.eventBus.has(event)) {\r\n      this.eventBus.set(event, new Set())\r\n    }\r\n    this.eventBus.get(event)!.add(handler as any)\r\n  }\r\n\r\n  private off(event: string, handler: (data?: unknown) => void): void {\r\n    this.eventBus.get(event)?.delete(handler as any)\r\n  }\r\n\r\n  /**\r\n   * 销毁管理器\r\n   */\r\n  async destroy(): Promise<void> {\r\n    // 卸载所有应用\r\n    for (const app of this.apps.values()) {\r\n      if (app.status === 'mounted') {\r\n        await this.unmountApp(app.name)\r\n      }\r\n    }\r\n    \r\n    // 清理资源\r\n    this.apps.clear()\r\n    this.globalState.clear()\r\n    this.eventBus.clear()\r\n    this.prefetchQueue.clear()\r\n    this.moduleFederations.clear()\r\n  }\r\n}\r\n\r\n// 导出工厂函数\r\nexport function createMicroFrontendManager(engine?: Engine): MicroFrontendManager {\r\n  return new MicroFrontendManager(engine)\r\n}"],"names":[],"mappings":"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"}