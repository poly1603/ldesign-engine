{"version":3,"file":"plugin-manager.cjs","sources":["../../src/plugins/plugin-manager.ts"],"sourcesContent":["import type { Engine, Plugin, PluginContext, PluginInfo, PluginManager, PluginStatus } from '../types'\n\n/**\n * 插件管理器实现\n *\n * 负责插件的注册、卸载、依赖验证、查询与统计等能力。\n * - 维护插件注册表与加载顺序\n * - 为每个插件提供上下文（engine/logger/config/events）\n * - 提供依赖图与依赖校验缓存，避免重复计算\n */\n\nexport class PluginManagerImpl implements PluginManager {\n  readonly name = 'PluginManager'\n  readonly version = '1.0.0'\n\n  private plugins = new Map<string, Plugin>()\n  private loadOrder: string[] = []\n  private engine?: Engine\n\n  // 内存优化：限制插件数量\n  private readonly MAX_PLUGINS = 100\n\n  // 缓存优化：使用 WeakMap 避免内存泄漏\n  private dependencyCache = new WeakMap<Plugin, string[]>()\n  \n  // 性能优化：缓存依赖图和查询结果\n  private dependencyGraphCache?: Record<string, string[]>\n  private dependentsCache = new Map<string, string[]>()\n  private cacheInvalidated = true\n\n  constructor(engine?: Engine) {\n    this.engine = engine\n  }\n  \n  /**\n   * 使缓存失效\n   */\n  private invalidateCache(): void {\n    this.cacheInvalidated = true\n    this.dependencyGraphCache = undefined\n    this.dependentsCache.clear()\n  }\n\n  /**\n   * 注册并安装插件。\n   *\n   * 会校验依赖、写入注册表、清理缓存并调用插件的 install。\n   * @throws 当插件已注册或依赖缺失时抛出错误\n   */\n  async register(plugin: Plugin): Promise<void> {\n    if (this.plugins.has(plugin.name)) {\n      throw new Error(`Plugin \"${plugin.name}\" is already registered`)\n    }\n\n    // 检查插件数量限制\n    if (this.plugins.size >= this.MAX_PLUGINS) {\n      throw new Error(`Maximum plugin limit (${this.MAX_PLUGINS}) reached`)\n    }\n\n    // 检查依赖 - 提前验证所有依赖，一次性处理\n    const { satisfied, missing } = this.checkDependencies(plugin)\n    if (!satisfied) {\n      if (missing.length === 1) {\n        throw new Error(`Plugin \"${plugin.name}\" depends on \"${missing[0]}\" which is not registered`)\n      } else {\n        throw new Error(`Plugin \"${plugin.name}\" depends on missing plugins: ${missing.join(', ')}`)\n      }\n    }\n\n    try {\n      // 注册插件\n      this.plugins.set(plugin.name, plugin)\n      this.loadOrder.push(plugin.name)\n      \n      // 使缓存失效\n      this.invalidateCache()\n\n      // 安装插件\n      if (this.engine) {\n        const context = this.createPluginContext()\n        await plugin.install(context)\n      }\n\n      // Plugin registered successfully (日志已禁用)\n\n      // 发送插件注册事件\n      if (this.engine?.events) {\n        this.engine.events.emit('plugin:registered', {\n          name: plugin.name,\n          plugin,\n        })\n      }\n    } catch (error) {\n      // 回滚注册\n      this.plugins.delete(plugin.name)\n      const index = this.loadOrder.indexOf(plugin.name)\n      if (index > -1) {\n        this.loadOrder.splice(index, 1)\n      }\n\n      this.logPluginError(plugin.name, error)\n      throw error\n    }\n  }\n\n  /**\n   * 卸载并注销插件。\n   *\n   * 会检查是否存在依赖该插件的其他插件，若存在则拒绝卸载。\n   * @throws 当插件未注册或存在依赖者时抛出错误\n   */\n  async unregister(name: string): Promise<void> {\n    const plugin = this.plugins.get(name)\n    if (!plugin) {\n      throw new Error(`Plugin \"${name}\" is not registered`)\n    }\n\n    // 检查是否有其他插件依赖此插件\n    const dependents = this.getDependents(name)\n    if (dependents.length > 0) {\n      throw new Error(\n        `Cannot unregister plugin \"${name}\" because it is required by: ${dependents.join(\n          ', '\n        )}`\n      )\n    }\n\n    try {\n      // 卸载插件\n      if (plugin.uninstall && this.engine) {\n        const context = this.createPluginContext()\n        await plugin.uninstall(context)\n      }\n\n      // 移除插件\n      this.plugins.delete(name)\n      const index = this.loadOrder.indexOf(name)\n      if (index > -1) {\n        this.loadOrder.splice(index, 1)\n      }\n      \n      // 使缓存失效\n      this.invalidateCache()\n\n      if (this.engine?.logger) {\n        this.engine.logger.info(`Plugin \"${name}\" unregistered successfully`)\n      }\n\n      // 发送插件卸载事件\n      if (this.engine?.events) {\n        this.engine.events.emit('plugin:unregistered', {\n          name,\n          plugin,\n        })\n      }\n    } catch (error) {\n      if (this.engine?.logger) {\n        this.engine.logger.error(`Failed to unregister plugin \"${name}\"`, error)\n      }\n      throw error\n    }\n  }\n\n  get(name: string): Plugin | undefined {\n    return this.plugins.get(name)\n  }\n\n  getAll(): Plugin[] {\n    return this.loadOrder.map(name => this.plugins.get(name)).filter(Boolean) as Plugin[]\n  }\n\n  isRegistered(name: string): boolean {\n    return this.plugins.has(name)\n  }\n\n  has(name: string): boolean {\n    return this.plugins.has(name)\n  }\n\n  /**\n   * 检查插件依赖满足情况（不修改状态）。\n   */\n  checkDependencies(plugin: Plugin): {\n    satisfied: boolean\n    missing: string[]\n    conflicts: string[]\n  } {\n    const missing: string[] = []\n    const conflicts: string[] = []\n\n    if (plugin.dependencies) {\n      for (const dep of plugin.dependencies) {\n        if (!this.plugins.has(dep)) {\n          missing.push(dep)\n        }\n      }\n    }\n\n    return {\n      satisfied: missing.length === 0 && conflicts.length === 0,\n      missing,\n      conflicts,\n    }\n  }\n\n  /**\n   * 获取依赖指定插件的插件列表 - 使用缓存优化\n   */\n  private getDependents(pluginName: string): string[] {\n    // 检查缓存\n    if (!this.cacheInvalidated && this.dependentsCache.has(pluginName)) {\n      return this.dependentsCache.get(pluginName)!\n    }\n    \n    const dependents: string[] = []\n    for (const [name, plugin] of this.plugins) {\n      if (plugin.dependencies?.includes(pluginName)) {\n        dependents.push(name)\n      }\n    }\n    \n    // 更新缓存\n    this.dependentsCache.set(pluginName, dependents)\n    \n    return dependents\n  }\n\n  // 获取插件加载顺序\n  /**\n   * 获取插件按注册顺序的名称列表。\n   */\n  getLoadOrder(): string[] {\n    return [...this.loadOrder]\n  }\n\n  /**\n   * 获取当前插件依赖图 - 使用缓存优化\n   */\n  getDependencyGraph(): Record<string, string[]> {\n    // 检查缓存\n    if (!this.cacheInvalidated && this.dependencyGraphCache) {\n      return { ...this.dependencyGraphCache }\n    }\n    \n    const graph: Record<string, string[]> = {}\n    for (const [name, plugin] of this.plugins) {\n      graph[name] = plugin.dependencies ? [...plugin.dependencies] : []\n    }\n    \n    // 更新缓存\n    this.dependencyGraphCache = graph\n    this.cacheInvalidated = false\n    \n    return { ...graph }\n  }\n\n  /**\n   * 验证所有已注册插件的依赖是否完整。\n   */\n  validateDependencies(): { valid: boolean; errors: string[] } {\n    const errors: string[] = []\n    for (const [name, plugin] of this.plugins) {\n      if (plugin.dependencies) {\n        for (const dep of plugin.dependencies) {\n          if (!this.plugins.has(dep)) {\n            errors.push(`Plugin \"${name}\" depends on missing plugin \"${dep}\"`)\n          }\n        }\n      }\n    }\n    return {\n      valid: errors.length === 0,\n      errors,\n    }\n  }\n\n  // 获取插件统计信息\n  /**\n   * 获取插件统计信息快照。\n   */\n  getStats(): {\n    total: number\n    loaded: string[]\n    dependencies: Record<string, string[]>\n    installed: number\n    pending: number\n    errors: number\n    averageInstallTime: number\n    timestamp: number\n  } {\n    return {\n      total: this.plugins.size,\n      loaded: this.getLoadOrder(),\n      dependencies: this.getDependencyGraph(),\n      installed: this.plugins.size,\n      pending: 0,\n      errors: 0,\n      averageInstallTime: 0,\n      timestamp: Date.now(),\n    }\n  }\n\n  // 获取插件信息\n  /**\n   * 获取单个插件的元信息摘要。\n   */\n  getInfo(name: string): PluginInfo<Engine> | undefined {\n    const plugin = this.plugins.get(name)\n    if (!plugin) return undefined\n\n    return {\n      plugin,\n      status: 'installed',\n      installTime: undefined,\n      error: undefined,\n      dependencies: plugin.dependencies || [],\n      dependents: this.getDependents(name),\n    }\n  }\n\n  // 获取所有插件信息\n  /**\n   * 获取所有已注册插件的元信息摘要列表。\n   */\n  getAllInfo(): PluginInfo<Engine>[] {\n    return Array.from(this.plugins.keys())\n      .map(name => this.getInfo(name))\n      .filter(Boolean) as PluginInfo<Engine>[]\n  }\n\n  // 获取插件状态\n  /**\n   * 获取插件状态（当前实现为简化版）。\n   */\n  getStatus(name: string): PluginStatus | undefined {\n    if (!this.plugins.has(name)) return undefined\n    return 'installed' // 简化实现\n  }\n\n  // 解析依赖\n  /**\n   * 解析插件依赖并按合适顺序返回（当前实现简化为原序）。\n   */\n  resolveDependencies(plugins: Plugin[]): Plugin[] {\n    // 简化实现，返回原数组\n    return plugins\n  }\n\n  // 按关键词查找插件\n  /**\n   * 按关键字搜索插件（基于名称与描述）- 优化版\n   */\n  findByKeyword(keyword: string): Plugin[] {\n    const lowerKeyword = keyword.toLowerCase()\n    const results: Plugin[] = []\n    \n    for (const plugin of this.plugins.values()) {\n      if (plugin.name.toLowerCase().includes(lowerKeyword) ||\n          plugin.description?.toLowerCase().includes(lowerKeyword)) {\n        results.push(plugin)\n      }\n    }\n    \n    return results\n  }\n\n  // 按作者查找插件\n  /**\n   * 按作者筛选插件（依赖插件公开 author 字段）。\n   */\n  findByAuthor(author: string): Plugin[] {\n    return Array.from(this.plugins.values()).filter((plugin) => {\n      return (plugin as { author?: string }).author === author\n    })\n  }\n\n  // 按依赖查找插件\n  /**\n   * 查找依赖了指定插件名称的插件。\n   */\n  findByDependency(dependency: string): Plugin[] {\n    return Array.from(this.plugins.values()).filter(plugin =>\n      plugin.dependencies?.includes(dependency)\n    )\n  }\n\n  destroy(): void {\n    // 卸载所有插件（倒序卸载，与注册顺序相反）\n    const reversedOrder = [...this.loadOrder].reverse()\n    for (const pluginName of reversedOrder) {\n      const plugin = this.plugins.get(pluginName)\n      if (plugin && plugin.uninstall && this.engine) {\n        try {\n          plugin.uninstall({\n            engine: this.engine,\n            logger: this.engine.logger,\n            config: this.engine.config,\n            events: this.engine.events,\n          } as PluginContext<Engine>)\n        } catch (error) {\n          this.engine?.logger?.error(`Error uninstalling plugin ${plugin.name}:`, error)\n        }\n      }\n    }\n\n    // 清理数据结构\n    this.plugins.clear()\n    this.loadOrder.length = 0\n\n    // 清理缓存\n    this.clearCaches()\n\n    // 清理引擎引用\n    this.engine = undefined\n  }\n\n  // 清理缓存 - 增强版\n  private clearCaches(): void {\n    this.dependencyCache = new WeakMap()\n    this.dependencyGraphCache = undefined\n    this.dependentsCache.clear()\n    this.cacheInvalidated = true\n  }\n\n  // 实现接口需要的额外方法\n  getInstalledPlugins(): Plugin[] {\n    return this.getAll()\n  }\n\n  isInstalled(name: string): boolean {\n    return this.isRegistered(name)\n  }\n\n  getPlugin(name: string): Plugin | undefined {\n    return this.get(name)\n  }\n\n  getPluginStatus(name: string): PluginStatus | undefined {\n    return this.getStatus(name)\n  }\n\n  async initializeAll(): Promise<void> {\n    // 优化：并发初始化所有插件，提高启动速度\n    const initPromises = Array.from(this.plugins.values()).map(async (plugin) => {\n      try {\n        if (this.engine && plugin.install) {\n          const context = this.createPluginContext()\n          await plugin.install(context)\n        }\n      } catch (error) {\n        this.engine?.logger?.error(`Failed to initialize plugin ${plugin.name}:`, error)\n      }\n    })\n\n    await Promise.all(initPromises)\n  }\n\n  // 新增的辅助方法\n\n  /**\n   * 抽取创建上下文的逻辑\n   */\n  private createPluginContext(): PluginContext<Engine> {\n    if (!this.engine) {\n      throw new Error('Engine is not initialized')\n    }\n    return {\n      engine: this.engine,\n      logger: this.engine.logger,\n      config: this.engine.config,\n      events: this.engine.events,\n    }\n  }\n\n  /**\n   * 记录插件错误\n   */\n  private logPluginError(pluginName: string, error: unknown): void {\n    if (this.engine?.logger) {\n      this.engine.logger.error(\n        `Failed to register plugin \"${pluginName}\"`,\n        error\n      )\n    }\n  }\n}\n\nexport function createPluginManager(engine?: Engine): PluginManager {\n  return new PluginManagerImpl(engine)\n}\n"],"names":[],"mappings":"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"}