{"version":3,"file":"performance-monitor.cjs","sources":["../../src/performance/performance-monitor.ts"],"sourcesContent":["/**\n * 高性能监控工具\n * 提供实时性能监控、内存分析、性能瓶颈检测等功能\n */\n\nimport type { Engine } from '../types'\n\nexport interface PerformanceMetrics {\n  cpu: {\n    usage: number\n    idle: number\n  }\n  memory: {\n    used: number\n    total: number\n    heapUsed: number\n    heapTotal: number\n    external: number\n    arrayBuffers: number\n  }\n  timing: {\n    [key: string]: {\n      count: number\n      total: number\n      min: number\n      max: number\n      average: number\n      p50: number\n      p90: number\n      p99: number\n    }\n  }\n  counters: Map<string, number>\n  gauges: Map<string, number>\n}\n\nexport class PerformanceMonitor {\n  private metrics: PerformanceMetrics\n  private timings = new Map<string, number[]>()\n  private startTimes = new Map<string, number>()\n  private counters = new Map<string, number>()\n  private gauges = new Map<string, number>()\n  private observers = new Set<(metrics: PerformanceMetrics) => void>()\n  private updateInterval?: number\n  private readonly maxTimingSamples = 100 // 减少样本数量\n  private readonly maxMetricKeys = 50 // 限制指标数量\n  private readonly maxObservers = 20 // 限制观察者数量\n  private lastCleanup = Date.now()\n  private readonly cleanupInterval = 60000 // 每分钟清理\n\n  constructor(private engine?: Engine) {\n    this.metrics = this.initMetrics()\n    this.startAutoMonitoring()\n  }\n\n  private initMetrics(): PerformanceMetrics {\n    return {\n      cpu: { usage: 0, idle: 100 },\n      memory: {\n        used: 0,\n        total: 0,\n        heapUsed: 0,\n        heapTotal: 0,\n        external: 0,\n        arrayBuffers: 0\n      },\n      timing: {},\n      counters: new Map(),\n      gauges: new Map()\n    }\n  }\n\n  /**\n   * 开始性能计时\n   */\n  startTiming(label: string): void {\n    // 限制开始时间记录数量\n    if (this.startTimes.size >= this.maxMetricKeys) {\n      const firstKey = this.startTimes.keys().next().value\n      if (firstKey !== undefined) {\n        this.startTimes.delete(firstKey)\n      }\n    }\n    this.startTimes.set(label, performance.now())\n\n    // 定期清理\n    this.performPeriodicCleanup()\n  }\n\n  /**\n   * 结束性能计时并记录\n   */\n  endTiming(label: string): number {\n    const startTime = this.startTimes.get(label)\n    if (!startTime) return 0\n\n    const duration = performance.now() - startTime\n    this.startTimes.delete(label)\n\n    // 检查指标数量限制\n    if (this.timings.size >= this.maxMetricKeys && !this.timings.has(label)) {\n      // 删除最早的指标\n      const firstKey = this.timings.keys().next().value\n      if (firstKey) {\n        this.timings.delete(firstKey)\n        delete this.metrics.timing[firstKey]\n      }\n    }\n\n    // 记录时间样本\n    if (!this.timings.has(label)) {\n      this.timings.set(label, [])\n    }\n    const samples = this.timings.get(label)!\n    samples.push(duration)\n\n    // 限制样本数量 - 使用环形缓冲区逻辑\n    if (samples.length > this.maxTimingSamples) {\n      samples.shift()\n    }\n\n    // 更新统计\n    this.updateTimingStats(label)\n\n    return duration\n  }\n\n  /**\n   * 使用装饰器模式测量函数执行时间\n   */\n  measure<T extends (...args: any[]) => any>(\n    label: string,\n    fn: T\n  ): T {\n    return ((...args: Parameters<T>) => {\n      this.startTiming(label)\n      try {\n        const result = fn(...args)\n        if (result instanceof Promise) {\n          return result.finally(() => this.endTiming(label))\n        }\n        this.endTiming(label)\n        return result\n      } catch (error) {\n        this.endTiming(label)\n        throw error\n      }\n    }) as T\n  }\n\n  /**\n   * 增加计数器\n   */\n  incrementCounter(name: string, value = 1): void {\n    // 限制计数器数量\n    if (this.counters.size >= this.maxMetricKeys && !this.counters.has(name)) {\n      const firstKey = this.counters.keys().next().value\n      if (firstKey !== undefined) {\n        this.counters.delete(firstKey)\n      }\n    }\n\n    const current = this.counters.get(name) || 0\n    this.counters.set(name, current + value)\n    this.metrics.counters = new Map(this.counters)\n  }\n\n  /**\n   * 设置测量值\n   */\n  setGauge(name: string, value: number): void {\n    // 限制测量值数量\n    if (this.gauges.size >= this.maxMetricKeys && !this.gauges.has(name)) {\n      const firstKey = this.gauges.keys().next().value\n      if (firstKey !== undefined) {\n        this.gauges.delete(firstKey)\n      }\n    }\n\n    this.gauges.set(name, value)\n    this.metrics.gauges = new Map(this.gauges)\n  }\n\n  /**\n   * 获取当前指标\n   */\n  getMetrics(): PerformanceMetrics {\n    return { ...this.metrics }\n  }\n\n  /**\n   * 重置所有指标\n   */\n  reset(): void {\n    this.timings.clear()\n    this.startTimes.clear()\n    this.counters.clear()\n    this.gauges.clear()\n    this.metrics = this.initMetrics()\n  }\n\n  /**\n   * 订阅性能指标更新\n   */\n  subscribe(callback: (metrics: PerformanceMetrics) => void): () => void {\n    // 限制观察者数量\n    if (this.observers.size >= this.maxObservers) {\n      console.warn(`Performance monitor: Maximum observers (${this.maxObservers}) reached`)\n      return () => { }\n    }\n\n    this.observers.add(callback)\n    return () => this.observers.delete(callback)\n  }\n\n  /**\n   * 获取性能报告\n   */\n  getReport(): string {\n    const report: string[] = []\n    report.push('=== Performance Report ===')\n\n    // 内存使用\n    if (typeof performance !== 'undefined' && (performance as any).memory) {\n      const mem = (performance as any).memory\n      report.push(`Memory: ${(mem.usedJSHeapSize / 1024 / 1024).toFixed(2)}MB / ${(mem.totalJSHeapSize / 1024 / 1024).toFixed(2)}MB`)\n    }\n\n    // 计时统计\n    for (const [label, stats] of Object.entries(this.metrics.timing)) {\n      report.push(`${label}: avg=${stats.average.toFixed(2)}ms, p99=${stats.p99.toFixed(2)}ms`)\n    }\n\n    // 计数器\n    if (this.counters.size > 0) {\n      report.push('Counters:')\n      for (const [name, value] of this.counters) {\n        report.push(`  ${name}: ${value}`)\n      }\n    }\n\n    return report.join('\\n')\n  }\n\n  /**\n   * 获取性能建议\n   */\n  getOptimizationSuggestions(): string[] {\n    const suggestions: string[] = []\n\n    // 检查缓慢的操作\n    for (const [label, stats] of Object.entries(this.metrics.timing)) {\n      if (stats.p99 > 100) {\n        suggestions.push(`考虑优化 \"${label}\" 操作，P99延迟为 ${stats.p99.toFixed(2)}ms`)\n      }\n    }\n\n    // 检查内存使用\n    if (typeof performance !== 'undefined' && (performance as any).memory) {\n      const mem = (performance as any).memory\n      const usagePercent = (mem.usedJSHeapSize / mem.jsHeapSizeLimit) * 100\n      if (usagePercent > 80) {\n        suggestions.push(`内存使用率较高 (${usagePercent.toFixed(1)}%)，建议检查内存泄漏`)\n      }\n    }\n\n    // 检查事件监听器数量\n    if (this.engine?.events) {\n      const stats = (this.engine.events as any).getStats?.()\n      if (stats?.totalListeners > 100) {\n        suggestions.push(`事件监听器过多 (${stats.totalListeners})，可能存在内存泄漏`)\n      }\n    }\n\n    // 检查缓存命中率\n    if (this.engine?.cache) {\n      const cacheStats = this.engine.cache.getStats()\n      if (cacheStats.hitRate < 50) {\n        suggestions.push(`缓存命中率较低 (${cacheStats.hitRate.toFixed(1)}%)，考虑调整缓存策略`)\n      }\n    }\n\n    return suggestions\n  }\n\n  /**\n   * 更新计时统计 - 优化版\n   */\n  private updateTimingStats(label: string): void {\n    const samples = this.timings.get(label)\n    if (!samples || samples.length === 0) return\n\n    // 使用原地排序减少内存分配\n    const sorted = samples.slice().sort((a, b) => a - b)\n    const len = sorted.length\n    \n    // 优化：一次遍历计算 total\n    let total = 0\n    for (let i = 0; i < len; i++) {\n      total += sorted[i]\n    }\n\n    const stats = {\n      count: len,\n      total,\n      min: sorted[0],\n      max: sorted[len - 1],\n      average: total / len,\n      p50: sorted[Math.floor(len * 0.5)],\n      p90: sorted[Math.floor(len * 0.9)],\n      p99: sorted[Math.floor(len * 0.99)]\n    }\n\n    this.metrics.timing[label] = stats\n  }\n\n\n  /**\n   * 定期清理过期数据\n   */\n  private performPeriodicCleanup(): void {\n    const now = Date.now()\n    // 每分钟执行一次清理\n    if (now - this.lastCleanup > this.cleanupInterval) {\n      // 清理超时的startTimes\n      const timeout = 30000 // 30秒超时\n      for (const [label, startTime] of this.startTimes) {\n        if (now - startTime > timeout) {\n          this.startTimes.delete(label)\n        }\n      }\n      this.lastCleanup = now\n    }\n  }\n\n  /**\n   * 开始自动监控 - 优化频率\n   */\n  private startAutoMonitoring(): void {\n    this.updateInterval = window.setInterval(() => {\n      // 更新内存指标\n      if (typeof performance !== 'undefined' && (performance as any).memory) {\n        const mem = (performance as any).memory\n        this.metrics.memory = {\n          used: mem.usedJSHeapSize,\n          total: mem.jsHeapSizeLimit,\n          heapUsed: mem.usedJSHeapSize,\n          heapTotal: mem.totalJSHeapSize,\n          external: 0,\n          arrayBuffers: 0\n        }\n      }\n\n      // 定期清理\n      this.performPeriodicCleanup()\n\n      // 通知观察者（节流）\n      if (this.observers.size > 0) {\n        this.notifyObservers()\n      }\n    }, 2000) // 降低频率到2秒\n  }\n\n  /**\n   * 通知所有观察者\n   */\n  private notifyObservers(): void {\n    for (const observer of this.observers) {\n      observer(this.getMetrics())\n    }\n  }\n\n  /**\n   * 销毁监控器\n   */\n  destroy(): void {\n    if (this.updateInterval) {\n      window.clearInterval(this.updateInterval)\n    }\n    this.observers.clear()\n    this.reset()\n  }\n}\n\n// 创建全局性能监控实例\nlet globalMonitor: PerformanceMonitor | undefined\n\nexport function getGlobalPerformanceMonitor(engine?: Engine): PerformanceMonitor {\n  if (!globalMonitor) {\n    globalMonitor = new PerformanceMonitor(engine)\n  }\n  return globalMonitor\n}\n\n/**\n * 性能测量装饰器\n */\nexport function Measure(label?: string) {\n  return function (\n    target: any,\n    propertyKey: string,\n    descriptor: PropertyDescriptor\n  ) {\n    const originalMethod = descriptor.value\n    const measureLabel = label || `${target.constructor.name}.${propertyKey}`\n\n    descriptor.value = function (...args: any[]) {\n      const monitor = getGlobalPerformanceMonitor()\n      return monitor.measure(measureLabel, originalMethod).apply(this, args)\n    }\n\n    return descriptor\n  }\n}"],"names":[],"mappings":"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"}