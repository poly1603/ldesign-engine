{"version":3,"file":"performance-manager.cjs","sources":["../../src/performance/performance-manager.ts"],"sourcesContent":["import type { Engine } from '../types'\n\n// 性能指标类型\nexport interface PerformanceMetrics {\n  // 基础指标\n  timestamp: number\n  duration: number\n\n  // 内存指标\n  memory?: {\n    used: number\n    total: number\n    limit: number\n  }\n\n  // 网络指标\n  network?: {\n    latency: number\n    bandwidth: number\n    connectionType?: string\n    requests?: number\n    totalSize?: number\n    averageTime?: number\n  }\n\n  // 渲染指标\n  rendering?: {\n    fps: number\n    droppedFrames: number\n    renderTime: number\n    frameTime?: number\n  }\n\n  // 自定义指标\n  custom?: Record<string, number>\n}\n\n// 性能事件类型\nexport enum PerformanceEventType {\n  NAVIGATION = 'navigation',\n  RESOURCE_LOAD = 'resource_load',\n  USER_INTERACTION = 'user_interaction',\n  COMPONENT_RENDER = 'component_render',\n  API_CALL = 'api_call',\n  NETWORK = 'network',\n  RENDER = 'render',\n  CUSTOM = 'custom',\n}\n\n// 性能事件\nexport interface PerformanceEvent {\n  id: string\n  type: PerformanceEventType\n  name: string\n  startTime: number\n  endTime?: number\n  duration?: number\n  metadata?: Record<string, unknown>\n  metrics?: Partial<PerformanceMetrics>\n}\n\n// 性能阈值配置\nexport interface PerformanceThresholds {\n  // 响应时间阈值（毫秒）\n  responseTime?: {\n    good: number\n    poor: number\n  }\n\n  // FPS阈值\n  fps?: {\n    good: number\n    poor: number\n  }\n\n  // 内存使用阈值（MB）\n  memory?: {\n    warning: number\n    critical: number\n  }\n\n  // 包大小阈值（KB）\n  bundleSize?: {\n    warning: number\n    critical: number\n  }\n}\n\n// 性能报告\nexport interface PerformanceReport {\n  summary: {\n    totalEvents: number\n    averageResponseTime: number\n    averageFPS: number\n    memoryUsage: number\n    timeRange: {\n      start: number\n      end: number\n    }\n  }\n\n  events: PerformanceEvent[]\n  metrics: PerformanceMetrics[]\n  violations: PerformanceViolation[]\n  recommendations: string[]\n}\n\n// 性能违规\nexport interface PerformanceViolation {\n  type: 'threshold' | 'memory_leak' | 'slow_operation'\n  severity: 'low' | 'medium' | 'high' | 'critical'\n  message: string\n  details: unknown\n  timestamp: number\n}\n\n// 性能管理器接口\nexport interface PerformanceManager {\n  // 事件追踪\n  startEvent: (\n    type: PerformanceEventType,\n    name: string,\n    metadata?: Record<string, unknown>\n  ) => string\n  endEvent: (id: string, metadata?: Record<string, unknown>) => void\n  recordEvent: (event: Omit<PerformanceEvent, 'id'>) => string\n\n  // 指标收集\n  collectMetrics: () => PerformanceMetrics\n  recordMetrics: (metrics: Partial<PerformanceMetrics>) => void\n\n  // 监控管理\n  startMonitoring: () => void\n  stopMonitoring: () => void\n  isMonitoring: () => boolean\n\n  // 数据获取\n  getEvents: (filter?: Partial<PerformanceEvent>) => PerformanceEvent[]\n  getMetrics: (timeRange?: {\n    start: number\n    end: number\n  }) => PerformanceMetrics[]\n  getReport: (timeRange?: { start: number; end: number }) => PerformanceReport\n\n  // 阈值管理\n  setThresholds: (thresholds: Partial<PerformanceThresholds>) => void\n  getThresholds: () => PerformanceThresholds\n\n  // 事件监听\n  onViolation: (callback: (violation: PerformanceViolation) => void) => void\n  onMetrics: (callback: (metrics: PerformanceMetrics) => void) => void\n\n  // 数据清理\n  clearData: (olderThan?: number) => void\n  exportData: () => string\n  importData: (data: string) => void\n}\n\n// 增强的内存监控器 - 支持自适应采样和泄漏检测\nclass MemoryMonitor {\n  private callback?: (memory: PerformanceMetrics['memory']) => void\n  private intervalId?: NodeJS.Timeout\n  private baseInterval = 30000 // 基础采样间隔30秒\n  private currentInterval = 30000\n  private memoryHistory: Array<{ timestamp: number; used: number }> = []\n  private maxHistorySize = 50 // 保留最近50个样本\n  private leakThreshold = 10 * 1024 * 1024 // 10MB增长视为潜在泄漏\n\n  start(\n    callback: (memory: PerformanceMetrics['memory']) => void,\n    interval = 30000\n  ): void {\n    this.callback = callback\n    this.baseInterval = interval\n    this.currentInterval = interval\n    this.startAdaptiveMonitoring()\n  }\n\n  /**\n   * 自适应监控 - 根据内存压力调整采样频率\n   */\n  private startAdaptiveMonitoring(): void {\n    const sample = () => {\n      const memory = this.getMemoryInfo()\n      if (memory && this.callback) {\n        this.callback(memory)\n\n        // 记录内存历史\n        this.memoryHistory.push({\n          timestamp: Date.now(),\n          used: memory.used\n        })\n\n        // 限制历史大小\n        if (this.memoryHistory.length > this.maxHistorySize) {\n          this.memoryHistory.shift()\n        }\n\n        // 检测内存泄漏\n        this.detectMemoryLeak()\n\n        // 自适应调整采样间隔\n        this.adjustSamplingInterval(memory)\n      }\n\n      // 使用当前间隔重新调度\n      if (this.intervalId) {\n        clearTimeout(this.intervalId)\n      }\n      this.intervalId = setTimeout(sample, this.currentInterval) as any\n    }\n\n    sample()\n  }\n\n  /**\n   * 根据内存使用情况调整采样间隔\n   */\n  private adjustSamplingInterval(memory: NonNullable<PerformanceMetrics['memory']>): void {\n    const usagePercent = memory.used / memory.limit\n\n    if (usagePercent > 0.8) {\n      // 高内存压力：每5秒采样\n      this.currentInterval = 5000\n    } else if (usagePercent > 0.6) {\n      // 中等压力：每15秒采样\n      this.currentInterval = 15000\n    } else {\n      // 正常：使用基础间隔\n      this.currentInterval = this.baseInterval\n    }\n  }\n\n  /**\n   * 检测内存泄漏\n   */\n  private detectMemoryLeak(): void {\n    if (this.memoryHistory.length < 10) {\n      return // 样本不足\n    }\n\n    // 检查最近10个样本的内存增长趋势\n    const recentSamples = this.memoryHistory.slice(-10)\n    const firstSample = recentSamples[0]\n    const lastSample = recentSamples[recentSamples.length - 1]\n\n    const growthRate = lastSample.used - firstSample.used\n    const timeDiff = lastSample.timestamp - firstSample.timestamp\n\n    // 如果在短时间内内存持续增长超过阈值，发出警告\n    if (growthRate > this.leakThreshold && timeDiff < 5 * 60 * 1000) {\n      console.warn('[MemoryMonitor] Potential memory leak detected', {\n        growth: `${(growthRate / 1024 / 1024).toFixed(2)}MB`,\n        duration: `${(timeDiff / 1000).toFixed(0)}s`,\n        rate: `${((growthRate / timeDiff) * 1000 / 1024).toFixed(2)}KB/s`\n      })\n\n      // 触发自定义事件\n      if (typeof window !== 'undefined') {\n        window.dispatchEvent(new CustomEvent('memory-leak-warning', {\n          detail: { growth: growthRate, duration: timeDiff }\n        }))\n      }\n    }\n  }\n\n  /**\n   * 获取内存趋势\n   */\n  getMemoryTrend(): {\n    average: number\n    peak: number\n    current: number\n    trend: 'increasing' | 'stable' | 'decreasing'\n  } | null {\n    if (this.memoryHistory.length < 5) {\n      return null\n    }\n\n    const recent = this.memoryHistory.slice(-10)\n    const average = recent.reduce((sum, s) => sum + s.used, 0) / recent.length\n    const peak = Math.max(...recent.map(s => s.used))\n    const current = recent[recent.length - 1].used\n\n    // 简单的趋势分析\n    const firstHalf = recent.slice(0, Math.floor(recent.length / 2))\n    const secondHalf = recent.slice(Math.floor(recent.length / 2))\n    const firstAvg = firstHalf.reduce((sum, s) => sum + s.used, 0) / firstHalf.length\n    const secondAvg = secondHalf.reduce((sum, s) => sum + s.used, 0) / secondHalf.length\n\n    let trend: 'increasing' | 'stable' | 'decreasing' = 'stable'\n    const diff = secondAvg - firstAvg\n    if (diff > 1024 * 1024) { // 1MB差异\n      trend = 'increasing'\n    } else if (diff < -1024 * 1024) {\n      trend = 'decreasing'\n    }\n\n    return { average, peak, current, trend }\n  }\n\n  stop(): void {\n    if (this.intervalId) {\n      clearTimeout(this.intervalId)\n      this.intervalId = undefined\n    }\n    this.callback = undefined\n    this.memoryHistory = []\n  }\n\n  private getMemoryInfo(): PerformanceMetrics['memory'] | undefined {\n    if (\n      typeof globalThis !== 'undefined' &&\n      typeof globalThis.performance !== 'undefined' &&\n      'memory' in (globalThis.performance as Performance)\n    ) {\n      const memory = (globalThis.performance as Performance & { memory?: { usedJSHeapSize: number; totalJSHeapSize: number; jsHeapSizeLimit: number } }).memory\n      if (!memory) return undefined\n      return {\n        used: memory.usedJSHeapSize,\n        total: memory.totalJSHeapSize,\n        limit: memory.jsHeapSizeLimit,\n      }\n    }\n    return undefined\n  }\n}\n\n// FPS监控器\nclass FPSMonitor {\n  private callback?: (fps: number) => void\n  private animationId?: number\n  private frameCount = 0\n  private lastTime = 0\n  private fps = 0\n\n  start(callback: (fps: number) => void): void {\n    this.callback = callback\n    this.frameCount = 0\n    this.lastTime = globalThis.performance?.now() || Date.now()\n    this.measureFPS()\n  }\n\n  stop(): void {\n    if (this.animationId) {\n      cancelAnimationFrame(this.animationId)\n      this.animationId = undefined\n    }\n    this.callback = undefined\n  }\n\n  private measureFPS(): void {\n    if (!this.callback) return\n\n    this.frameCount++\n    const currentTime = globalThis.performance?.now() || Date.now()\n\n    if (currentTime - this.lastTime >= 1000) {\n      this.fps = Math.round((this.frameCount * 1000) / (currentTime - this.lastTime))\n      this.frameCount = 0\n      this.lastTime = currentTime\n      this.callback(this.fps)\n    }\n\n    this.animationId = requestAnimationFrame(() => this.measureFPS())\n  }\n\n  getFPS(): number {\n    return this.fps\n  }\n}\n\n// 性能管理器实现\nexport class PerformanceManagerImpl implements PerformanceManager {\n  private events = new Map<string, PerformanceEvent>()\n  private metrics: PerformanceMetrics[] = []\n  private thresholds: PerformanceThresholds\n  private violationCallbacks: ((violation: PerformanceViolation) => void)[] = []\n  private metricsCallbacks: ((metrics: PerformanceMetrics) => void)[] = []\n  private monitoring = false\n  private fpsMonitor = new FPSMonitor()\n  private memoryMonitor = new MemoryMonitor()\n  private performanceObserver?: PerformanceObserver\n  private engine?: Engine\n  private eventIdCounter = 0\n  private maxEvents = 50 // 限制最大事件数量\n  private maxMetrics = 50 // 限制最大指标数量\n  private destroyed = false\n\n  constructor(thresholds: PerformanceThresholds = {}, engine?: Engine) {\n    this.engine = engine\n    this.thresholds = {\n      responseTime: { good: 100, poor: 1000 },\n      fps: { good: 55, poor: 30 },\n      memory: { warning: 100, critical: 200 },\n      bundleSize: { warning: 500, critical: 1000 },\n      ...thresholds,\n    }\n  }\n\n  startEvent(\n    type: PerformanceEventType,\n    name: string,\n    metadata?: Record<string, unknown>\n  ): string {\n    const id = `perf_${++this.eventIdCounter}_${Date.now()}`\n    const event: PerformanceEvent = {\n      id,\n      type,\n      name,\n      startTime: globalThis.performance.now(),\n      metadata,\n    }\n\n    this.events.set(id, event)\n\n    // 限制事件数量\n    if (this.events.size > this.maxEvents) {\n      const oldestKey = this.events.keys().next().value\n      if (oldestKey) {\n        this.events.delete(oldestKey)\n      }\n    }\n\n    return id\n  }\n\n  endEvent(id: string, metadata?: Record<string, unknown>): void {\n    const event = this.events.get(id)\n    if (!event) {\n      this.engine?.logger?.warn(`Performance event ${id} not found`)\n      return\n    }\n\n    const endTime = globalThis.performance.now()\n    const duration = endTime - event.startTime\n\n    event.endTime = endTime\n    event.duration = duration\n\n    if (metadata) {\n      event.metadata = { ...event.metadata, ...metadata }\n    }\n\n    // 检查阈值违规\n    this.checkThresholdViolations(event)\n\n    // 触发事件完成回调\n    if (this.engine?.events) {\n      this.engine.events.emit('performance:event', event)\n    }\n  }\n\n  recordEvent(event: Omit<PerformanceEvent, 'id'>): string {\n    const id = `perf_${++this.eventIdCounter}_${Date.now()}`\n    const fullEvent: PerformanceEvent = {\n      ...event,\n      id,\n    }\n\n    this.events.set(id, fullEvent)\n\n    // 检查阈值违规\n    this.checkThresholdViolations(fullEvent)\n\n    return id\n  }\n\n  collectMetrics(): PerformanceMetrics {\n    const timestamp = Date.now()\n    const metrics: PerformanceMetrics = {\n      timestamp,\n      duration: 0, // 将在后续更新\n    }\n\n    // 收集内存信息\n    if (\n      typeof globalThis !== 'undefined' &&\n      typeof globalThis.performance !== 'undefined' &&\n      'memory' in (globalThis.performance as Performance)\n    ) {\n      const memory = (globalThis.performance as Performance & { memory?: { usedJSHeapSize: number; totalJSHeapSize: number; jsHeapSizeLimit: number } }).memory\n      if (!memory) return metrics\n      metrics.memory = {\n        used: memory.usedJSHeapSize,\n        total: memory.totalJSHeapSize,\n        limit: memory.jsHeapSizeLimit,\n      }\n    }\n\n    // 收集网络信息\n    if (\n      typeof globalThis.performance !== 'undefined' &&\n      globalThis.performance.getEntriesByType\n    ) {\n      const networkEntries =\n        globalThis.performance.getEntriesByType('navigation')\n      if (networkEntries.length > 0) {\n        const entry = networkEntries[0] as PerformanceNavigationTiming\n        metrics.network = {\n          latency: entry.responseStart - entry.requestStart,\n          bandwidth: entry.transferSize ? (entry.transferSize / (entry.responseEnd - entry.responseStart)) * 1000 : 0,\n          requests: 1,\n          totalSize: entry.transferSize || 0,\n          averageTime: entry.loadEventEnd - entry.loadEventStart,\n        }\n      }\n    }\n\n    return metrics\n  }\n\n  recordMetrics(metrics: Partial<PerformanceMetrics>): void {\n    if (this.destroyed) return\n\n    const fullMetrics: PerformanceMetrics = {\n      timestamp: Date.now(),\n      duration: 0,\n      ...metrics,\n    }\n\n    this.metrics.push(fullMetrics)\n\n    // 限制存储的指标数量，减少内存占用\n    if (this.metrics.length > this.maxMetrics) {\n      this.metrics = this.metrics.slice(-this.maxMetrics)\n    }\n\n    // 检查指标违规\n    this.checkMetricsViolations(fullMetrics)\n\n    // 触发指标回调\n    this.metricsCallbacks.forEach(callback => {\n      try {\n        callback(fullMetrics)\n      } catch (error) {\n        this.engine?.logger?.error('Error in metrics callback', error)\n      }\n    })\n  }\n\n  startMonitoring(): void {\n    if (this.monitoring) {\n      return\n    }\n\n    this.monitoring = true\n\n    // 启动FPS监控\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this.fpsMonitor.start(fps => {\n        this.recordMetrics({\n          rendering: {\n            fps,\n            frameTime: 1000 / fps,\n            droppedFrames: fps < 30 ? 1 : 0,\n            renderTime: 1000 / fps,\n          },\n        })\n      })\n    }\n\n    // 启动内存监控\n    this.memoryMonitor.start(memory => {\n      this.recordMetrics({ memory })\n    })\n\n    // 监听性能观察者API\n    if (typeof PerformanceObserver !== 'undefined') {\n      try {\n        this.performanceObserver = new PerformanceObserver(list => {\n          if (this.destroyed) return\n          for (const entry of list.getEntries()) {\n            this.handlePerformanceEntry(entry)\n          }\n        })\n\n        this.performanceObserver.observe({\n          entryTypes: ['navigation', 'resource', 'measure', 'mark'],\n        })\n      } catch (error) {\n        this.engine?.logger?.warn('PerformanceObserver not supported', error)\n      }\n    }\n\n    this.engine?.logger?.info('Performance monitoring started')\n  }\n\n  stopMonitoring(): void {\n    if (!this.monitoring) {\n      return\n    }\n\n    this.monitoring = false\n    this.fpsMonitor.stop()\n    this.memoryMonitor.stop()\n\n    if (this.performanceObserver) {\n      this.performanceObserver.disconnect()\n      this.performanceObserver = undefined\n    }\n\n    this.engine?.logger?.info('Performance monitoring stopped')\n  }\n\n  isMonitoring(): boolean {\n    return this.monitoring\n  }\n\n  getEvents(filter?: Partial<PerformanceEvent>): PerformanceEvent[] {\n    let events = Array.from(this.events.values())\n\n    if (filter) {\n      events = events.filter(event => {\n        return Object.entries(filter).every(([key, value]) => {\n          return event[key as keyof PerformanceEvent] === value\n        })\n      })\n    }\n\n    return events.sort((a, b) => a.startTime - b.startTime)\n  }\n\n  getMetrics(timeRange?: { start: number; end: number }): PerformanceMetrics[] {\n    let metrics = [...this.metrics]\n\n    if (timeRange) {\n      metrics = metrics.filter(\n        metric =>\n          metric.timestamp >= timeRange.start &&\n          metric.timestamp <= timeRange.end\n      )\n    }\n\n    return metrics.sort((a, b) => a.timestamp - b.timestamp)\n  }\n\n  getReport(timeRange?: { start: number; end: number }): PerformanceReport {\n    const events = this.getEvents()\n    const metrics = this.getMetrics(timeRange)\n\n    // 计算摘要\n    const completedEvents = events.filter(e => e.duration !== undefined)\n    const totalResponseTime = completedEvents.reduce(\n      (sum, e) => sum + (e.duration || 0),\n      0\n    )\n    const averageResponseTime =\n      completedEvents.length > 0\n        ? totalResponseTime / completedEvents.length\n        : 0\n\n    const fpsMetrics = metrics.filter(m => m.rendering?.fps)\n    const averageFPS =\n      fpsMetrics.length > 0\n        ? fpsMetrics.reduce((sum, m) => sum + (m.rendering?.fps || 0), 0) /\n        fpsMetrics.length\n        : 0\n\n    const latestMemory = metrics.filter(m => m.memory).pop()\n    const memoryUsage = latestMemory?.memory?.used || 0\n\n    const timeStart =\n      timeRange?.start ||\n      (events.length > 0\n        ? Math.min(...events.map(e => e.startTime))\n        : Date.now())\n    const timeEnd = timeRange?.end || Date.now()\n\n    return {\n      summary: {\n        totalEvents: events.length,\n        averageResponseTime,\n        averageFPS,\n        memoryUsage,\n        timeRange: {\n          start: timeStart,\n          end: timeEnd,\n        },\n      },\n      events,\n      metrics,\n      violations: this.getViolations(timeRange),\n      recommendations: this.generateRecommendations(events, metrics),\n    }\n  }\n\n  setThresholds(thresholds: Partial<PerformanceThresholds>): void {\n    this.thresholds = { ...this.thresholds, ...thresholds }\n  }\n\n  getThresholds(): PerformanceThresholds {\n    return { ...this.thresholds }\n  }\n\n  onViolation(callback: (violation: PerformanceViolation) => void): void {\n    this.violationCallbacks.push(callback)\n  }\n\n  onMetrics(callback: (metrics: PerformanceMetrics) => void): () => void {\n    this.metricsCallbacks.push(callback)\n\n    // 返回取消订阅函数\n    return () => {\n      const index = this.metricsCallbacks.indexOf(callback)\n      if (index > -1) {\n        this.metricsCallbacks.splice(index, 1)\n      }\n    }\n  }\n\n  clearData(olderThan?: number): void {\n    const cutoff = olderThan || Date.now() - 24 * 60 * 60 * 1000 // 默认24小时\n\n    // 清理事件\n    for (const [id, event] of this.events.entries()) {\n      if (event.startTime < cutoff) {\n        this.events.delete(id)\n      }\n    }\n\n    // 清理指标\n    this.metrics = this.metrics.filter(metric => metric.timestamp >= cutoff)\n  }\n\n  exportData(): string {\n    return JSON.stringify({\n      events: Array.from(this.events.values()),\n      metrics: this.metrics,\n      thresholds: this.thresholds,\n    })\n  }\n\n  importData(data: string): void {\n    try {\n      const parsed = JSON.parse(data)\n\n      if (parsed.events) {\n        this.events.clear()\n        parsed.events.forEach((event: PerformanceEvent) => {\n          this.events.set(event.id, event)\n        })\n      }\n\n      if (parsed.metrics) {\n        this.metrics = parsed.metrics\n      }\n\n      if (parsed.thresholds) {\n        this.thresholds = { ...this.thresholds, ...parsed.thresholds }\n      }\n    } catch (error) {\n      this.engine?.logger?.error('Failed to import performance data', error)\n    }\n  }\n\n  private handlePerformanceEntry(entry: PerformanceEntry): void {\n    const eventType = this.getEventTypeFromEntry(entry)\n\n    this.recordEvent({\n      type: eventType,\n      name: entry.name,\n      startTime: entry.startTime,\n      endTime: entry.startTime + entry.duration,\n      duration: entry.duration,\n      metadata: {\n        entryType: entry.entryType,\n        ...this.getEntryMetadata(entry),\n      },\n    })\n  }\n\n  private getEventTypeFromEntry(entry: PerformanceEntry): PerformanceEventType {\n    switch (entry.entryType) {\n      case 'navigation':\n        return PerformanceEventType.NAVIGATION\n      case 'resource':\n        return PerformanceEventType.RESOURCE_LOAD\n      case 'measure':\n      case 'mark':\n        return PerformanceEventType.CUSTOM\n      default:\n        return PerformanceEventType.CUSTOM\n    }\n  }\n\n  private getEntryMetadata(entry: PerformanceEntry): Record<string, unknown> {\n    const metadata: Record<string, unknown> = {}\n\n    const anyEntry = entry as unknown as { transferSize?: number; decodedBodySize?: number }\n    if (typeof anyEntry.transferSize === 'number') {\n      metadata.transferSize = anyEntry.transferSize\n    }\n\n    if (typeof anyEntry.decodedBodySize === 'number') {\n      metadata.decodedBodySize = anyEntry.decodedBodySize\n    }\n\n    return metadata\n  }\n\n  private checkThresholdViolations(event: PerformanceEvent): void {\n    if (!event.duration) return\n\n    const { responseTime } = this.thresholds\n\n    if (responseTime && event.duration > responseTime.poor) {\n      this.reportViolation({\n        type: 'threshold',\n        severity: 'high',\n        message: `Slow operation detected: ${event.name\n          } took ${event.duration.toFixed(2)}ms`,\n        details: { event, threshold: responseTime.poor },\n        timestamp: Date.now(),\n      })\n    }\n  }\n\n  private checkMetricsViolations(metrics: PerformanceMetrics): void {\n    // 检查内存使用\n    if (metrics.memory && this.thresholds.memory) {\n      const memoryMB = metrics.memory.used / (1024 * 1024)\n\n      if (memoryMB > this.thresholds.memory.critical) {\n        this.reportViolation({\n          type: 'memory_leak',\n          severity: 'critical',\n          message: `Critical memory usage: ${memoryMB.toFixed(2)}MB`,\n          details: {\n            memory: metrics.memory,\n            threshold: this.thresholds.memory.critical,\n          },\n          timestamp: Date.now(),\n        })\n      } else if (memoryMB > this.thresholds.memory.warning) {\n        this.reportViolation({\n          type: 'memory_leak',\n          severity: 'medium',\n          message: `High memory usage: ${memoryMB.toFixed(2)}MB`,\n          details: {\n            memory: metrics.memory,\n            threshold: this.thresholds.memory.warning,\n          },\n          timestamp: Date.now(),\n        })\n      }\n    }\n\n    // 检查FPS\n    if (metrics.rendering?.fps && this.thresholds.fps) {\n      if (metrics.rendering.fps < this.thresholds.fps.poor) {\n        this.reportViolation({\n          type: 'threshold',\n          severity: 'medium',\n          message: `Low FPS detected: ${metrics.rendering.fps}`,\n          details: {\n            fps: metrics.rendering.fps,\n            threshold: this.thresholds.fps.poor,\n          },\n          timestamp: Date.now(),\n        })\n      }\n    }\n  }\n\n  private reportViolation(violation: PerformanceViolation): void {\n    this.violationCallbacks.forEach(callback => {\n      try {\n        callback(violation)\n      } catch (error) {\n        this.engine?.logger?.error('Error in violation callback', error)\n      }\n    })\n\n    if (this.engine?.events) {\n      this.engine.events.emit('performance:violation', violation)\n    }\n  }\n\n  private getViolations(_timeRange?: {\n    start: number\n    end: number\n  }): PerformanceViolation[] {\n    // 这里应该从存储中获取违规记录\n    // 为简化实现，返回空数组\n    return []\n  }\n\n  private generateRecommendations(\n    events: PerformanceEvent[],\n    metrics: PerformanceMetrics[]\n  ): string[] {\n    const recommendations: string[] = []\n\n    // 分析慢操作\n    const slowEvents = events.filter(e => e.duration && e.duration > 1000)\n    if (slowEvents.length > 0) {\n      recommendations.push(`发现 ${slowEvents.length} 个慢操作，建议优化性能`)\n\n      // 分析最慢的操作\n      const slowestEvent = slowEvents.reduce((prev, current) =>\n        (prev.duration || 0) > (current.duration || 0) ? prev : current\n      )\n      recommendations.push(\n        `最慢操作: ${slowestEvent.name} (${slowestEvent.duration}ms)`\n      )\n    }\n\n    // 分析内存使用和泄漏\n    const memoryMetrics = metrics.filter(m => m.memory)\n    if (memoryMetrics.length > 0) {\n      // 如果有多个指标，分析内存增长\n      if (memoryMetrics.length > 1) {\n        const firstMemory = memoryMetrics[0].memory?.used || 0\n        const lastMemory =\n          memoryMetrics[memoryMetrics.length - 1].memory?.used || 0\n        const memoryGrowth = lastMemory - firstMemory\n        const memoryGrowthMB = memoryGrowth / (1024 * 1024)\n\n        if (memoryGrowthMB > 50) {\n          recommendations.push(\n            `检测到内存增长 ${memoryGrowthMB.toFixed(2)}MB，可能存在内存泄漏`\n          )\n        }\n      }\n\n      // 分析平均内存使用\n      const avgMemory =\n        memoryMetrics.reduce((sum, m) => sum + (m.memory?.used || 0), 0) /\n        memoryMetrics.length\n      const memoryMB = avgMemory / (1024 * 1024)\n\n      if (memoryMB > 100) {\n        recommendations.push(\n          `平均内存使用 ${memoryMB.toFixed(2)}MB，建议优化内存使用`\n        )\n      } else if (memoryMB > 50) {\n        recommendations.push(\n          `内存使用较高 ${memoryMB.toFixed(2)}MB，建议监控内存使用情况`\n        )\n      }\n    }\n\n    // 分析FPS和渲染性能\n    const fpsMetrics = metrics.filter(m => m.rendering?.fps)\n    if (fpsMetrics.length > 0) {\n      const avgFPS =\n        fpsMetrics.reduce((sum, m) => sum + (m.rendering?.fps || 0), 0) /\n        fpsMetrics.length\n      const minFPS = Math.min(...fpsMetrics.map(m => m.rendering?.fps || 60))\n\n      if (avgFPS < 30) {\n        recommendations.push(`平均FPS ${avgFPS.toFixed(1)}，建议优化渲染性能`)\n      }\n\n      if (minFPS < 20) {\n        recommendations.push(`最低FPS ${minFPS}，存在严重卡顿`)\n      }\n\n      // 检查掉帧情况\n      const droppedFrames = fpsMetrics.reduce(\n        (sum, m) => sum + (m.rendering?.droppedFrames || 0),\n        0\n      )\n      if (droppedFrames > fpsMetrics.length * 0.1) {\n        recommendations.push(\n          `掉帧率 ${((droppedFrames / fpsMetrics.length) * 100).toFixed(\n            1\n          )}%，建议优化动画`\n        )\n      }\n    }\n\n    // 分析网络性能\n    const networkEvents = events.filter(\n      e => e.type === PerformanceEventType.NETWORK\n    )\n    if (networkEvents.length > 0) {\n      const avgResponseTime =\n        networkEvents.reduce((sum, e) => sum + (e.duration || 0), 0) /\n        networkEvents.length\n      if (avgResponseTime > 2000) {\n        recommendations.push(\n          `网络请求平均响应时间 ${avgResponseTime.toFixed(\n            0\n          )}ms，建议优化网络性能`\n        )\n      }\n    }\n\n    // 分析组件渲染性能\n    const renderEvents = events.filter(\n      e => e.type === PerformanceEventType.RENDER\n    )\n    if (renderEvents.length > 0) {\n      const slowRenders = renderEvents.filter(e => (e.duration || 0) > 16) // 超过一帧时间\n      if (slowRenders.length > renderEvents.length * 0.2) {\n        recommendations.push(\n          `${((slowRenders.length / renderEvents.length) * 100).toFixed(\n            1\n          )}% 的渲染超过16ms，建议优化组件`\n        )\n      }\n    }\n\n    return recommendations\n  }\n\n  // 添加缺失的方法\n  updateThresholds(thresholds: Partial<PerformanceThresholds>): void {\n    this.setThresholds(thresholds)\n  }\n\n  generateReport(timeRange?: {\n    start: number\n    end: number\n  }): PerformanceReport {\n    return this.getReport(timeRange)\n  }\n\n  mark(name: string): void {\n    if (\n      typeof globalThis.performance !== 'undefined' &&\n      globalThis.performance.mark\n    ) {\n      globalThis.performance.mark(name)\n    }\n  }\n\n  measure(name: string, startMark?: string, endMark?: string): void {\n    if (\n      typeof globalThis.performance !== 'undefined' &&\n      globalThis.performance.measure\n    ) {\n      try {\n        globalThis.performance.measure(name, startMark, endMark)\n      } catch (error) {\n        // 如果标记不存在，忽略错误\n        this.engine?.logger?.warn(`Performance measure failed: ${error}`)\n      }\n    }\n  }\n\n  getMarks(): PerformanceEntry[] {\n    if (\n      typeof globalThis.performance !== 'undefined' &&\n      globalThis.performance.getEntriesByType\n    ) {\n      return globalThis.performance.getEntriesByType('mark')\n    }\n    return []\n  }\n\n  getMeasures(): PerformanceEntry[] {\n    if (\n      typeof globalThis.performance !== 'undefined' &&\n      globalThis.performance.getEntriesByType\n    ) {\n      return globalThis.performance.getEntriesByType('measure')\n    }\n    return []\n  }\n\n  clearEvents(): void {\n    this.events.clear()\n  }\n\n  clearMetrics(): void {\n    this.metrics = []\n  }\n\n  clearMarks(): void {\n    if (\n      typeof globalThis.performance !== 'undefined' &&\n      globalThis.performance.clearMarks\n    ) {\n      globalThis.performance.clearMarks()\n    }\n  }\n\n  clearMeasures(): void {\n    if (\n      typeof globalThis.performance !== 'undefined' &&\n      globalThis.performance.clearMeasures\n    ) {\n      globalThis.performance.clearMeasures()\n    }\n  }\n\n  /**\n   * 获取内存趋势分析\n   */\n  getMemoryTrend(): {\n    average: number\n    peak: number\n    current: number\n    trend: 'increasing' | 'stable' | 'decreasing'\n  } | null {\n    return this.memoryMonitor.getMemoryTrend()\n  }\n\n  /**\n   * 获取内存信息（立即）\n   */\n  getMemoryInfo(): PerformanceMetrics['memory'] | undefined {\n    if (\n      typeof globalThis !== 'undefined' &&\n      typeof globalThis.performance !== 'undefined' &&\n      'memory' in (globalThis.performance as Performance)\n    ) {\n      const memory = (globalThis.performance as Performance & { memory?: { usedJSHeapSize: number; totalJSHeapSize: number; jsHeapSizeLimit: number } }).memory\n      if (!memory) return undefined\n      return {\n        used: memory.usedJSHeapSize,\n        total: memory.totalJSHeapSize,\n        limit: memory.jsHeapSizeLimit,\n      }\n    }\n    return undefined\n  }\n\n  // 销毁方法 - 清理所有资源\n  destroy(): void {\n    if (this.destroyed) return\n    this.destroyed = true\n\n    // 停止监控\n    this.stopMonitoring()\n\n    // 清理性能观察器\n    if (this.performanceObserver) {\n      this.performanceObserver.disconnect()\n      this.performanceObserver = undefined\n    }\n\n    // 清理监视器\n    this.fpsMonitor.stop()\n    this.memoryMonitor.stop()\n\n    // 清理数据\n    this.events.clear()\n    this.metrics = []\n    this.violationCallbacks = []\n    this.metricsCallbacks = []\n\n    // 清理性能标记\n    this.clearMarks()\n    this.clearMeasures()\n\n    this.engine?.logger?.info('Performance manager destroyed')\n  }\n}\n\n// 创建性能管理器\nexport function createPerformanceManager(\n  thresholds?: PerformanceThresholds,\n  engine?: Engine\n): PerformanceManager {\n  return new PerformanceManagerImpl(thresholds, engine)\n}\n\n// 性能装饰器\nexport function performance(name?: string) {\n  return function (\n    target: unknown,\n    propertyKey: string,\n    descriptor: PropertyDescriptor\n  ) {\n    const originalMethod = descriptor.value\n    const ctorName = (target as { constructor?: { name?: string } }).constructor?.name ?? 'UnknownTarget'\n    const eventName = name || `${ctorName}.${propertyKey}`\n\n    descriptor.value = async function (...args: unknown[]) {\n      const manager = getGlobalPerformanceManager()\n      const eventId = manager.startEvent(PerformanceEventType.CUSTOM, eventName)\n\n      try {\n        const result = await originalMethod.apply(this, args)\n        manager.endEvent(eventId)\n        return result\n      } catch (error) {\n        manager.endEvent(eventId, {\n          error: error instanceof Error ? error.message : String(error),\n        })\n        throw error\n      }\n    }\n\n    return descriptor\n  }\n}\n\n// 全局性能管理器\nlet globalPerformanceManager: PerformanceManager | undefined\n\nexport function getGlobalPerformanceManager(): PerformanceManager {\n  if (!globalPerformanceManager) {\n    globalPerformanceManager = createPerformanceManager()\n  }\n  return globalPerformanceManager\n}\n\nexport function setGlobalPerformanceManager(manager: PerformanceManager): void {\n  globalPerformanceManager = manager\n}\n"],"names":["PerformanceEventType"],"mappings":"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"}