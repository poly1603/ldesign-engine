{"version":3,"file":"environment-manager.cjs","sources":["../../src/environment/environment-manager.ts"],"sourcesContent":["import type { Logger } from '../types'\n\n// 环境类型\nexport type Environment = 'development' | 'production' | 'test'\n\n// 平台类型\nexport type Platform = 'browser' | 'node' | 'webworker' | 'electron' | 'unknown'\n\n// 浏览器类型\nexport type Browser =\n  | 'chrome'\n  | 'firefox'\n  | 'safari'\n  | 'edge'\n  | 'ie'\n  | 'opera'\n  | 'unknown'\n\n// 设备类型\nexport type DeviceType = 'desktop' | 'mobile' | 'tablet' | 'unknown'\n\n// 环境信息接口\nexport interface EnvironmentInfo {\n  // 基础环境\n  environment: Environment\n  platform: Platform\n\n  // 浏览器信息\n  browser: {\n    name: Browser\n    version: string\n    userAgent: string\n  }\n\n  // 设备信息\n  device: {\n    type: DeviceType\n    isMobile: boolean\n    isTablet: boolean\n    isDesktop: boolean\n    isTouchDevice: boolean\n  }\n\n  // 运行时特性\n  features: {\n    // Web APIs\n    hasLocalStorage: boolean\n    hasSessionStorage: boolean\n    hasIndexedDB: boolean\n    hasWebWorkers: boolean\n    hasServiceWorkers: boolean\n    hasWebGL: boolean\n    hasWebGL2: boolean\n    hasWebAssembly: boolean\n\n    // 网络特性\n    hasOnlineDetection: boolean\n    hasNetworkInformation: boolean\n\n    // 性能特性\n    hasPerformanceAPI: boolean\n    hasIntersectionObserver: boolean\n    hasMutationObserver: boolean\n    hasResizeObserver: boolean\n\n    // 媒体特性\n    hasMediaDevices: boolean\n    hasGetUserMedia: boolean\n\n    // 其他特性\n    hasClipboardAPI: boolean\n    hasNotificationAPI: boolean\n    hasGeolocationAPI: boolean\n  }\n\n  // 性能信息\n  performance: {\n    memory?: {\n      used: number\n      total: number\n      limit: number\n    }\n    connection?: {\n      effectiveType: string\n      downlink: number\n      rtt: number\n      saveData: boolean\n    }\n  }\n\n  // 屏幕信息\n  screen: {\n    width: number\n    height: number\n    availWidth: number\n    availHeight: number\n    colorDepth: number\n    pixelRatio: number\n    orientation?: string\n  }\n\n  // 时区信息\n  timezone: {\n    name: string\n    offset: number\n    dst: boolean\n  }\n}\n\n// 环境适配配置\nexport interface EnvironmentAdaptation {\n  // 功能降级配置\n  fallbacks: {\n    storage: 'memory' | 'cookie' | 'none'\n    animation: 'css' | 'js' | 'none'\n    networking: 'fetch' | 'xhr' | 'none'\n  }\n\n  // 性能优化配置\n  optimizations: {\n    enableLazyLoading: boolean\n    enableCodeSplitting: boolean\n    enableImageOptimization: boolean\n    enableCaching: boolean\n    maxConcurrentRequests: number\n  }\n\n  // 兼容性配置\n  compatibility: {\n    enablePolyfills: boolean\n    supportedBrowsers: string[]\n    minimumVersions: Record<string, string>\n  }\n}\n\n// 环境管理器接口\nexport interface EnvironmentManager {\n  // 环境检测\n  detect: () => EnvironmentInfo\n  getEnvironment: () => Environment\n  getPlatform: () => Platform\n  getBrowser: () => { name: Browser; version: string }\n  getDevice: () => { type: DeviceType; isMobile: boolean }\n\n  // 特性检测\n  hasFeature: (feature: string) => boolean\n  getFeatures: () => Record<string, boolean>\n  checkCompatibility: (requirements: Record<string, unknown>) => boolean\n\n  // 环境适配\n  getAdaptation: () => EnvironmentAdaptation\n  setAdaptation: (adaptation: Partial<EnvironmentAdaptation>) => void\n  adaptForEnvironment: (env: EnvironmentInfo) => EnvironmentAdaptation\n\n  // 性能监控\n  getPerformanceInfo: () => EnvironmentInfo['performance']\n  monitorPerformance: (\n    callback: (info: EnvironmentInfo['performance']) => void\n  ) => void\n\n  // 事件监听\n  onEnvironmentChange: (callback: (info: EnvironmentInfo) => void) => () => void\n  onFeatureChange: (\n    feature: string,\n    callback: (available: boolean) => void\n  ) => () => void\n}\n\n// 环境管理器实现\nexport class EnvironmentManagerImpl implements EnvironmentManager {\n  private environmentInfo: EnvironmentInfo\n  private adaptation: EnvironmentAdaptation\n  private changeListeners: Array<(info: EnvironmentInfo) => void> = []\n  private featureListeners = new Map<\n    string,\n    Array<(available: boolean) => void>\n  >()\n\n  private logger?: Logger\n\n  constructor(logger?: Logger) {\n    this.logger = logger\n    this.environmentInfo = this.detectEnvironment()\n    this.adaptation = this.createDefaultAdaptation()\n\n    // 监听环境变化\n    this.setupEnvironmentListeners()\n\n    // Environment manager initialized (日志已禁用)\n  }\n\n  detect(): EnvironmentInfo {\n    return { ...this.environmentInfo }\n  }\n\n  getEnvironment(): Environment {\n    return this.environmentInfo.environment\n  }\n\n  getPlatform(): Platform {\n    return this.environmentInfo.platform\n  }\n\n  getBrowser(): { name: Browser; version: string } {\n    return {\n      name: this.environmentInfo.browser.name,\n      version: this.environmentInfo.browser.version,\n    }\n  }\n\n  getDevice(): { type: DeviceType; isMobile: boolean } {\n    return {\n      type: this.environmentInfo.device.type,\n      isMobile: this.environmentInfo.device.isMobile,\n    }\n  }\n\n  hasFeature(feature: string): boolean {\n    return (\n      this.environmentInfo.features[\n      feature as keyof typeof this.environmentInfo.features\n      ] || false\n    )\n  }\n\n  getFeatures(): Record<string, boolean> {\n    return { ...this.environmentInfo.features }\n  }\n\n  checkCompatibility(requirements: { browser?: Partial<Record<Browser, string>>; features?: string[] }): boolean {\n    // 检查浏览器版本兼容性\n    if (requirements.browser) {\n      const browserReq = requirements.browser?.[this.environmentInfo.browser.name]\n      if (\n        browserReq &&\n        !this.isVersionCompatible(\n          this.environmentInfo.browser.version,\n          browserReq\n        )\n      ) {\n        return false\n      }\n    }\n\n    // 检查特性兼容性\n    if (requirements.features && Array.isArray(requirements.features)) {\n      for (const feature of requirements.features) {\n        if (!this.hasFeature(feature)) {\n          return false\n        }\n      }\n    }\n\n    return true\n  }\n\n  getAdaptation(): EnvironmentAdaptation {\n    return { ...this.adaptation }\n  }\n\n  setAdaptation(adaptation: Partial<EnvironmentAdaptation>): void {\n    this.adaptation = {\n      ...this.adaptation,\n      ...adaptation,\n      fallbacks: { ...this.adaptation.fallbacks, ...adaptation.fallbacks },\n      optimizations: {\n        ...this.adaptation.optimizations,\n        ...adaptation.optimizations,\n      },\n      compatibility: {\n        ...this.adaptation.compatibility,\n        ...adaptation.compatibility,\n      },\n    }\n\n    this.logger?.debug('Environment adaptation updated', adaptation)\n  }\n\n  adaptForEnvironment(env: EnvironmentInfo): EnvironmentAdaptation {\n    const adaptation: EnvironmentAdaptation = {\n      fallbacks: {\n        storage: env.features.hasLocalStorage ? 'memory' : 'cookie',\n        animation: env.device.isMobile ? 'css' : 'js',\n        networking: env.features.hasServiceWorkers ? 'fetch' : 'xhr',\n      },\n      optimizations: {\n        enableLazyLoading: env.device.isMobile,\n        enableCodeSplitting: env.environment === 'production',\n        enableImageOptimization: env.device.isMobile,\n        enableCaching: env.environment === 'production',\n        maxConcurrentRequests: env.device.isMobile ? 4 : 8,\n      },\n      compatibility: {\n        enablePolyfills: env.browser.name === 'ie',\n        supportedBrowsers: ['chrome', 'firefox', 'safari', 'edge'],\n        minimumVersions: {\n          chrome: '80',\n          firefox: '75',\n          safari: '13',\n          edge: '80',\n        },\n      },\n    }\n\n    return adaptation\n  }\n\n  getPerformanceInfo(): EnvironmentInfo['performance'] {\n    return { ...this.environmentInfo.performance }\n  }\n\n  monitorPerformance(\n    callback: (info: EnvironmentInfo['performance']) => void\n  ): void {\n    const monitor = () => {\n      const perfInfo = this.detectPerformanceInfo()\n      callback(perfInfo)\n    }\n\n    // 定期监控\n    setInterval(monitor, 5000)\n\n    // 立即执行一次\n    monitor()\n  }\n\n  onEnvironmentChange(callback: (info: EnvironmentInfo) => void): () => void {\n    this.changeListeners.push(callback)\n\n    return () => {\n      const index = this.changeListeners.indexOf(callback)\n      if (index > -1) {\n        this.changeListeners.splice(index, 1)\n      }\n    }\n  }\n\n  onFeatureChange(\n    feature: string,\n    callback: (available: boolean) => void\n  ): () => void {\n    if (!this.featureListeners.has(feature)) {\n      this.featureListeners.set(feature, [])\n    }\n\n    const listeners = this.featureListeners.get(feature)\n    listeners?.push(callback)\n\n    return () => {\n      const listeners = this.featureListeners.get(feature)\n      if (listeners) {\n        const index = listeners.indexOf(callback)\n        if (index > -1) {\n          listeners.splice(index, 1)\n        }\n      }\n    }\n  }\n\n  // 私有方法\n  private detectEnvironment(): EnvironmentInfo {\n    return {\n      environment: this.detectEnv(),\n      platform: this.detectPlatform(),\n      browser: this.detectBrowser(),\n      device: this.detectDevice(),\n      features: this.detectFeatures(),\n      performance: this.detectPerformanceInfo(),\n      screen: this.detectScreenInfo(),\n      timezone: this.detectTimezone(),\n    }\n  }\n\n  private detectEnv(): Environment {\n    try {\n      // 尝试访问 Node.js 环境变量\n      if (typeof process !== 'undefined' && process.env) {\n        const nodeEnv = process.env.NODE_ENV\n        if (nodeEnv === 'production') return 'production'\n        if (nodeEnv === 'test') return 'test'\n      }\n\n      // 检测测试环境\n      if (\n        typeof globalThis !== 'undefined' &&\n        (globalThis as { __vitest__?: unknown }).__vitest__ !== undefined\n      ) {\n        return 'test'\n      }\n\n      if (\n        typeof window !== 'undefined' &&\n        (window as { __karma__?: unknown }).__karma__ !== undefined\n      ) {\n        return 'test'\n      }\n\n      return 'development'\n    } catch {\n      return 'development'\n    }\n  }\n\n  private detectPlatform(): Platform {\n    if (typeof window !== 'undefined') {\n      // 检测 Electron\n\n      const w = window as unknown as { require?: unknown; process?: { type?: unknown } }\n      const processKey = 'process'\n      if (w.require && w[processKey]?.type) {\n        return 'electron'\n      }\n\n      // 检测 Web Worker\n      if (typeof (globalThis as { importScripts?: unknown }).importScripts === 'function') {\n        return 'webworker'\n      }\n\n      return 'browser'\n    }\n\n    try {\n      // 检测 Node.js 环境\n      if (typeof process !== 'undefined' && process.versions?.node) {\n        return 'node'\n      }\n\n      return 'unknown'\n    } catch {\n      return 'unknown'\n    }\n  }\n\n  private detectBrowser(): {\n    name: Browser\n    version: string\n    userAgent: string\n  } {\n    if (typeof navigator === 'undefined') {\n      return { name: 'unknown', version: '', userAgent: '' }\n    }\n\n    const userAgent = navigator.userAgent\n    let name: Browser = 'unknown'\n    let version = ''\n\n    // Chrome\n    if (userAgent.includes('Chrome') && !userAgent.includes('Edg')) {\n      name = 'chrome'\n      const match = userAgent.match(/Chrome\\/(\\d+)/)\n      version = match ? match[1] : ''\n    }\n    // Edge\n    else if (userAgent.includes('Edg')) {\n      name = 'edge'\n      const match = userAgent.match(/Edg\\/(\\d+)/)\n      version = match ? match[1] : ''\n    }\n    // Firefox\n    else if (userAgent.includes('Firefox')) {\n      name = 'firefox'\n      const match = userAgent.match(/Firefox\\/(\\d+)/)\n      version = match ? match[1] : ''\n    }\n    // Safari\n    else if (userAgent.includes('Safari') && !userAgent.includes('Chrome')) {\n      name = 'safari'\n      const match = userAgent.match(/Version\\/(\\d+)/)\n      version = match ? match[1] : ''\n    }\n    // IE\n    else if (userAgent.includes('MSIE') || userAgent.includes('Trident')) {\n      name = 'ie'\n      const match = userAgent.match(/(?:MSIE |rv:)(\\d+)/)\n      version = match ? match[1] : ''\n    }\n    // Opera\n    else if (userAgent.includes('Opera') || userAgent.includes('OPR')) {\n      name = 'opera'\n      const match = userAgent.match(/(?:Opera|OPR)\\/(\\d+)/)\n      version = match ? match[1] : ''\n    }\n\n    return { name, version, userAgent }\n  }\n\n  private detectDevice(): EnvironmentInfo['device'] {\n    if (typeof navigator === 'undefined') {\n      return {\n        type: 'unknown',\n        isMobile: false,\n        isTablet: false,\n        isDesktop: false,\n        isTouchDevice: false,\n      }\n    }\n\n    const userAgent = navigator.userAgent\n    const isMobile =\n      /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(userAgent)\n    const isTablet = /iPad|Android(?=.*Tablet)|Tablet/i.test(userAgent)\n    const isTouchDevice =\n      'ontouchstart' in window || navigator.maxTouchPoints > 0\n\n    let type: DeviceType = 'desktop'\n    if (isTablet) {\n      type = 'tablet'\n    } else if (isMobile) {\n      type = 'mobile'\n    }\n\n    return {\n      type,\n      isMobile,\n      isTablet,\n      isDesktop: type === 'desktop',\n      isTouchDevice,\n    }\n  }\n\n  private detectFeatures(): EnvironmentInfo['features'] {\n    const hasWindow = typeof window !== 'undefined'\n    const hasNavigator = typeof navigator !== 'undefined'\n\n    return {\n      // Storage APIs\n      hasLocalStorage: hasWindow && 'localStorage' in window,\n      hasSessionStorage: hasWindow && 'sessionStorage' in window,\n      hasIndexedDB: hasWindow && 'indexedDB' in window,\n\n      // Worker APIs\n      hasWebWorkers: hasWindow && 'Worker' in window,\n      hasServiceWorkers: hasNavigator && 'serviceWorker' in navigator,\n\n      // Graphics APIs\n      hasWebGL: hasWindow && this.checkWebGL(),\n      hasWebGL2: hasWindow && this.checkWebGL2(),\n      hasWebAssembly: typeof WebAssembly !== 'undefined',\n\n      // Network APIs\n      hasOnlineDetection: hasNavigator && 'onLine' in navigator,\n      hasNetworkInformation: hasNavigator && 'connection' in navigator,\n\n      // Performance APIs\n      hasPerformanceAPI: hasWindow && 'performance' in window,\n      hasIntersectionObserver: hasWindow && 'IntersectionObserver' in window,\n      hasMutationObserver: hasWindow && 'MutationObserver' in window,\n      hasResizeObserver: hasWindow && 'ResizeObserver' in window,\n\n      // Media APIs\n      hasMediaDevices: hasNavigator && 'mediaDevices' in navigator,\n      hasGetUserMedia: hasNavigator && 'getUserMedia' in navigator,\n\n      // Other APIs\n      hasClipboardAPI: hasNavigator && 'clipboard' in navigator,\n      hasNotificationAPI: hasWindow && 'Notification' in window,\n      hasGeolocationAPI: hasNavigator && 'geolocation' in navigator,\n    }\n  }\n\n  private detectPerformanceInfo(): EnvironmentInfo['performance'] {\n    const info: EnvironmentInfo['performance'] = {}\n\n    // Memory information\n    if (typeof performance !== 'undefined' && 'memory' in performance) {\n      const memory = (performance as Performance & { memory?: { usedJSHeapSize: number; totalJSHeapSize: number; jsHeapSizeLimit: number } }).memory\n      if (!memory) return info\n      info.memory = {\n        used: memory.usedJSHeapSize,\n        total: memory.totalJSHeapSize,\n        limit: memory.jsHeapSizeLimit,\n      }\n    }\n\n    // Network information\n    if (typeof navigator !== 'undefined' && 'connection' in navigator) {\n      const connection = (navigator as Navigator & { connection?: { effectiveType?: string; downlink?: number; rtt?: number; saveData?: boolean } }).connection\n      if (!connection) return info\n      info.connection = {\n        effectiveType: connection.effectiveType || 'unknown',\n        downlink: connection.downlink || 0,\n        rtt: connection.rtt || 0,\n        saveData: connection.saveData || false,\n      }\n    }\n\n    return info\n  }\n\n  private detectScreenInfo(): EnvironmentInfo['screen'] {\n    if (typeof screen === 'undefined') {\n      return {\n        width: 0,\n        height: 0,\n        availWidth: 0,\n        availHeight: 0,\n        colorDepth: 0,\n        pixelRatio: 1,\n      }\n    }\n\n    return {\n      width: screen.width,\n      height: screen.height,\n      availWidth: screen.availWidth,\n      availHeight: screen.availHeight,\n      colorDepth: screen.colorDepth,\n      pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio : 1,\n      orientation:\n        typeof screen.orientation !== 'undefined'\n          ? screen.orientation.type\n          : undefined,\n    }\n  }\n\n  private detectTimezone(): EnvironmentInfo['timezone'] {\n    const now = new Date()\n    const january = new Date(now.getFullYear(), 0, 1)\n    const july = new Date(now.getFullYear(), 6, 1)\n    const offset = -now.getTimezoneOffset()\n    const dst =\n      offset !== -january.getTimezoneOffset() ||\n      offset !== -july.getTimezoneOffset()\n\n    return {\n      name: Intl.DateTimeFormat().resolvedOptions().timeZone,\n      offset,\n      dst,\n    }\n  }\n\n  private checkWebGL(): boolean {\n    try {\n      if (typeof document === 'undefined') return false\n      const canvas = document.createElement('canvas')\n      return !!(\n        canvas.getContext('webgl') || canvas.getContext('experimental-webgl')\n      )\n    } catch {\n      return false\n    }\n  }\n\n  private checkWebGL2(): boolean {\n    try {\n      if (typeof document === 'undefined') return false\n      const canvas = document.createElement('canvas')\n      return !!canvas.getContext('webgl2')\n    } catch {\n      return false\n    }\n  }\n\n  private createDefaultAdaptation(): EnvironmentAdaptation {\n    return {\n      fallbacks: {\n        storage: 'memory',\n        animation: 'css',\n        networking: 'fetch',\n      },\n      optimizations: {\n        enableLazyLoading: false,\n        enableCodeSplitting: false,\n        enableImageOptimization: false,\n        enableCaching: true,\n        maxConcurrentRequests: 6,\n      },\n      compatibility: {\n        enablePolyfills: false,\n        supportedBrowsers: ['chrome', 'firefox', 'safari', 'edge'],\n        minimumVersions: {\n          chrome: '80',\n          firefox: '75',\n          safari: '13',\n          edge: '80',\n        },\n      },\n    }\n  }\n\n  private setupEnvironmentListeners(): void {\n    if (typeof window === 'undefined') return\n\n    // 监听在线状态变化\n    window.addEventListener('online', () => this.handleEnvironmentChange())\n    window.addEventListener('offline', () => this.handleEnvironmentChange())\n\n    // 监听屏幕方向变化\n    if (screen.orientation) {\n      screen.orientation.addEventListener('change', () =>\n        this.handleEnvironmentChange()\n      )\n    }\n\n    // 监听窗口大小变化\n    window.addEventListener('resize', () => this.handleEnvironmentChange())\n  }\n\n  private handleEnvironmentChange(): void {\n    const newInfo = this.detectEnvironment()\n    const hasChanged =\n      JSON.stringify(newInfo) !== JSON.stringify(this.environmentInfo)\n\n    if (hasChanged) {\n      this.environmentInfo = newInfo\n      this.changeListeners.forEach(callback => {\n        try {\n          callback(newInfo)\n        } catch (error) {\n          this.logger?.error('Error in environment change callback', error)\n        }\n      })\n    }\n  }\n\n  private isVersionCompatible(current: string, required: string): boolean {\n    const currentParts = current.split('.').map(Number)\n    const requiredParts = required.split('.').map(Number)\n\n    for (\n      let i = 0;\n      i < Math.max(currentParts.length, requiredParts.length);\n      i++\n    ) {\n      const currentPart = currentParts[i] || 0\n      const requiredPart = requiredParts[i] || 0\n\n      if (currentPart > requiredPart) return true\n      if (currentPart < requiredPart) return false\n    }\n\n    return true\n  }\n}\n\n// 工厂函数\nexport function createEnvironmentManager(logger?: Logger): EnvironmentManager {\n  return new EnvironmentManagerImpl(logger)\n}\n\n// 全局环境管理器\nlet globalEnvironmentManager: EnvironmentManager | undefined\n\nexport function getGlobalEnvironmentManager(): EnvironmentManager {\n  if (!globalEnvironmentManager) {\n    globalEnvironmentManager = createEnvironmentManager()\n  }\n  return globalEnvironmentManager\n}\n\nexport function setGlobalEnvironmentManager(manager: EnvironmentManager): void {\n  globalEnvironmentManager = manager\n}\n"],"names":["listeners"],"mappings":";;;;;;;;;;;MAyKa,sBAAA,CAAsB;AAAA,EAWjC,YAAY,MAAA,EAAe;AARnB,IAAA,IAAA,CAAA,kBAA0D;AAC1D,IAAA,IAAA,CAAA,gBAAA,uBAAuB,GAAA,EAAG;AAQhC,IAAA,IAAA,CAAK,MAAA,GAAS,MAAA;AACd,IAAA,IAAA,CAAK,eAAA,GAAkB,KAAK,iBAAA;AAC5B,IAAA,IAAA,CAAK,UAAA,GAAa,KAAK,uBAAA;AAGvB,IAAA,IAAA,CAAK,yBAAA,EAAyB;AAAA,EAGhC;AAAA,EAEA,MAAA,GAAM;AACJ,IAAA,OAAO,EAAE,GAAG,IAAA,CAAK,eAAA;EACnB;AAAA,EAEA,cAAA,GAAc;AACZ,IAAA,OAAO,KAAK,eAAA,CAAgB,WAAA;AAAA,EAC9B;AAAA,EAEA,WAAA,GAAW;AACT,IAAA,OAAO,KAAK,eAAA,CAAgB,QAAA;AAAA,EAC9B;AAAA,EAEA,UAAA,GAAU;AACR,IAAA,OAAO;AAAA,MACL,IAAA,EAAM,IAAA,CAAK,eAAA,CAAgB,OAAA,CAAQ,IAAA;AAAA,MACnC,OAAA,EAAS,IAAA,CAAK,eAAA,CAAgB,OAAA,CAAQ;AAAA;EAE1C;AAAA,EAEA,SAAA,GAAS;AACP,IAAA,OAAO;AAAA,MACL,IAAA,EAAM,IAAA,CAAK,eAAA,CAAgB,MAAA,CAAO,IAAA;AAAA,MAClC,QAAA,EAAU,IAAA,CAAK,eAAA,CAAgB,MAAA,CAAO;AAAA;EAE1C;AAAA,EAEA,WAAW,OAAA,EAAe;AACxB,IAAA,OACE,IAAA,CAAK,eAAA,CAAgB,QAAA,CACrB,OAAqD,CAAA,IAChD,KAAA;AAAA,EAET;AAAA,EAEA,WAAA,GAAW;AACT,IAAA,OAAO,EAAE,GAAG,IAAA,CAAK,eAAA,CAAgB,QAAA;EACnC;AAAA,EAEA,mBAAmB,YAAA,EAAiF;AAElG,IAAA,IAAI,aAAa,OAAA,EAAS;AACxB,MAAA,MAAM,aAAa,YAAA,CAAa,OAAA,GAAU,IAAA,CAAK,eAAA,CAAgB,QAAQ,IAAI,CAAA;AAC3E,MAAA,IACE,UAAA,IACA,CAAC,IAAA,CAAK,mBAAA,CACJ,KAAK,eAAA,CAAgB,OAAA,CAAQ,OAAA,EAC7B,UAAU,CAAA,EAEZ;AACA,QAAA,OAAO,KAAA;AAAA,MACT;AAAA,IACF;AAGA,IAAA,IAAI,aAAa,QAAA,IAAY,KAAA,CAAM,OAAA,CAAQ,YAAA,CAAa,QAAQ,CAAA,EAAG;AACjE,MAAA,KAAA,MAAW,OAAA,IAAW,aAAa,QAAA,EAAU;AAC3C,QAAA,IAAI,CAAC,IAAA,CAAK,UAAA,CAAW,OAAO,CAAA,EAAG;AAC7B,UAAA,OAAO,KAAA;AAAA,QACT;AAAA,MACF;AAAA,IACF;AAEA,IAAA,OAAO,IAAA;AAAA,EACT;AAAA,EAEA,aAAA,GAAa;AACX,IAAA,OAAO,EAAE,GAAG,IAAA,CAAK,UAAA;EACnB;AAAA,EAEA,cAAc,UAAA,EAA0C;AACtD,IAAA,IAAA,CAAK,UAAA,GAAa;AAAA,MAChB,GAAG,IAAA,CAAK,UAAA;AAAA,MACR,GAAG,UAAA;AAAA,MACH,SAAA,EAAW,EAAE,GAAG,IAAA,CAAK,WAAW,SAAA,EAAW,GAAG,WAAW,SAAA,EAAS;AAAA,MAClE,aAAA,EAAe;AAAA,QACb,GAAG,KAAK,UAAA,CAAW,aAAA;AAAA,QACnB,GAAG,UAAA,CAAW;AAAA,OACf;AAAA,MACD,aAAA,EAAe;AAAA,QACb,GAAG,KAAK,UAAA,CAAW,aAAA;AAAA,QACnB,GAAG,UAAA,CAAW;AAAA;AACf;AAGH,IAAA,IAAA,CAAK,MAAA,EAAQ,KAAA,CAAM,gCAAA,EAAkC,UAAU,CAAA;AAAA,EACjE;AAAA,EAEA,oBAAoB,GAAA,EAAoB;AACtC,IAAA,MAAM,UAAA,GAAoC;AAAA,MACxC,SAAA,EAAW;AAAA,QACT,OAAA,EAAS,GAAA,CAAI,QAAA,CAAS,eAAA,GAAkB,QAAA,GAAW,QAAA;AAAA,QACnD,SAAA,EAAW,GAAA,CAAI,MAAA,CAAO,QAAA,GAAW,KAAA,GAAQ,IAAA;AAAA,QACzC,UAAA,EAAY,GAAA,CAAI,QAAA,CAAS,iBAAA,GAAoB,OAAA,GAAU;AAAA,OACxD;AAAA,MACD,aAAA,EAAe;AAAA,QACb,iBAAA,EAAmB,IAAI,MAAA,CAAO,QAAA;AAAA,QAC9B,mBAAA,EAAqB,IAAI,WAAA,KAAgB,YAAA;AAAA,QACzC,uBAAA,EAAyB,IAAI,MAAA,CAAO,QAAA;AAAA,QACpC,aAAA,EAAe,IAAI,WAAA,KAAgB,YAAA;AAAA,QACnC,qBAAA,EAAuB,GAAA,CAAI,MAAA,CAAO,QAAA,GAAW,CAAA,GAAI;AAAA,OAClD;AAAA,MACD,aAAA,EAAe;AAAA,QACb,eAAA,EAAiB,GAAA,CAAI,OAAA,CAAQ,IAAA,KAAS,IAAA;AAAA,QACtC,iBAAA,EAAmB,CAAC,QAAA,EAAU,SAAA,EAAW,UAAU,MAAM,CAAA;AAAA,QACzD,eAAA,EAAiB;AAAA,UACf,MAAA,EAAQ,IAAA;AAAA,UACR,OAAA,EAAS,IAAA;AAAA,UACT,MAAA,EAAQ,IAAA;AAAA,UACR,IAAA,EAAM;AAAA;AACP;AACF;AAGH,IAAA,OAAO,UAAA;AAAA,EACT;AAAA,EAEA,kBAAA,GAAkB;AAChB,IAAA,OAAO,EAAE,GAAG,IAAA,CAAK,eAAA,CAAgB,WAAA;EACnC;AAAA,EAEA,mBACE,QAAA,EAAwD;AAExD,IAAA,MAAM,UAAU,MAAK;AACnB,MAAA,MAAM,QAAA,GAAW,KAAK,qBAAA;AACtB,MAAA,QAAA,CAAS,QAAQ,CAAA;AAAA,IACnB,CAAA;AAGA,IAAA,WAAA,CAAY,SAAS,GAAI,CAAA;AAGzB,IAAA,OAAA;EACF;AAAA,EAEA,oBAAoB,QAAA,EAAyC;AAC3D,IAAA,IAAA,CAAK,eAAA,CAAgB,KAAK,QAAQ,CAAA;AAElC,IAAA,OAAO,MAAK;AACV,MAAA,MAAM,KAAA,GAAQ,IAAA,CAAK,eAAA,CAAgB,OAAA,CAAQ,QAAQ,CAAA;AACnD,MAAA,IAAI,QAAQ,EAAA,EAAI;AACd,QAAA,IAAA,CAAK,eAAA,CAAgB,MAAA,CAAO,KAAA,EAAO,CAAC,CAAA;AAAA,MACtC;AAAA,IACF,CAAA;AAAA,EACF;AAAA,EAEA,eAAA,CACE,SACA,QAAA,EAAsC;AAEtC,IAAA,IAAI,CAAC,IAAA,CAAK,gBAAA,CAAiB,GAAA,CAAI,OAAO,CAAA,EAAG;AACvC,MAAA,IAAA,CAAK,gBAAA,CAAiB,GAAA,CAAI,OAAA,EAAS,EAAE,CAAA;AAAA,IACvC;AAEA,IAAA,MAAM,SAAA,GAAY,IAAA,CAAK,gBAAA,CAAiB,GAAA,CAAI,OAAO,CAAA;AACnD,IAAA,SAAA,EAAW,KAAK,QAAQ,CAAA;AAExB,IAAA,OAAO,MAAK;AACV,MAAA,MAAMA,UAAAA,GAAY,IAAA,CAAK,gBAAA,CAAiB,GAAA,CAAI,OAAO,CAAA;AACnD,MAAA,IAAIA,UAAAA,EAAW;AACb,QAAA,MAAM,KAAA,GAAQA,UAAAA,CAAU,OAAA,CAAQ,QAAQ,CAAA;AACxC,QAAA,IAAI,QAAQ,EAAA,EAAI;AACd,UAAAA,UAAAA,CAAU,MAAA,CAAO,KAAA,EAAO,CAAC,CAAA;AAAA,QAC3B;AAAA,MACF;AAAA,IACF,CAAA;AAAA,EACF;AAAA;AAAA,EAGQ,iBAAA,GAAiB;AACvB,IAAA,OAAO;AAAA,MACL,WAAA,EAAa,KAAK,SAAA,EAAS;AAAA,MAC3B,QAAA,EAAU,KAAK,cAAA,EAAc;AAAA,MAC7B,OAAA,EAAS,KAAK,aAAA,EAAa;AAAA,MAC3B,MAAA,EAAQ,KAAK,YAAA,EAAY;AAAA,MACzB,QAAA,EAAU,KAAK,cAAA,EAAc;AAAA,MAC7B,WAAA,EAAa,KAAK,qBAAA,EAAqB;AAAA,MACvC,MAAA,EAAQ,KAAK,gBAAA,EAAgB;AAAA,MAC7B,QAAA,EAAU,KAAK,cAAA;AAAc;EAEjC;AAAA,EAEQ,SAAA,GAAS;AACf,IAAA,IAAI;AAEF,MAAA,IAAI,OAAO,OAAA,KAAY,WAAA,IAAe,OAAA,CAAQ,GAAA,EAAK;AACjD,QAAA,MAAM,OAAA,GAAU,QAAQ,GAAA,CAAI,QAAA;AAC5B,QAAA,IAAI,OAAA,KAAY,YAAA;AAAc,UAAA,OAAO,YAAA;AACrC,QAAA,IAAI,OAAA,KAAY,MAAA;AAAQ,UAAA,OAAO,MAAA;AAAA,MACjC;AAGA,MAAA,IACE,OAAO,UAAA,KAAe,WAAA,IACrB,UAAA,CAAwC,eAAe,KAAA,CAAA,EACxD;AACA,QAAA,OAAO,MAAA;AAAA,MACT;AAEA,MAAA,IACE,OAAO,MAAA,KAAW,WAAA,IACjB,MAAA,CAAmC,cAAc,KAAA,CAAA,EAClD;AACA,QAAA,OAAO,MAAA;AAAA,MACT;AAEA,MAAA,OAAO,aAAA;AAAA,IACT,CAAA,CAAA,MAAQ;AACN,MAAA,OAAO,aAAA;AAAA,IACT;AAAA,EACF;AAAA,EAEQ,cAAA,GAAc;AACpB,IAAA,IAAI,OAAO,WAAW,WAAA,EAAa;AAGjC,MAAA,MAAM,CAAA,GAAI,MAAA;AACV,MAAA,MAAM,UAAA,GAAa,SAAA;AACnB,MAAA,IAAI,CAAA,CAAE,OAAA,IAAW,CAAA,CAAE,UAAU,GAAG,IAAA,EAAM;AACpC,QAAA,OAAO,UAAA;AAAA,MACT;AAGA,MAAA,IAAI,OAAQ,UAAA,CAA2C,aAAA,KAAkB,UAAA,EAAY;AACnF,QAAA,OAAO,WAAA;AAAA,MACT;AAEA,MAAA,OAAO,SAAA;AAAA,IACT;AAEA,IAAA,IAAI;AAEF,MAAA,IAAI,OAAO,OAAA,KAAY,WAAA,IAAe,OAAA,CAAQ,UAAU,IAAA,EAAM;AAC5D,QAAA,OAAO,MAAA;AAAA,MACT;AAEA,MAAA,OAAO,SAAA;AAAA,IACT,CAAA,CAAA,MAAQ;AACN,MAAA,OAAO,SAAA;AAAA,IACT;AAAA,EACF;AAAA,EAEQ,aAAA,GAAa;AAKnB,IAAA,IAAI,OAAO,cAAc,WAAA,EAAa;AACpC,MAAA,OAAO,EAAE,IAAA,EAAM,SAAA,EAAW,OAAA,EAAS,EAAA,EAAI,WAAW,EAAA;IACpD;AAEA,IAAA,MAAM,YAAY,SAAA,CAAU,SAAA;AAC5B,IAAA,IAAI,IAAA,GAAgB,SAAA;AACpB,IAAA,IAAI,OAAA,GAAU,EAAA;AAGd,IAAA,IAAI,SAAA,CAAU,SAAS,QAAQ,CAAA,IAAK,CAAC,SAAA,CAAU,QAAA,CAAS,KAAK,CAAA,EAAG;AAC9D,MAAA,IAAA,GAAO,QAAA;AACP,MAAA,MAAM,KAAA,GAAQ,SAAA,CAAU,KAAA,CAAM,eAAe,CAAA;AAC7C,MAAA,OAAA,GAAU,KAAA,GAAQ,KAAA,CAAM,CAAC,CAAA,GAAI,EAAA;AAAA,IAC/B,CAAA,MAAA,IAES,SAAA,CAAU,QAAA,CAAS,KAAK,CAAA,EAAG;AAClC,MAAA,IAAA,GAAO,MAAA;AACP,MAAA,MAAM,KAAA,GAAQ,SAAA,CAAU,KAAA,CAAM,YAAY,CAAA;AAC1C,MAAA,OAAA,GAAU,KAAA,GAAQ,KAAA,CAAM,CAAC,CAAA,GAAI,EAAA;AAAA,IAC/B,CAAA,MAAA,IAES,SAAA,CAAU,QAAA,CAAS,SAAS,CAAA,EAAG;AACtC,MAAA,IAAA,GAAO,SAAA;AACP,MAAA,MAAM,KAAA,GAAQ,SAAA,CAAU,KAAA,CAAM,gBAAgB,CAAA;AAC9C,MAAA,OAAA,GAAU,KAAA,GAAQ,KAAA,CAAM,CAAC,CAAA,GAAI,EAAA;AAAA,IAC/B,CAAA,MAAA,IAES,UAAU,QAAA,CAAS,QAAQ,KAAK,CAAC,SAAA,CAAU,QAAA,CAAS,QAAQ,CAAA,EAAG;AACtE,MAAA,IAAA,GAAO,QAAA;AACP,MAAA,MAAM,KAAA,GAAQ,SAAA,CAAU,KAAA,CAAM,gBAAgB,CAAA;AAC9C,MAAA,OAAA,GAAU,KAAA,GAAQ,KAAA,CAAM,CAAC,CAAA,GAAI,EAAA;AAAA,IAC/B,CAAA,MAAA,IAES,UAAU,QAAA,CAAS,MAAM,KAAK,SAAA,CAAU,QAAA,CAAS,SAAS,CAAA,EAAG;AACpE,MAAA,IAAA,GAAO,IAAA;AACP,MAAA,MAAM,KAAA,GAAQ,SAAA,CAAU,KAAA,CAAM,oBAAoB,CAAA;AAClD,MAAA,OAAA,GAAU,KAAA,GAAQ,KAAA,CAAM,CAAC,CAAA,GAAI,EAAA;AAAA,IAC/B,CAAA,MAAA,IAES,UAAU,QAAA,CAAS,OAAO,KAAK,SAAA,CAAU,QAAA,CAAS,KAAK,CAAA,EAAG;AACjE,MAAA,IAAA,GAAO,OAAA;AACP,MAAA,MAAM,KAAA,GAAQ,SAAA,CAAU,KAAA,CAAM,sBAAsB,CAAA;AACpD,MAAA,OAAA,GAAU,KAAA,GAAQ,KAAA,CAAM,CAAC,CAAA,GAAI,EAAA;AAAA,IAC/B;AAEA,IAAA,OAAO,EAAE,IAAA,EAAM,OAAA,EAAS,SAAA;EAC1B;AAAA,EAEQ,YAAA,GAAY;AAClB,IAAA,IAAI,OAAO,cAAc,WAAA,EAAa;AACpC,MAAA,OAAO;AAAA,QACL,IAAA,EAAM,SAAA;AAAA,QACN,QAAA,EAAU,KAAA;AAAA,QACV,QAAA,EAAU,KAAA;AAAA,QACV,SAAA,EAAW,KAAA;AAAA,QACX,aAAA,EAAe;AAAA;IAEnB;AAEA,IAAA,MAAM,YAAY,SAAA,CAAU,SAAA;AAC5B,IAAA,MAAM,QAAA,GACJ,0DAAA,CAA2D,IAAA,CAAK,SAAS,CAAA;AAC3E,IAAA,MAAM,QAAA,GAAW,kCAAA,CAAmC,IAAA,CAAK,SAAS,CAAA;AAClE,IAAA,MAAM,aAAA,GACJ,cAAA,IAAkB,MAAA,IAAU,SAAA,CAAU,cAAA,GAAiB,CAAA;AAEzD,IAAA,IAAI,IAAA,GAAmB,SAAA;AACvB,IAAA,IAAI,QAAA,EAAU;AACZ,MAAA,IAAA,GAAO,QAAA;AAAA,IACT,WAAW,QAAA,EAAU;AACnB,MAAA,IAAA,GAAO,QAAA;AAAA,IACT;AAEA,IAAA,OAAO;AAAA,MACL,IAAA;AAAA,MACA,QAAA;AAAA,MACA,QAAA;AAAA,MACA,WAAW,IAAA,KAAS,SAAA;AAAA,MACpB;AAAA;EAEJ;AAAA,EAEQ,cAAA,GAAc;AACpB,IAAA,MAAM,SAAA,GAAY,OAAO,MAAA,KAAW,WAAA;AACpC,IAAA,MAAM,YAAA,GAAe,OAAO,SAAA,KAAc,WAAA;AAE1C,IAAA,OAAO;AAAA;AAAA,MAEL,eAAA,EAAiB,aAAa,cAAA,IAAkB,MAAA;AAAA,MAChD,iBAAA,EAAmB,aAAa,gBAAA,IAAoB,MAAA;AAAA,MACpD,YAAA,EAAc,aAAa,WAAA,IAAe,MAAA;AAAA;AAAA,MAG1C,aAAA,EAAe,aAAa,QAAA,IAAY,MAAA;AAAA,MACxC,iBAAA,EAAmB,gBAAgB,eAAA,IAAmB,SAAA;AAAA;AAAA,MAGtD,QAAA,EAAU,SAAA,IAAa,IAAA,CAAK,UAAA,EAAU;AAAA,MACtC,SAAA,EAAW,SAAA,IAAa,IAAA,CAAK,WAAA,EAAW;AAAA,MACxC,cAAA,EAAgB,OAAO,WAAA,KAAgB,WAAA;AAAA;AAAA,MAGvC,kBAAA,EAAoB,gBAAgB,QAAA,IAAY,SAAA;AAAA,MAChD,qBAAA,EAAuB,gBAAgB,YAAA,IAAgB,SAAA;AAAA;AAAA,MAGvD,iBAAA,EAAmB,aAAa,aAAA,IAAiB,MAAA;AAAA,MACjD,uBAAA,EAAyB,aAAa,sBAAA,IAA0B,MAAA;AAAA,MAChE,mBAAA,EAAqB,aAAa,kBAAA,IAAsB,MAAA;AAAA,MACxD,iBAAA,EAAmB,aAAa,gBAAA,IAAoB,MAAA;AAAA;AAAA,MAGpD,eAAA,EAAiB,gBAAgB,cAAA,IAAkB,SAAA;AAAA,MACnD,eAAA,EAAiB,gBAAgB,cAAA,IAAkB,SAAA;AAAA;AAAA,MAGnD,eAAA,EAAiB,gBAAgB,WAAA,IAAe,SAAA;AAAA,MAChD,kBAAA,EAAoB,aAAa,cAAA,IAAkB,MAAA;AAAA,MACnD,iBAAA,EAAmB,gBAAgB,aAAA,IAAiB;AAAA;EAExD;AAAA,EAEQ,qBAAA,GAAqB;AAC3B,IAAA,MAAM,OAAuC,EAAA;AAG7C,IAAA,IAAI,OAAO,WAAA,KAAgB,WAAA,IAAe,QAAA,IAAY,WAAA,EAAa;AACjE,MAAA,MAAM,SAAU,WAAA,CAAwH,MAAA;AACxI,MAAA,IAAI,CAAC,MAAA;AAAQ,QAAA,OAAO,IAAA;AACpB,MAAA,IAAA,CAAK,MAAA,GAAS;AAAA,QACZ,MAAM,MAAA,CAAO,cAAA;AAAA,QACb,OAAO,MAAA,CAAO,eAAA;AAAA,QACd,OAAO,MAAA,CAAO;AAAA;IAElB;AAGA,IAAA,IAAI,OAAO,SAAA,KAAc,WAAA,IAAe,YAAA,IAAgB,SAAA,EAAW;AACjE,MAAA,MAAM,aAAc,SAAA,CAA2H,UAAA;AAC/I,MAAA,IAAI,CAAC,UAAA;AAAY,QAAA,OAAO,IAAA;AACxB,MAAA,IAAA,CAAK,UAAA,GAAa;AAAA,QAChB,aAAA,EAAe,WAAW,aAAA,IAAiB,SAAA;AAAA,QAC3C,QAAA,EAAU,WAAW,QAAA,IAAY,CAAA;AAAA,QACjC,GAAA,EAAK,WAAW,GAAA,IAAO,CAAA;AAAA,QACvB,QAAA,EAAU,WAAW,QAAA,IAAY;AAAA;IAErC;AAEA,IAAA,OAAO,IAAA;AAAA,EACT;AAAA,EAEQ,gBAAA,GAAgB;AACtB,IAAA,IAAI,OAAO,WAAW,WAAA,EAAa;AACjC,MAAA,OAAO;AAAA,QACL,KAAA,EAAO,CAAA;AAAA,QACP,MAAA,EAAQ,CAAA;AAAA,QACR,UAAA,EAAY,CAAA;AAAA,QACZ,WAAA,EAAa,CAAA;AAAA,QACb,UAAA,EAAY,CAAA;AAAA,QACZ,UAAA,EAAY;AAAA;IAEhB;AAEA,IAAA,OAAO;AAAA,MACL,OAAO,MAAA,CAAO,KAAA;AAAA,MACd,QAAQ,MAAA,CAAO,MAAA;AAAA,MACf,YAAY,MAAA,CAAO,UAAA;AAAA,MACnB,aAAa,MAAA,CAAO,WAAA;AAAA,MACpB,YAAY,MAAA,CAAO,UAAA;AAAA,MACnB,UAAA,EAAY,OAAO,MAAA,KAAW,WAAA,GAAc,OAAO,gBAAA,GAAmB,CAAA;AAAA,MACtE,aACE,OAAO,MAAA,CAAO,gBAAgB,WAAA,GAC1B,MAAA,CAAO,YAAY,IAAA,GACnB;AAAA;EAEV;AAAA,EAEQ,cAAA,GAAc;AACpB,IAAA,MAAM,GAAA,uBAAU,IAAA;AAChB,IAAA,MAAM,UAAU,IAAI,IAAA,CAAK,IAAI,WAAA,EAAW,EAAI,GAAG,CAAC,CAAA;AAChD,IAAA,MAAM,OAAO,IAAI,IAAA,CAAK,IAAI,WAAA,EAAW,EAAI,GAAG,CAAC,CAAA;AAC7C,IAAA,MAAM,MAAA,GAAS,CAAC,GAAA,CAAI,iBAAA;AACpB,IAAA,MAAM,GAAA,GACJ,WAAW,CAAC,OAAA,CAAQ,mBAAiB,IACrC,MAAA,KAAW,CAAC,IAAA,CAAK,iBAAA;AAEnB,IAAA,OAAO;AAAA,MACL,IAAA,EAAM,IAAA,CAAK,cAAA,GAAiB,iBAAe,CAAG,QAAA;AAAA,MAC9C,MAAA;AAAA,MACA;AAAA;EAEJ;AAAA,EAEQ,UAAA,GAAU;AAChB,IAAA,IAAI;AACF,MAAA,IAAI,OAAO,QAAA,KAAa,WAAA;AAAa,QAAA,OAAO,KAAA;AAC5C,MAAA,MAAM,MAAA,GAAS,QAAA,CAAS,aAAA,CAAc,QAAQ,CAAA;AAC9C,MAAA,OAAO,CAAC,EACN,MAAA,CAAO,UAAA,CAAW,OAAO,CAAA,IAAK,MAAA,CAAO,WAAW,oBAAoB,CAAA,CAAA;AAAA,IAExE,CAAA,CAAA,MAAQ;AACN,MAAA,OAAO,KAAA;AAAA,IACT;AAAA,EACF;AAAA,EAEQ,WAAA,GAAW;AACjB,IAAA,IAAI;AACF,MAAA,IAAI,OAAO,QAAA,KAAa,WAAA;AAAa,QAAA,OAAO,KAAA;AAC5C,MAAA,MAAM,MAAA,GAAS,QAAA,CAAS,aAAA,CAAc,QAAQ,CAAA;AAC9C,MAAA,OAAO,CAAC,CAAC,MAAA,CAAO,UAAA,CAAW,QAAQ,CAAA;AAAA,IACrC,CAAA,CAAA,MAAQ;AACN,MAAA,OAAO,KAAA;AAAA,IACT;AAAA,EACF;AAAA,EAEQ,uBAAA,GAAuB;AAC7B,IAAA,OAAO;AAAA,MACL,SAAA,EAAW;AAAA,QACT,OAAA,EAAS,QAAA;AAAA,QACT,SAAA,EAAW,KAAA;AAAA,QACX,UAAA,EAAY;AAAA,OACb;AAAA,MACD,aAAA,EAAe;AAAA,QACb,iBAAA,EAAmB,KAAA;AAAA,QACnB,mBAAA,EAAqB,KAAA;AAAA,QACrB,uBAAA,EAAyB,KAAA;AAAA,QACzB,aAAA,EAAe,IAAA;AAAA,QACf,qBAAA,EAAuB;AAAA,OACxB;AAAA,MACD,aAAA,EAAe;AAAA,QACb,eAAA,EAAiB,KAAA;AAAA,QACjB,iBAAA,EAAmB,CAAC,QAAA,EAAU,SAAA,EAAW,UAAU,MAAM,CAAA;AAAA,QACzD,eAAA,EAAiB;AAAA,UACf,MAAA,EAAQ,IAAA;AAAA,UACR,OAAA,EAAS,IAAA;AAAA,UACT,MAAA,EAAQ,IAAA;AAAA,UACR,IAAA,EAAM;AAAA;AACP;AACF;EAEL;AAAA,EAEQ,yBAAA,GAAyB;AAC/B,IAAA,IAAI,OAAO,MAAA,KAAW,WAAA;AAAa,MAAA;AAGnC,IAAA,MAAA,CAAO,gBAAA,CAAiB,QAAA,EAAU,MAAM,IAAA,CAAK,yBAAyB,CAAA;AACtE,IAAA,MAAA,CAAO,gBAAA,CAAiB,SAAA,EAAW,MAAM,IAAA,CAAK,yBAAyB,CAAA;AAGvE,IAAA,IAAI,OAAO,WAAA,EAAa;AACtB,MAAA,MAAA,CAAO,YAAY,gBAAA,CAAiB,QAAA,EAAU,MAC5C,IAAA,CAAK,yBAAyB,CAAA;AAAA,IAElC;AAGA,IAAA,MAAA,CAAO,gBAAA,CAAiB,QAAA,EAAU,MAAM,IAAA,CAAK,yBAAyB,CAAA;AAAA,EACxE;AAAA,EAEQ,uBAAA,GAAuB;AAC7B,IAAA,MAAM,OAAA,GAAU,KAAK,iBAAA;AACrB,IAAA,MAAM,UAAA,GACJ,KAAK,SAAA,CAAU,OAAO,MAAM,IAAA,CAAK,SAAA,CAAU,KAAK,eAAe,CAAA;AAEjE,IAAA,IAAI,UAAA,EAAY;AACd,MAAA,IAAA,CAAK,eAAA,GAAkB,OAAA;AACvB,MAAA,IAAA,CAAK,eAAA,CAAgB,QAAQ,CAAA,QAAA,KAAW;AACtC,QAAA,IAAI;AACF,UAAA,QAAA,CAAS,OAAO,CAAA;AAAA,QAClB,SAAS,KAAA,EAAO;AACd,UAAA,IAAA,CAAK,MAAA,EAAQ,KAAA,CAAM,sCAAA,EAAwC,KAAK,CAAA;AAAA,QAClE;AAAA,MACF,CAAC,CAAA;AAAA,IACH;AAAA,EACF;AAAA,EAEQ,mBAAA,CAAoB,SAAiB,QAAA,EAAgB;AAC3D,IAAA,MAAM,eAAe,OAAA,CAAQ,KAAA,CAAM,GAAG,CAAA,CAAE,IAAI,MAAM,CAAA;AAClD,IAAA,MAAM,gBAAgB,QAAA,CAAS,KAAA,CAAM,GAAG,CAAA,CAAE,IAAI,MAAM,CAAA;AAEpD,IAAA,KAAA,IACM,CAAA,GAAI,CAAA,EACR,CAAA,GAAI,IAAA,CAAK,GAAA,CAAI,aAAa,MAAA,EAAQ,aAAA,CAAc,MAAM,CAAA,EACtD,CAAA,EAAA,EACA;AACA,MAAA,MAAM,WAAA,GAAc,YAAA,CAAa,CAAC,CAAA,IAAK,CAAA;AACvC,MAAA,MAAM,YAAA,GAAe,aAAA,CAAc,CAAC,CAAA,IAAK,CAAA;AAEzC,MAAA,IAAI,WAAA,GAAc,YAAA;AAAc,QAAA,OAAO,IAAA;AACvC,MAAA,IAAI,WAAA,GAAc,YAAA;AAAc,QAAA,OAAO,KAAA;AAAA,IACzC;AAEA,IAAA,OAAO,IAAA;AAAA,EACT;AACD;AAGK,SAAU,yBAAyB,MAAA,EAAe;AACtD,EAAA,OAAO,IAAI,uBAAuB,MAAM,CAAA;AAC1C;AAGA,IAAI,wBAAA;SAEY,2BAAA,GAA2B;AACzC,EAAA,IAAI,CAAC,wBAAA,EAA0B;AAC7B,IAAA,wBAAA,GAA2B,wBAAA,EAAwB;AAAA,EACrD;AACA,EAAA,OAAO,wBAAA;AACT;AAEM,SAAU,4BAA4B,OAAA,EAA2B;AACrE,EAAA,wBAAA,GAA2B,OAAA;AAC7B;;;;;;;"}