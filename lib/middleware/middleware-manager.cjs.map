{"version":3,"file":"middleware-manager.cjs","sources":["../../src/middleware/middleware-manager.ts"],"sourcesContent":["import type {\n  Logger,\n  Middleware,\n  MiddlewareContext,\n  MiddlewareManager,\n  MiddlewareNext,\n} from '../types'\n\nexport class MiddlewareManagerImpl implements MiddlewareManager {\n  private middleware: Middleware[] = []\n\n  // 内存优化：限制中间件数量\n  private readonly MAX_MIDDLEWARE = 50\n  private logger?: Logger\n  \n  // 性能优化：缓存中间件映射\n  private middlewareMap = new Map<string, Middleware>()\n  private needsSort = false\n\n  constructor(logger?: Logger) {\n    this.logger = logger\n  }\n\n  use(middleware: Middleware): void {\n    // 使用 Map 快速查找\n    const existing = this.middlewareMap.get(middleware.name)\n    \n    if (existing) {\n      // 替换现有中间件\n      const index = this.middleware.indexOf(existing)\n      if (index > -1) {\n        this.middleware[index] = middleware\n        this.middlewareMap.set(middleware.name, middleware)\n      }\n    } else {\n      // 检查中间件数量限制\n      if (this.middleware.length >= this.MAX_MIDDLEWARE) {\n        this.logger?.warn(`Maximum middleware limit (${this.MAX_MIDDLEWARE}) reached, removing lowest priority`)\n        // 移除优先级最低的中间件\n        let lowestPriority = -Infinity\n        let lowestMiddleware: Middleware | null = null\n        \n        for (const m of this.middleware) {\n          const priority = m.priority ?? 100\n          if (priority > lowestPriority) {\n            lowestPriority = priority\n            lowestMiddleware = m\n          }\n        }\n        \n        if (lowestMiddleware) {\n          this.remove(lowestMiddleware.name)\n        }\n      }\n\n      // 添加新中间件\n      this.middleware.push(middleware)\n      this.middlewareMap.set(middleware.name, middleware)\n    }\n\n    // 标记需要排序，延迟到执行时进行\n    this.needsSort = true\n  }\n\n  remove(name: string): void {\n    const middleware = this.middlewareMap.get(name)\n    if (middleware) {\n      const index = this.middleware.indexOf(middleware)\n      if (index > -1) {\n        this.middleware.splice(index, 1)\n      }\n      this.middlewareMap.delete(name)\n    }\n  }\n  \n  /**\n   * 确保中间件已排序 - 懒排序优化\n   */\n  private ensureSorted(): void {\n    if (this.needsSort) {\n      this.middleware.sort((a, b) => {\n        const priorityA = a.priority ?? 100\n        const priorityB = b.priority ?? 100\n        return priorityA - priorityB\n      })\n      this.needsSort = false\n    }\n  }\n\n  async execute(context: MiddlewareContext): Promise<void>\n  async execute(name: string, context: MiddlewareContext): Promise<unknown>\n  async execute(contextOrName: MiddlewareContext | string, context?: MiddlewareContext): Promise<void | unknown> {\n    // 重载处理\n    if (typeof contextOrName === 'string') {\n      // 执行特定名称的中间件 - 使用 Map 优化查找\n      const name = contextOrName\n      if (!context) {\n        throw new Error('Context is required when executing middleware by name')\n      }\n      const ctx = context\n      const middleware = this.middlewareMap.get(name)\n\n      if (!middleware) {\n        throw new Error(`Middleware \"${name}\" not found`)\n      }\n\n      const result = { processed: false }\n      const next: MiddlewareNext = async () => {\n        result.processed = true\n      }\n\n      await middleware.handler(ctx, next)\n      return result\n    } else {\n      // 执行所有中间件\n      this.ensureSorted() // 确保已排序\n      \n      const ctx = contextOrName\n      let index = 0\n      const middlewareList = this.middleware\n\n      const next: MiddlewareNext = async () => {\n        if (index >= middlewareList.length) {\n          return\n        }\n\n        const middleware = middlewareList[index++]\n        try {\n          await middleware.handler(ctx, next)\n        } catch (error) {\n          // 将错误添加到上下文中\n          ctx.error = error as Error\n          throw error\n        }\n      }\n\n      await next()\n    }\n  }\n\n  // 获取所有中间件\n  getAll(): Middleware[] {\n    return [...this.middleware]\n  }\n\n  // 获取指定名称的中间件 - 使用 Map 优化\n  get(name: string): Middleware | undefined {\n    return this.middlewareMap.get(name)\n  }\n\n  // 检查中间件是否存在 - 使用 Map 优化\n  has(name: string): boolean {\n    return this.middlewareMap.has(name)\n  }\n\n  // 清空所有中间件\n  clear(): void {\n    this.middleware.length = 0\n    this.middlewareMap.clear()\n    this.needsSort = false\n  }\n\n  // 获取中间件数量\n  size(): number {\n    return this.middleware.length\n  }\n\n  // 获取中间件执行顺序\n  getExecutionOrder(): string[] {\n    return this.middleware.map(m => m.name)\n  }\n\n  // 销毁方法\n  destroy(): void {\n    this.clear()\n    this.logger = undefined\n  }\n  \n  // 获取性能统计\n  getStats(): {\n    total: number\n    byPriority: Record<number, number>\n  } {\n    const stats: Record<number, number> = {}\n    \n    for (const middleware of this.middleware) {\n      const priority = middleware.priority ?? 100\n      stats[priority] = (stats[priority] || 0) + 1\n    }\n    \n    return {\n      total: this.middleware.length,\n      byPriority: stats\n    }\n  }\n}\n\nexport function createMiddlewareManager(logger?: Logger): MiddlewareManager {\n  return new MiddlewareManagerImpl(logger)\n}\n\n// 预定义的中间件创建器\nexport function createRequestMiddleware(\n  name: string,\n  handler: (\n    context: MiddlewareContext,\n    next: MiddlewareNext\n  ) => Promise<void> | void,\n  priority = 50\n): Middleware {\n  return {\n    name,\n    handler,\n    priority,\n  }\n}\n\nexport function createResponseMiddleware(\n  name: string,\n  handler: (\n    context: MiddlewareContext,\n    next: MiddlewareNext\n  ) => Promise<void> | void,\n  priority = 50\n): Middleware {\n  return {\n    name,\n    handler,\n    priority,\n  }\n}\n\nexport function createErrorMiddleware(\n  name: string,\n  handler: (\n    context: MiddlewareContext,\n    next: MiddlewareNext\n  ) => Promise<void> | void,\n  priority = 90\n): Middleware {\n  return {\n    name,\n    handler,\n    priority,\n  }\n}\n\n// 常用中间件示例\nexport const commonMiddleware = {\n  // 日志中间件\n  logger: (logger: { info: (msg: string, data?: unknown) => void; warn: (msg: string, data?: unknown) => void; debug: (msg: string, data?: unknown) => void }) =>\n    createRequestMiddleware(\n      'logger',\n      async (context, next) => {\n        const start = Date.now()\n        logger.info('Middleware execution started', { context })\n\n        await next()\n\n        const duration = Date.now() - start\n        logger.info('Middleware execution completed', { duration, context })\n      },\n      10\n    ),\n\n  // 错误处理中间件\n  errorHandler: (errorManager: { captureError: (error: Error) => void }) =>\n    createErrorMiddleware(\n      'errorHandler',\n      async (context, next) => {\n        try {\n          await next()\n        } catch (error) {\n          errorManager.captureError(error as Error)\n          context.error = error as Error\n          // 不重新抛出错误，让后续中间件处理\n        }\n      },\n      100\n    ),\n\n  // 性能监控中间件\n  performance: (logger: { warn: (msg: string, data?: unknown) => void }) =>\n    createRequestMiddleware(\n      'performance',\n      async (context, next) => {\n        const start = performance.now()\n\n        await next()\n\n        const duration = performance.now() - start\n        if (duration > 100) {\n          // 超过100ms记录警告\n          logger.warn('Slow middleware execution detected', {\n            duration,\n            context,\n          })\n        }\n      },\n      20\n    ),\n\n  // 安全中间件\n  security: (logger: { debug: (msg: string, data?: unknown) => void }) =>\n    createRequestMiddleware(\n      'security',\n      async (context, next) => {\n        logger.debug('Security middleware executed', { context })\n        await next()\n      },\n      30\n    ),\n}\n"],"names":[],"mappings":"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"}