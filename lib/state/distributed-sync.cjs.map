{"version":3,"file":"distributed-sync.cjs","sources":["../../src/state/distributed-sync.ts"],"sourcesContent":["/**\r\n * Distributed State Synchronization System\r\n * \r\n * 分布式状态同步系统，支持：\r\n * - 多标签页/窗口同步 (BroadcastChannel)\r\n * - WebSocket 实时同步\r\n * - WebRTC P2P 同步\r\n * - 冲突解决策略\r\n * - 离线支持和重连机制\r\n */\r\n\r\nimport type { Logger } from '../types'\r\nimport { computed, type ComputedRef, onUnmounted, reactive, ref, type Ref } from 'vue'\r\n\r\n// 同步策略\r\nexport type SyncStrategy = 'last-write-wins' | 'first-write-wins' | 'merge' | 'custom'\r\n\r\n// 同步传输类型\r\nexport type TransportType = 'broadcast' | 'websocket' | 'webrtc' | 'shared-worker'\r\n\r\n// 同步消息\r\nexport interface SyncMessage {\r\n  id: string\r\n  type: 'state' | 'patch' | 'sync' | 'ack' | 'heartbeat'\r\n  source: string\r\n  timestamp: number\r\n  data: any\r\n  version?: number\r\n  checksum?: string\r\n}\r\n\r\n// 同步配置\r\nexport interface SyncConfig {\r\n  id?: string\r\n  transports?: TransportType[]\r\n  strategy?: SyncStrategy\r\n  heartbeatInterval?: number\r\n  reconnectDelay?: number\r\n  maxReconnectAttempts?: number\r\n  conflictResolver?: (local: any, remote: any) => any\r\n  compress?: boolean\r\n  encrypt?: boolean\r\n  encryptionKey?: string\r\n  websocketUrl?: string\r\n  signalingServer?: string\r\n  iceServers?: RTCIceServer[]\r\n  roomId?: string\r\n}\r\n\r\n// 同步状态\r\nexport interface SyncStatus {\r\n  connected: boolean\r\n  syncing: boolean\r\n  lastSync: number\r\n  peers: number\r\n  errors: number\r\n  latency: number\r\n}\r\n\r\n/**\r\n * 抽象传输层\r\n */\r\nabstract class Transport {\r\n  protected listeners = new Set<(message: SyncMessage) => void>()\r\n  protected connected = false\r\n  \r\n  abstract connect(): Promise<void>\r\n  abstract disconnect(): Promise<void>\r\n  abstract send(message: SyncMessage): Promise<void>\r\n  \r\n  onMessage(listener: (message: SyncMessage) => void): () => void {\r\n    this.listeners.add(listener)\r\n    return () => this.listeners.delete(listener)\r\n  }\r\n  \r\n  protected emit(message: SyncMessage): void {\r\n    this.listeners.forEach(listener => listener(message))\r\n  }\r\n  \r\n  isConnected(): boolean {\r\n    return this.connected\r\n  }\r\n}\r\n\r\n/**\r\n * BroadcastChannel 传输（多标签页同步）\r\n */\r\nclass BroadcastTransport extends Transport {\r\n  private channel?: BroadcastChannel\r\n  \r\n  constructor(\r\n    private channelName: string,\r\n    private logger?: Logger\r\n  ) {\r\n    super()\r\n  }\r\n  \r\n  async connect(): Promise<void> {\r\n    if (typeof BroadcastChannel === 'undefined') {\r\n      this.logger?.warn('BroadcastChannel not supported')\r\n      return\r\n    }\r\n    \r\n    this.channel = new BroadcastChannel(this.channelName)\r\n    \r\n    this.channel.onmessage = (event) => {\r\n      this.emit(event.data)\r\n    }\r\n    \r\n    this.channel.onmessageerror = (event) => {\r\n      this.logger?.error('BroadcastChannel message error', event)\r\n    }\r\n    \r\n    this.connected = true\r\n    this.logger?.debug('BroadcastChannel connected')\r\n  }\r\n  \r\n  async disconnect(): Promise<void> {\r\n    if (this.channel) {\r\n      this.channel.close()\r\n      this.channel = undefined\r\n    }\r\n    this.connected = false\r\n  }\r\n  \r\n  async send(message: SyncMessage): Promise<void> {\r\n    if (!this.channel) {\r\n      throw new Error('BroadcastChannel not connected')\r\n    }\r\n    \r\n    this.channel.postMessage(message)\r\n  }\r\n}\r\n\r\n/**\r\n * WebSocket 传输\r\n */\r\nclass WebSocketTransport extends Transport {\r\n  private ws?: WebSocket\r\n  private reconnectAttempts = 0\r\n  private reconnectTimer?: NodeJS.Timeout\r\n  private pingInterval?: NodeJS.Timeout\r\n  \r\n  constructor(\r\n    private url: string,\r\n    private config: {\r\n      reconnectDelay?: number\r\n      maxReconnectAttempts?: number\r\n      heartbeatInterval?: number\r\n    } = {},\r\n    private logger?: Logger\r\n  ) {\r\n    super()\r\n  }\r\n  \r\n  async connect(): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        this.ws = new WebSocket(this.url)\r\n        \r\n        this.ws.onopen = () => {\r\n          this.connected = true\r\n          this.reconnectAttempts = 0\r\n          this.startHeartbeat()\r\n          this.logger?.debug('WebSocket connected')\r\n          resolve()\r\n        }\r\n        \r\n        this.ws.onmessage = (event) => {\r\n          try {\r\n            const message = JSON.parse(event.data)\r\n            this.emit(message)\r\n          } catch (error) {\r\n            this.logger?.error('Failed to parse WebSocket message', error)\r\n          }\r\n        }\r\n        \r\n        this.ws.onerror = (error) => {\r\n          this.logger?.error('WebSocket error', error)\r\n          reject(error)\r\n        }\r\n        \r\n        this.ws.onclose = () => {\r\n          this.connected = false\r\n          this.stopHeartbeat()\r\n          this.attemptReconnect()\r\n        }\r\n      } catch (error) {\r\n        reject(error)\r\n      }\r\n    })\r\n  }\r\n  \r\n  async disconnect(): Promise<void> {\r\n    this.stopHeartbeat()\r\n    \r\n    if (this.reconnectTimer) {\r\n      clearTimeout(this.reconnectTimer)\r\n    }\r\n    \r\n    if (this.ws) {\r\n      this.ws.close()\r\n      this.ws = undefined\r\n    }\r\n    \r\n    this.connected = false\r\n  }\r\n  \r\n  async send(message: SyncMessage): Promise<void> {\r\n    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {\r\n      throw new Error('WebSocket not connected')\r\n    }\r\n    \r\n    this.ws.send(JSON.stringify(message))\r\n  }\r\n  \r\n  private startHeartbeat(): void {\r\n    const interval = this.config.heartbeatInterval || 30000\r\n    \r\n    this.pingInterval = setInterval(() => {\r\n      if (this.connected) {\r\n        this.send({\r\n          id: `ping-${Date.now()}`,\r\n          type: 'heartbeat',\r\n          source: 'client',\r\n          timestamp: Date.now(),\r\n          data: null\r\n        }).catch(error => {\r\n          this.logger?.error('Heartbeat failed', error)\r\n        })\r\n      }\r\n    }, interval)\r\n  }\r\n  \r\n  private stopHeartbeat(): void {\r\n    if (this.pingInterval) {\r\n      clearInterval(this.pingInterval)\r\n      this.pingInterval = undefined\r\n    }\r\n  }\r\n  \r\n  private attemptReconnect(): void {\r\n    const maxAttempts = this.config.maxReconnectAttempts || 5\r\n    const delay = this.config.reconnectDelay || 1000\r\n    \r\n    if (this.reconnectAttempts >= maxAttempts) {\r\n      this.logger?.error('Max reconnection attempts reached')\r\n      return\r\n    }\r\n    \r\n    this.reconnectAttempts++\r\n    this.logger?.debug(`Attempting reconnection ${this.reconnectAttempts}/${maxAttempts}`)\r\n    \r\n    this.reconnectTimer = setTimeout(() => {\r\n      this.connect().catch(error => {\r\n        this.logger?.error('Reconnection failed', error)\r\n      })\r\n    }, delay * 2**(this.reconnectAttempts - 1)) // 指数退避\r\n  }\r\n}\r\n\r\n/**\r\n * WebRTC 传输\r\n */\r\nclass WebRTCTransport extends Transport {\r\n  private peerConnection?: RTCPeerConnection\r\n  private dataChannel?: RTCDataChannel\r\n  private signaling?: WebSocket\r\n  \r\n  constructor(\r\n    private config: {\r\n      signalingServer: string\r\n      iceServers?: RTCIceServer[]\r\n      roomId?: string\r\n    },\r\n    private logger?: Logger\r\n  ) {\r\n    super()\r\n  }\r\n  \r\n  async connect(): Promise<void> {\r\n    // 连接信令服务器\r\n    await this.connectSignaling()\r\n    \r\n    // 创建 RTCPeerConnection\r\n    this.peerConnection = new RTCPeerConnection({\r\n      iceServers: this.config.iceServers || [\r\n        { urls: 'stun:stun.l.google.com:19302' }\r\n      ]\r\n    })\r\n    \r\n    // 设置事件处理\r\n    this.setupPeerConnection()\r\n    \r\n    // 创建数据通道\r\n    this.dataChannel = this.peerConnection.createDataChannel('sync', {\r\n      ordered: true\r\n    })\r\n    \r\n    this.setupDataChannel()\r\n    \r\n    // 创建 offer\r\n    await this.createOffer()\r\n  }\r\n  \r\n  async disconnect(): Promise<void> {\r\n    if (this.dataChannel) {\r\n      this.dataChannel.close()\r\n    }\r\n    \r\n    if (this.peerConnection) {\r\n      this.peerConnection.close()\r\n    }\r\n    \r\n    if (this.signaling) {\r\n      this.signaling.close()\r\n    }\r\n    \r\n    this.connected = false\r\n  }\r\n  \r\n  async send(message: SyncMessage): Promise<void> {\r\n    if (!this.dataChannel || this.dataChannel.readyState !== 'open') {\r\n      throw new Error('WebRTC data channel not open')\r\n    }\r\n    \r\n    this.dataChannel.send(JSON.stringify(message))\r\n  }\r\n  \r\n  private async connectSignaling(): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      this.signaling = new WebSocket(this.config.signalingServer)\r\n      \r\n      this.signaling.onopen = () => {\r\n        // 加入房间\r\n        this.signaling!.send(JSON.stringify({\r\n          type: 'join',\r\n          roomId: this.config.roomId || 'default'\r\n        }))\r\n        resolve()\r\n      }\r\n      \r\n      this.signaling.onmessage = async (event) => {\r\n        const data = JSON.parse(event.data)\r\n        await this.handleSignalingMessage(data)\r\n      }\r\n      \r\n      this.signaling.onerror = reject\r\n    })\r\n  }\r\n  \r\n  private setupPeerConnection(): void {\r\n    if (!this.peerConnection) return\r\n    \r\n    this.peerConnection.onicecandidate = (event) => {\r\n      if (event.candidate && this.signaling) {\r\n        this.signaling.send(JSON.stringify({\r\n          type: 'ice',\r\n          candidate: event.candidate\r\n        }))\r\n      }\r\n    }\r\n    \r\n    this.peerConnection.ondatachannel = (event) => {\r\n      const channel = event.channel\r\n      this.setupDataChannel(channel)\r\n    }\r\n  }\r\n  \r\n  private setupDataChannel(channel?: RTCDataChannel): void {\r\n    const dc = channel || this.dataChannel\r\n    if (!dc) return\r\n    \r\n    dc.onopen = () => {\r\n      this.connected = true\r\n      this.logger?.debug('WebRTC data channel opened')\r\n    }\r\n    \r\n    dc.onmessage = (event) => {\r\n      try {\r\n        const message = JSON.parse(event.data)\r\n        this.emit(message)\r\n      } catch (error) {\r\n        this.logger?.error('Failed to parse WebRTC message', error)\r\n      }\r\n    }\r\n    \r\n    dc.onerror = (error) => {\r\n      this.logger?.error('WebRTC data channel error', error)\r\n    }\r\n    \r\n    dc.onclose = () => {\r\n      this.connected = false\r\n      this.logger?.debug('WebRTC data channel closed')\r\n    }\r\n  }\r\n  \r\n  private async createOffer(): Promise<void> {\r\n    if (!this.peerConnection || !this.signaling) return\r\n    \r\n    const offer = await this.peerConnection.createOffer()\r\n    await this.peerConnection.setLocalDescription(offer)\r\n    \r\n    this.signaling.send(JSON.stringify({\r\n      type: 'offer',\r\n      offer\r\n    }))\r\n  }\r\n  \r\n  private async handleSignalingMessage(data: any): Promise<void> {\r\n    if (!this.peerConnection) return\r\n    \r\n    switch (data.type) {\r\n      case 'offer': {\r\n        await this.peerConnection.setRemoteDescription(data.offer)\r\n        const answer = await this.peerConnection.createAnswer()\r\n        await this.peerConnection.setLocalDescription(answer)\r\n        \r\n        if (this.signaling) {\r\n          this.signaling.send(JSON.stringify({\r\n            type: 'answer',\r\n            answer\r\n          }))\r\n        }\r\n        break\r\n      }\r\n        \r\n      case 'answer':\r\n        await this.peerConnection.setRemoteDescription(data.answer)\r\n        break\r\n        \r\n      case 'ice':\r\n        await this.peerConnection.addIceCandidate(data.candidate)\r\n        break\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 分布式状态同步管理器\r\n */\r\nexport class DistributedSync {\r\n  private transports = new Map<TransportType, Transport>()\r\n  private localState = reactive<Record<string, any>>({})\r\n  private remoteState = reactive<Record<string, any>>({})\r\n  private syncStatus: Ref<SyncStatus>\r\n  private syncQueue: SyncMessage[] = []\r\n  private isSyncing = ref(false)\r\n  private version = 0\r\n  private peerId: string\r\n  private listeners = new Map<string, Set<(data: any, oldValue?: any) => void>>()\r\n  \r\n  constructor(\r\n    private config: SyncConfig = {},\r\n    private logger?: Logger\r\n  ) {\r\n    this.peerId = config.id || this.generatePeerId()\r\n    \r\n    this.syncStatus = ref({\r\n      connected: false,\r\n      syncing: false,\r\n      lastSync: 0,\r\n      peers: 0,\r\n      errors: 0,\r\n      latency: 0\r\n    })\r\n    \r\n    this.initialize()\r\n  }\r\n  \r\n  /**\r\n   * 初始化传输层\r\n   */\r\n  private async initialize(): Promise<void> {\r\n    const transports = this.config.transports || ['broadcast']\r\n    \r\n    for (const type of transports) {\r\n      try {\r\n        const transport = await this.createTransport(type)\r\n        if (transport) {\r\n          this.transports.set(type, transport)\r\n          await this.setupTransport(transport)\r\n        }\r\n      } catch (error) {\r\n        this.logger?.error(`Failed to initialize ${type} transport`, error)\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 创建传输实例\r\n   */\r\n  private async createTransport(type: TransportType): Promise<Transport | null> {\r\n    switch (type) {\r\n      case 'broadcast':\r\n        return new BroadcastTransport('ldesign-sync', this.logger)\r\n        \r\n      case 'websocket':\r\n        // 需要配置 WebSocket URL\r\n        if (!this.config.websocketUrl) {\r\n          this.logger?.warn('WebSocket URL not configured')\r\n          return null\r\n        }\r\n        return new WebSocketTransport(this.config.websocketUrl, {\r\n          reconnectDelay: this.config.reconnectDelay,\r\n          maxReconnectAttempts: this.config.maxReconnectAttempts,\r\n          heartbeatInterval: this.config.heartbeatInterval\r\n        }, this.logger)\r\n        \r\n      case 'webrtc':\r\n        // 需要配置信令服务器\r\n        if (!this.config.signalingServer) {\r\n          this.logger?.warn('Signaling server not configured')\r\n          return null\r\n        }\r\n        return new WebRTCTransport({\r\n          signalingServer: this.config.signalingServer,\r\n          iceServers: this.config.iceServers,\r\n          roomId: this.config.roomId\r\n        }, this.logger)\r\n        \r\n      default:\r\n        this.logger?.warn(`Unknown transport type: ${type}`)\r\n        return null\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 设置传输层\r\n   */\r\n  private async setupTransport(transport: Transport): Promise<void> {\r\n    // 连接传输层\r\n    await transport.connect()\r\n    \r\n    // 监听消息\r\n    transport.onMessage((message) => {\r\n      this.handleRemoteMessage(message)\r\n    })\r\n    \r\n    // 更新连接状态\r\n    this.updateConnectionStatus()\r\n  }\r\n  \r\n  /**\r\n   * 设置状态值\r\n   */\r\n  async set(key: string, value: any): Promise<void> {\r\n    const oldValue = this.localState[key]\r\n    this.localState[key] = value\r\n    this.version++\r\n    \r\n    // 广播变更\r\n    const message: SyncMessage = {\r\n      id: this.generateMessageId(),\r\n      type: 'state',\r\n      source: this.peerId,\r\n      timestamp: Date.now(),\r\n      data: { key, value, oldValue },\r\n      version: this.version\r\n    }\r\n    \r\n    await this.broadcast(message)\r\n    \r\n    // 触发监听器\r\n    this.notifyListeners(key, value, oldValue)\r\n  }\r\n  \r\n  /**\r\n   * 获取状态值\r\n   */\r\n  get<T = any>(key: string): T | undefined {\r\n    // 优先返回本地状态，如果没有则返回远程状态\r\n    return this.localState[key] ?? this.remoteState[key]\r\n  }\r\n  \r\n  /**\r\n   * 批量更新状态\r\n   */\r\n  async batch(updates: Record<string, any>): Promise<void> {\r\n    const changes: Array<{ key: string; value: any; oldValue: any }> = []\r\n    \r\n    for (const [key, value] of Object.entries(updates)) {\r\n      const oldValue = this.localState[key]\r\n      this.localState[key] = value\r\n      changes.push({ key, value, oldValue })\r\n    }\r\n    \r\n    this.version++\r\n    \r\n    // 广播批量变更\r\n    const message: SyncMessage = {\r\n      id: this.generateMessageId(),\r\n      type: 'patch',\r\n      source: this.peerId,\r\n      timestamp: Date.now(),\r\n      data: changes,\r\n      version: this.version\r\n    }\r\n    \r\n    await this.broadcast(message)\r\n    \r\n    // 触发监听器\r\n    for (const { key, value, oldValue } of changes) {\r\n      this.notifyListeners(key, value, oldValue)\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 监听状态变化\r\n   */\r\n  watch(key: string, callback: (value: any, oldValue: any) => void): () => void {\r\n    if (!this.listeners.has(key)) {\r\n      this.listeners.set(key, new Set())\r\n    }\r\n    \r\n    this.listeners.get(key)!.add(callback)\r\n    \r\n    return () => {\r\n      const listeners = this.listeners.get(key)\r\n      if (listeners) {\r\n        listeners.delete(callback)\r\n        if (listeners.size === 0) {\r\n          this.listeners.delete(key)\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 全量同步\r\n   */\r\n  async sync(): Promise<void> {\r\n    if (this.isSyncing.value) {\r\n      this.logger?.debug('Sync already in progress')\r\n      return\r\n    }\r\n    \r\n    this.isSyncing.value = true\r\n    this.syncStatus.value.syncing = true\r\n    \r\n    try {\r\n      // 发送同步请求\r\n      const message: SyncMessage = {\r\n        id: this.generateMessageId(),\r\n        type: 'sync',\r\n        source: this.peerId,\r\n        timestamp: Date.now(),\r\n        data: this.localState,\r\n        version: this.version\r\n      }\r\n      \r\n      await this.broadcast(message)\r\n      \r\n      this.syncStatus.value.lastSync = Date.now()\r\n    } finally {\r\n      this.isSyncing.value = false\r\n      this.syncStatus.value.syncing = false\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 广播消息\r\n   */\r\n  private async broadcast(message: SyncMessage): Promise<void> {\r\n    const promises: Promise<void>[] = []\r\n    \r\n    for (const transport of this.transports.values()) {\r\n      if (transport.isConnected()) {\r\n        promises.push(\r\n          transport.send(message).catch(error => {\r\n            this.logger?.error('Failed to send message', error)\r\n            this.syncStatus.value.errors++\r\n          })\r\n        )\r\n      }\r\n    }\r\n    \r\n    await Promise.all(promises)\r\n  }\r\n  \r\n  /**\r\n   * 处理远程消息\r\n   */\r\n  private handleRemoteMessage(message: SyncMessage): void {\r\n    // 忽略自己的消息\r\n    if (message.source === this.peerId) {\r\n      return\r\n    }\r\n    \r\n    const startTime = Date.now()\r\n    \r\n    switch (message.type) {\r\n      case 'state':\r\n        this.handleStateUpdate(message)\r\n        break\r\n        \r\n      case 'patch':\r\n        this.handlePatchUpdate(message)\r\n        break\r\n        \r\n      case 'sync':\r\n        this.handleSyncRequest(message)\r\n        break\r\n        \r\n      case 'ack':\r\n        this.handleAck(message)\r\n        break\r\n        \r\n      case 'heartbeat':\r\n        // 更新延迟\r\n        this.syncStatus.value.latency = Date.now() - message.timestamp\r\n        break\r\n    }\r\n    \r\n    this.logger?.debug('Message processed', {\r\n      type: message.type,\r\n      source: message.source,\r\n      duration: Date.now() - startTime\r\n    })\r\n  }\r\n  \r\n  /**\r\n   * 处理状态更新\r\n   */\r\n  private handleStateUpdate(message: SyncMessage): void {\r\n    const { key, value, oldValue } = message.data\r\n    \r\n    // 应用冲突解决策略\r\n    const resolvedValue = this.resolveConflict(\r\n      key,\r\n      this.localState[key],\r\n      value,\r\n      message\r\n    )\r\n    \r\n    if (resolvedValue !== this.localState[key]) {\r\n      this.remoteState[key] = resolvedValue\r\n      this.notifyListeners(key, resolvedValue, oldValue)\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 处理批量更新\r\n   */\r\n  private handlePatchUpdate(message: SyncMessage): void {\r\n    const changes = message.data as Array<{ key: string; value: any; oldValue: any }>\r\n    \r\n    for (const { key, value, oldValue } of changes) {\r\n      const resolvedValue = this.resolveConflict(\r\n        key,\r\n        this.localState[key],\r\n        value,\r\n        message\r\n      )\r\n      \r\n      if (resolvedValue !== this.localState[key]) {\r\n        this.remoteState[key] = resolvedValue\r\n        this.notifyListeners(key, resolvedValue, oldValue)\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 处理同步请求\r\n   */\r\n  private handleSyncRequest(message: SyncMessage): void {\r\n    const remoteState = message.data\r\n    \r\n    // 合并远程状态\r\n    for (const [key, value] of Object.entries(remoteState)) {\r\n      const resolvedValue = this.resolveConflict(\r\n        key,\r\n        this.localState[key],\r\n        value,\r\n        message\r\n      )\r\n      \r\n      if (resolvedValue !== this.localState[key]) {\r\n        this.remoteState[key] = resolvedValue\r\n        this.notifyListeners(key, resolvedValue, this.localState[key])\r\n      }\r\n    }\r\n    \r\n    // 发送确认\r\n    this.sendAck(message.id, message.source)\r\n  }\r\n  \r\n  /**\r\n   * 处理确认消息\r\n   */\r\n  private handleAck(message: SyncMessage): void {\r\n    this.logger?.debug('Received ack', {\r\n      from: message.source,\r\n      for: message.data.messageId\r\n    })\r\n  }\r\n  \r\n  /**\r\n   * 解决冲突\r\n   */\r\n  private resolveConflict(\r\n    key: string,\r\n    localValue: any,\r\n    remoteValue: any,\r\n    message: SyncMessage\r\n  ): any {\r\n    // 如果本地没有值，直接使用远程值\r\n    if (localValue === undefined) {\r\n      return remoteValue\r\n    }\r\n    \r\n    // 如果配置了自定义冲突解决器\r\n    if (this.config.conflictResolver) {\r\n      return this.config.conflictResolver(localValue, remoteValue)\r\n    }\r\n    \r\n    // 使用配置的策略\r\n    switch (this.config.strategy || 'last-write-wins') {\r\n      case 'last-write-wins':\r\n        // 比较版本号或时间戳\r\n        return message.version! > this.version ? remoteValue : localValue\r\n        \r\n      case 'first-write-wins':\r\n        // 保持第一个写入的值\r\n        return localValue\r\n        \r\n      case 'merge':\r\n        // 尝试合并对象\r\n        if (typeof localValue === 'object' && typeof remoteValue === 'object') {\r\n          return { ...localValue, ...remoteValue }\r\n        }\r\n        return remoteValue\r\n        \r\n      default:\r\n        return remoteValue\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 发送确认消息\r\n   */\r\n  private async sendAck(messageId: string, target: string): Promise<void> {\r\n    const message: SyncMessage = {\r\n      id: this.generateMessageId(),\r\n      type: 'ack',\r\n      source: this.peerId,\r\n      timestamp: Date.now(),\r\n      data: { messageId, target }\r\n    }\r\n    \r\n    await this.broadcast(message)\r\n  }\r\n  \r\n  /**\r\n   * 通知监听器\r\n   */\r\n  private notifyListeners(key: string, value: any, oldValue: any): void {\r\n    const listeners = this.listeners.get(key)\r\n    if (listeners) {\r\n      listeners.forEach(callback => {\r\n        try {\r\n          callback(value, oldValue)\r\n        } catch (error) {\r\n          this.logger?.error('Listener error', error)\r\n        }\r\n      })\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 更新连接状态\r\n   */\r\n  private updateConnectionStatus(): void {\r\n    let connected = false\r\n    let peers = 0\r\n    \r\n    for (const transport of this.transports.values()) {\r\n      if (transport.isConnected()) {\r\n        connected = true\r\n        peers++\r\n      }\r\n    }\r\n    \r\n    this.syncStatus.value.connected = connected\r\n    this.syncStatus.value.peers = peers\r\n  }\r\n  \r\n  /**\r\n   * 生成消息 ID\r\n   */\r\n  private generateMessageId(): string {\r\n    return `${this.peerId}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\r\n  }\r\n  \r\n  /**\r\n   * 生成对等节点 ID\r\n   */\r\n  private generatePeerId(): string {\r\n    return `peer-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\r\n  }\r\n  \r\n  /**\r\n   * 获取同步状态\r\n   */\r\n  getStatus(): SyncStatus {\r\n    return this.syncStatus.value\r\n  }\r\n  \r\n  /**\r\n   * 获取所有状态\r\n   */\r\n  getState(): Record<string, any> {\r\n    return { ...this.localState, ...this.remoteState }\r\n  }\r\n  \r\n  /**\r\n   * 清空状态\r\n   */\r\n  clear(): void {\r\n    Object.keys(this.localState).forEach(key => delete this.localState[key])\r\n    Object.keys(this.remoteState).forEach(key => delete this.remoteState[key])\r\n    this.version = 0\r\n  }\r\n  \r\n  /**\r\n   * 销毁\r\n   */\r\n  async dispose(): Promise<void> {\r\n    // 断开所有传输\r\n    for (const transport of this.transports.values()) {\r\n      await transport.disconnect()\r\n    }\r\n    \r\n    this.transports.clear()\r\n    this.listeners.clear()\r\n    this.syncQueue = []\r\n    this.clear()\r\n  }\r\n}\r\n\r\n/**\r\n * Vue 组合式 API\r\n */\r\nexport function useDistributedSync(\r\n  config?: SyncConfig\r\n): {\r\n  sync: DistributedSync\r\n  state: ComputedRef<Record<string, any>>\r\n  status: Ref<SyncStatus>\r\n  set: (key: string, value: any) => Promise<void>\r\n  get: <T = any>(key: string) => T | undefined\r\n  watch: (key: string, callback: (value: any, oldValue: any) => void) => () => void\r\n} {\r\n  const sync = new DistributedSync(config)\r\n  \r\n  const state = computed(() => sync.getState())\r\n  const status = ref(sync.getStatus())\r\n  \r\n  // 定期更新状态\r\n  const interval = setInterval(() => {\r\n    status.value = sync.getStatus()\r\n  }, 1000)\r\n  \r\n  // 清理\r\n  onUnmounted(() => {\r\n    clearInterval(interval)\r\n    sync.dispose()\r\n  })\r\n  \r\n  return {\r\n    sync,\r\n    state,\r\n    status,\r\n    set: (key, value) => sync.set(key, value),\r\n    get: (key) => sync.get(key),\r\n    watch: (key, callback) => sync.watch(key, callback)\r\n  }\r\n}\r\n\r\n/**\r\n * 创建分布式同步实例\r\n */\r\nexport function createDistributedSync(\r\n  config?: SyncConfig,\r\n  logger?: Logger\r\n): DistributedSync {\r\n  return new DistributedSync(config, logger)\r\n}"],"names":["reactive","ref","computed","onUnmounted"],"mappings":"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"}