{"version":3,"file":"reactive-state.cjs","sources":["../../src/state/reactive-state.ts"],"sourcesContent":["/**\n * Enhanced Reactive State Management System\n * \n * Provides advanced state management features including:\n * - Computed states with dependency tracking\n * - State transactions with rollback support\n * - Deep reactivity with Vue 3 integration\n * - State persistence with versioning\n */\n\nimport type { Logger } from '../types'\nimport { computed, type ComputedRef, reactive, ref, type Ref, shallowRef, watch, type WatchCallback, type WatchOptions } from 'vue'\n\n// State value types\nexport type StateValue = unknown\nexport type StateGetter<T = StateValue> = () => T\nexport type StateSetter<T = StateValue> = (value: T) => void\nexport type StateUpdater<T = StateValue> = (oldValue: T) => T\n\n// Computed state definition\nexport interface ComputedStateDefinition<T = StateValue> {\n  get: StateGetter<T>\n  set?: StateSetter<T>\n  cache?: boolean\n}\n\n// Transaction operations\nexport interface StateTransaction {\n  id: string\n  timestamp: number\n  operations: Array<{\n    type: 'set' | 'remove' | 'clear'\n    path: string\n    oldValue?: unknown\n    newValue?: unknown\n  }>\n  status: 'pending' | 'committed' | 'rolled-back'\n}\n\n// State persistence options\nexport interface StatePersistenceOptions {\n  key: string\n  storage?: Storage\n  serialize?: (value: unknown) => string\n  deserialize?: (value: string) => unknown\n  version?: number\n  migrate?: (oldState: unknown, oldVersion: number) => unknown\n}\n\n// Reactive collection types\nexport interface ReactiveCollection<T = unknown> {\n  items: Ref<T[]>\n  add: (item: T) => void\n  remove: (index: number) => void\n  update: (index: number, item: T) => void\n  clear: () => void\n  find: (predicate: (item: T) => boolean) => T | undefined\n  filter: (predicate: (item: T) => boolean) => T[]\n  map: <U>(mapper: (item: T) => U) => U[]\n  forEach: (callback: (item: T, index: number) => void) => void\n  size: ComputedRef<number>\n  isEmpty: ComputedRef<boolean>\n}\n\n/**\n * Enhanced Reactive State Manager\n * \n * Extends the basic state manager with advanced reactive features\n * Now with SSR support and state hydration\n */\n/**\n * 增强的响应式状态管理器\n * \n * 提供高级状态管理特性：\n * - 计算属性与依赖追踪\n * - 事务支持与回滚\n * - SSR支持与状态hydration\n * - 持久化与版本迁移\n * - 内存优化与资源管理\n */\nexport class ReactiveStateManager {\n  private state = reactive<Record<string, unknown>>({})\n  private computedStates = new Map<string, ComputedRef<unknown>>()\n  private watchers = new Map<string, Array<() => void>>()\n  private transactions = new Map<string, StateTransaction>()\n  private currentTransaction: StateTransaction | null = null\n  private persistenceOptions = new Map<string, StatePersistenceOptions>()\n  private collections = new Map<string, ReactiveCollection>()\n  private isSSR = typeof window === 'undefined'\n  private hydrationPromise: Promise<void> | null = null\n  private stateSnapshots: Array<{ timestamp: number; state: string }> = []\n  private maxSnapshots = 10 // 优化：减少到10，降低内存占用\n\n  // 内存优化：限制数据结构大小\n  private readonly MAX_COMPUTED = 100      // 减少到100\n  private readonly MAX_COLLECTIONS = 50    // 减少到50\n  private readonly MAX_TRANSACTIONS = 30   // 减少到30\n  private readonly MAX_PERSISTENCE = 30    // 减少到30\n  private readonly MAX_WATCHERS = 200      // 新增：限制监听器数量\n\n  // 事件监听器引用（用于清理）\n  private storageEventHandler: ((e: StorageEvent) => void) | null = null\n  \n  // 性能优化：缓存常用路径\n  private pathValueCache = new WeakMap<object, Map<string, unknown>>()\n\n  constructor(private logger?: Logger, private ssrContext?: { initialState?: Record<string, unknown> }) {\n    if (this.isSSR && ssrContext?.initialState) {\n      // SSR: 使用服务器提供的初始状态\n      Object.assign(this.state, ssrContext.initialState)\n    } else if (!this.isSSR && typeof window !== 'undefined' && (window as any).__SSR_STATE__) {\n      // 客户端: 水合服务器状态\n      this.hydrate((window as any).__SSR_STATE__)\n    }\n\n    if (!this.isSSR) {\n      this.setupPersistence()\n    }\n  }\n\n  /**\n   * Get a reactive reference to a state value\n   */\n  getRef<T = unknown>(key: string): Ref<T | undefined> {\n    return computed(() => this.getNestedValue(this.state, key) as T)\n  }\n\n  /**\n   * Get a shallow reactive reference (better performance for large objects)\n   */\n  getShallowRef<T = unknown>(key: string): Ref<T | undefined> {\n    const value = this.getNestedValue(this.state, key)\n    return shallowRef(value as T)\n  }\n\n  /**\n   * Define a computed state that derives from other states - 优化版：限制数量\n   */\n  defineComputed<T = unknown>(\n    key: string,\n    definition: ComputedStateDefinition<T> | StateGetter<T>\n  ): ComputedRef<T> {\n    // 检查computed数量限制\n    if (this.computedStates.size >= this.MAX_COMPUTED && !this.computedStates.has(key)) {\n      this.logger?.warn(`Maximum computed states limit (${this.MAX_COMPUTED}) reached`)\n      // 移除最旧的computed（Map保持插入顺序）\n      const firstKey = this.computedStates.keys().next().value\n      if (firstKey) {\n        this.computedStates.delete(firstKey)\n      }\n    }\n\n    const def = typeof definition === 'function'\n      ? { get: definition }\n      : definition\n\n    const computedState = def.set\n      ? computed<T>({\n        get: def.get,\n        set: def.set\n      })\n      : computed<T>(def.get)\n\n    this.computedStates.set(key, computedState as ComputedRef<unknown>)\n    return computedState\n  }\n\n  /**\n   * Get a computed state value\n   */\n  getComputed<T = unknown>(key: string): ComputedRef<T> | undefined {\n    return this.computedStates.get(key) as ComputedRef<T> | undefined\n  }\n\n  /**\n   * Create a reactive collection with helper methods - 优化版：限制数量\n   */\n  createCollection<T = unknown>(key: string, initialItems: T[] = []): ReactiveCollection<T> {\n    // 检查集合数量限制\n    if (this.collections.size >= this.MAX_COLLECTIONS && !this.collections.has(key)) {\n      this.logger?.warn(`Maximum collections limit (${this.MAX_COLLECTIONS}) reached`)\n      // 移除最旧的collection\n      const firstKey = this.collections.keys().next().value\n      if (firstKey) {\n        const oldCollection = this.collections.get(firstKey)\n        if (oldCollection) {\n          oldCollection.clear() // 清理数据\n        }\n        this.collections.delete(firstKey)\n      }\n    }\n\n    const items = ref<T[]>(initialItems)\n\n    const collection: ReactiveCollection<T> = {\n      items: items as Ref<T[]>,\n      add: (item: T) => {\n        const arr = items.value as T[]\n        arr.push(item)\n      },\n      remove: (index: number) => {\n        const arr = items.value as T[]\n        arr.splice(index, 1)\n      },\n      update: (index: number, item: T) => {\n        const arr = items.value as T[]\n        if (index >= 0 && index < arr.length) {\n          arr[index] = item\n        }\n      },\n      clear: () => { (items.value as T[]).length = 0 }, // 更高效的清空\n      find: (predicate) => {\n        const arr = items.value as T[]\n        return arr.find(predicate)\n      },\n      filter: (predicate) => {\n        const arr = items.value as T[]\n        return arr.filter(predicate)\n      },\n      map: (mapper) => {\n        const arr = items.value as T[]\n        return arr.map(mapper)\n      },\n      forEach: (callback) => {\n        const arr = items.value as T[]\n        arr.forEach(callback)\n      },\n      size: computed(() => items.value.length),\n      isEmpty: computed(() => items.value.length === 0)\n    }\n\n    this.collections.set(key, collection as ReactiveCollection<unknown>)\n    return collection\n  }\n\n  /**\n   * Get a reactive collection\n   */\n  getCollection<T = unknown>(key: string): ReactiveCollection<T> | undefined {\n    return this.collections.get(key) as ReactiveCollection<T> | undefined\n  }\n\n  /**\n   * Start a new transaction - 优化版：限制事务数量\n   */\n  beginTransaction(id?: string): string {\n    const transactionId = id || this.generateTransactionId()\n\n    if (this.currentTransaction) {\n      this.logger?.warn('Transaction already in progress', {\n        current: this.currentTransaction.id\n      })\n    }\n\n    // 检查事务数量限制并清理旧事务\n    if (this.transactions.size >= this.MAX_TRANSACTIONS) {\n      // 移除最旧的已完成/回滚事务\n      const toRemove: string[] = []\n      for (const [txId, tx] of this.transactions.entries()) {\n        if (tx.status !== 'pending' && toRemove.length < 10) {\n          toRemove.push(txId)\n        }\n      }\n      toRemove.forEach(id => this.transactions.delete(id))\n    }\n\n    this.currentTransaction = {\n      id: transactionId,\n      timestamp: Date.now(),\n      operations: [],\n      status: 'pending'\n    }\n\n    this.transactions.set(transactionId, this.currentTransaction)\n    return transactionId\n  }\n\n  /**\n   * Commit the current transaction\n   */\n  async commitTransaction(): Promise<void> {\n    if (!this.currentTransaction) {\n      throw new Error('No transaction in progress')\n    }\n\n    try {\n      // Execute any pending async operations\n      this.currentTransaction.status = 'committed'\n      this.logger?.debug('Transaction committed', {\n        id: this.currentTransaction.id,\n        operations: this.currentTransaction.operations.length\n      })\n    } catch (error) {\n      await this.rollbackTransaction()\n      throw error\n    } finally {\n      this.currentTransaction = null\n    }\n  }\n\n  /**\n   * Rollback the current transaction\n   */\n  async rollbackTransaction(): Promise<void> {\n    if (!this.currentTransaction) {\n      throw new Error('No transaction in progress')\n    }\n\n    // Reverse all operations\n    for (const op of this.currentTransaction.operations.reverse()) {\n      switch (op.type) {\n        case 'set': {\n          if (op.oldValue !== undefined) {\n            this.setNestedValue(this.state, op.path, op.oldValue)\n          } else {\n            this.deleteNestedValue(this.state, op.path)\n          }\n          break\n        }\n        case 'remove': {\n          if (op.oldValue !== undefined) {\n            this.setNestedValue(this.state, op.path, op.oldValue)\n          }\n          break\n        }\n        case 'clear': {\n          // Restore all cleared values\n          if (op.oldValue && typeof op.oldValue === 'object') {\n            Object.assign(this.state, op.oldValue)\n          }\n          break\n        }\n      }\n    }\n\n    this.currentTransaction.status = 'rolled-back'\n    this.logger?.debug('Transaction rolled back', {\n      id: this.currentTransaction.id\n    })\n    this.currentTransaction = null\n  }\n\n  /**\n   * Execute a function within a transaction\n   */\n  async transaction<T>(\n    fn: () => T | Promise<T>,\n    options?: { id?: string; retries?: number }\n  ): Promise<T> {\n    const { id, retries = 0 } = options || {}\n    let lastError: Error | undefined\n\n    for (let attempt = 0; attempt <= retries; attempt++) {\n      this.beginTransaction(id)\n\n      try {\n        const result = await fn()\n        await this.commitTransaction()\n        return result\n      } catch (error) {\n        lastError = error as Error\n        await this.rollbackTransaction()\n\n        if (attempt < retries) {\n          this.logger?.debug('Transaction failed, retrying', {\n            attempt: attempt + 1,\n            retries,\n            error\n          })\n          await this.delay(2 ** attempt * 100) // Exponential backoff\n        }\n      }\n    }\n\n    throw lastError\n  }\n\n  /**\n   * Set a value with transaction support\n   */\n  set<T = unknown>(key: string, value: T): void {\n    const oldValue = this.getNestedValue(this.state, key)\n\n    if (this.currentTransaction) {\n      this.currentTransaction.operations.push({\n        type: 'set',\n        path: key,\n        oldValue,\n        newValue: value\n      })\n    }\n\n    this.setNestedValue(this.state, key, value)\n    this.saveToPersistence(key)\n  }\n\n  /**\n   * Update a value using an updater function\n   */\n  update<T = unknown>(key: string, updater: StateUpdater<T>): void {\n    const oldValue = this.getNestedValue(this.state, key) as T\n    const newValue = updater(oldValue)\n    this.set(key, newValue)\n  }\n\n  /**\n   * Setup persistence for a state key - 优化版：限制持久化键数量\n   */\n  persist(key: string, options: StatePersistenceOptions): void {\n    // 检查持久化选项数量限制\n    if (this.persistenceOptions.size >= this.MAX_PERSISTENCE && !this.persistenceOptions.has(key)) {\n      this.logger?.warn(`Maximum persistence keys limit (${this.MAX_PERSISTENCE}) reached`)\n      // 移除最旧的持久化配置\n      const firstKey = this.persistenceOptions.keys().next().value\n      if (firstKey) {\n        this.persistenceOptions.delete(firstKey)\n      }\n    }\n\n    this.persistenceOptions.set(key, options)\n\n    // Load initial value from storage\n    this.loadFromPersistence(key)\n\n    // Watch for changes and persist\n    this.watch(key, () => {\n      this.saveToPersistence(key)\n    })\n  }\n\n  /**\n   * 监听状态变化 - 使用Vue的watch API\n   * @param key 要监听的键或键数组\n   * @param callback 回调函数\n   * @param options 监听选项\n   * @returns 取消监听的函数\n   */\n  watch<T = unknown>(\n    key: string | string[],\n    callback: WatchCallback<T, T>,\n    options?: WatchOptions\n  ): () => void {\n    // 检查监听器数量限制\n    const totalWatchers = Array.from(this.watchers.values())\n      .reduce((sum, arr) => sum + arr.length, 0)\n    \n    if (totalWatchers >= this.MAX_WATCHERS) {\n      this.logger?.warn(`Maximum watchers limit (${this.MAX_WATCHERS}) reached`)\n      // 清理一些旧的监听器\n      this.cleanupOldWatchers()\n    }\n    \n    const keys = Array.isArray(key) ? key : [key]\n    const sources = keys.map(k => () => this.getNestedValue(this.state, k))\n\n    const stopWatcher = watch(\n      sources.length === 1 ? sources[0] : sources,\n      callback as WatchCallback,\n      options\n    )\n\n    // 存储监听器以便清理\n    keys.forEach(k => {\n      if (!this.watchers.has(k)) {\n        this.watchers.set(k, [])\n      }\n      const watcherArray = this.watchers.get(k)!\n      watcherArray.push(stopWatcher)\n    })\n\n    return stopWatcher\n  }\n\n  /**\n   * Create a derived state using a selector function\n   */\n  select<T = unknown>(selector: (state: Record<string, unknown>) => T): ComputedRef<T> {\n    return computed(() => selector(this.state))\n  }\n\n  /**\n   * Batch multiple state updates\n   */\n  batch(updates: Array<{ key: string; value: unknown }>): void {\n    this.beginTransaction()\n\n    try {\n      for (const { key, value } of updates) {\n        this.set(key, value)\n      }\n      this.commitTransaction()\n    } catch (error) {\n      this.rollbackTransaction()\n      throw error\n    }\n  }\n\n  /**\n   * Subscribe to state changes with pattern matching\n   */\n  subscribe(pattern: string | RegExp, callback: (key: string, value: unknown) => void): () => void {\n    const regex = typeof pattern === 'string'\n      ? new RegExp(`^${pattern.replace(/\\*/g, '.*')}$`)\n      : pattern\n\n    const unsubscribes: Array<() => void> = []\n\n    // Watch all keys matching the pattern\n    for (const key of Object.keys(this.state)) {\n      if (regex.test(key)) {\n        const unsubscribe = this.watch(key, (newValue) => {\n          callback(key, newValue)\n        })\n        unsubscribes.push(unsubscribe)\n      }\n    }\n\n    return () => {\n      unsubscribes.forEach(fn => fn())\n    }\n  }\n\n  // Helper methods\n  private getNestedValue(obj: Record<string, unknown>, path: string): unknown {\n    const keys = path.split('.')\n    let current: unknown = obj\n\n    for (const key of keys) {\n      if (current === null || current === undefined || typeof current !== 'object') {\n        return undefined\n      }\n      current = (current as Record<string, unknown>)[key]\n    }\n\n    return current\n  }\n\n  private setNestedValue(obj: Record<string, unknown>, path: string, value: unknown): void {\n    const keys = path.split('.')\n    let current = obj\n\n    for (let i = 0; i < keys.length - 1; i++) {\n      const key = keys[i]\n      if (!(key in current) || typeof current[key] !== 'object') {\n        current[key] = {}\n      }\n      current = current[key] as Record<string, unknown>\n    }\n\n    current[keys[keys.length - 1]] = value\n  }\n\n  private deleteNestedValue(obj: Record<string, unknown>, path: string): void {\n    const keys = path.split('.')\n    let current: unknown = obj\n\n    for (let i = 0; i < keys.length - 1; i++) {\n      if (!current || typeof current !== 'object') return\n      current = (current as Record<string, unknown>)[keys[i]]\n    }\n\n    if (current && typeof current === 'object') {\n      delete (current as Record<string, unknown>)[keys[keys.length - 1]]\n    }\n  }\n\n  private setupPersistence(): void {\n    if (typeof window === 'undefined') return\n\n    // 保存事件处理器引用以便清理\n    this.storageEventHandler = (e: StorageEvent) => {\n      if (!e.key || !e.newValue) return\n\n      for (const [key, options] of this.persistenceOptions) {\n        if (e.key === options.key) {\n          const value = options.deserialize\n            ? options.deserialize(e.newValue)\n            : JSON.parse(e.newValue)\n          this.set(key, value)\n        }\n      }\n    }\n\n    // Listen for storage events (cross-tab sync)\n    window.addEventListener('storage', this.storageEventHandler)\n  }\n\n  private loadFromPersistence(key: string): void {\n    const options = this.persistenceOptions.get(key)\n    if (!options) return\n\n    const storage = options.storage || localStorage\n    const stored = storage.getItem(options.key)\n    if (!stored) return\n\n    try {\n      let value = options.deserialize\n        ? options.deserialize(stored)\n        : JSON.parse(stored)\n\n      // Handle version migration\n      if (options.version && options.migrate) {\n        const storedVersion = storage.getItem(`${options.key}:version`)\n        const oldVersion = storedVersion ? Number.parseInt(storedVersion) : 0\n\n        if (oldVersion < options.version) {\n          value = options.migrate(value, oldVersion)\n          storage.setItem(`${options.key}:version`, options.version.toString())\n        }\n      }\n\n      this.set(key, value)\n    } catch (error) {\n      this.logger?.error('Failed to load from persistence', { key, error })\n    }\n  }\n\n  private saveToPersistence(key: string): void {\n    const options = this.persistenceOptions.get(key)\n    if (!options) return\n\n    const value = this.getNestedValue(this.state, key)\n    const storage = options.storage || localStorage\n\n    try {\n      const serialized = options.serialize\n        ? options.serialize(value)\n        : JSON.stringify(value)\n\n      storage.setItem(options.key, serialized)\n\n      if (options.version) {\n        storage.setItem(`${options.key}:version`, options.version.toString())\n      }\n    } catch (error) {\n      this.logger?.error('Failed to save to persistence', { key, error })\n    }\n  }\n\n  private generateTransactionId(): string {\n    return `tx_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n  }\n\n  private delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms))\n  }\n\n  /**\n   * SSR: Serialize state for server-side rendering\n   */\n  serialize(options?: {\n    include?: string[]\n    exclude?: string[]\n    compress?: boolean\n  }): string {\n    const { include, exclude, compress = false } = options || {}\n\n    let stateToSerialize = { ...this.state }\n\n    // Filter state based on include/exclude\n    if (include) {\n      stateToSerialize = Object.keys(stateToSerialize)\n        .filter(key => include.some(pattern => key.match(pattern)))\n        .reduce((acc, key) => ({ ...acc, [key]: stateToSerialize[key] }), {})\n    }\n\n    if (exclude) {\n      stateToSerialize = Object.keys(stateToSerialize)\n        .filter(key => !exclude.some(pattern => key.match(pattern)))\n        .reduce((acc, key) => ({ ...acc, [key]: stateToSerialize[key] }), {})\n    }\n\n    const serialized = JSON.stringify(stateToSerialize)\n\n    if (compress && typeof btoa !== 'undefined') {\n      // Simple compression using base64\n      return btoa(serialized)\n    }\n\n    return serialized\n  }\n\n  /**\n   * SSR: Hydrate state on client side\n   */\n  async hydrate(serializedState: string | Record<string, unknown>): Promise<void> {\n    if (this.hydrationPromise) {\n      return this.hydrationPromise\n    }\n\n    this.hydrationPromise = new Promise((resolve) => {\n      try {\n        const stateToHydrate = typeof serializedState === 'string'\n          ? JSON.parse(serializedState)\n          : serializedState\n\n        // Merge with existing state\n        Object.assign(this.state, stateToHydrate)\n\n        this.logger?.info('State hydrated successfully', {\n          keys: Object.keys(stateToHydrate).length\n        })\n\n        // Emit hydration event\n        if (typeof window !== 'undefined') {\n          window.dispatchEvent(new CustomEvent('state:hydrated', {\n            detail: { state: stateToHydrate }\n          }))\n        }\n\n        resolve()\n      } catch (error) {\n        this.logger?.error('Failed to hydrate state', error)\n        resolve() // Don't block app initialization\n      }\n    })\n\n    return this.hydrationPromise\n  }\n\n  /**\n   * Generate SSR script tag for state injection\n   */\n  generateSSRScript(): string {\n    const serialized = this.serialize()\n    return `<script>window.__SSR_STATE__ = ${JSON.stringify(serialized)};</script>`\n  }\n\n  /**\n   * Time Travel: Create a state snapshot - 优化版：使用环形缓冲区\n   */\n  createSnapshot(label?: string): string {\n    const snapshot = {\n      timestamp: Date.now(),\n      label,\n      state: this.serialize()\n    }\n\n    // 使用环形缓冲区优化\n    if (this.stateSnapshots.length >= this.maxSnapshots) {\n      this.stateSnapshots.shift() // 移除最旧的\n    }\n\n    this.stateSnapshots.push({\n      timestamp: snapshot.timestamp,\n      state: snapshot.state\n    })\n\n    this.logger?.debug('State snapshot created', { label, timestamp: snapshot.timestamp })\n\n    return snapshot.state\n  }\n\n  /**\n   * Time Travel: Restore from snapshot\n   */\n  restoreSnapshot(snapshotId: string | number): boolean {\n    let snapshot: { timestamp: number; state: string } | undefined\n\n    if (typeof snapshotId === 'number') {\n      snapshot = this.stateSnapshots[snapshotId]\n    } else {\n      snapshot = this.stateSnapshots.find(s => s.state === snapshotId)\n    }\n\n    if (!snapshot) {\n      this.logger?.warn('Snapshot not found', { snapshotId })\n      return false\n    }\n\n    try {\n      const stateToRestore = JSON.parse(snapshot.state)\n      this.clear()\n      Object.assign(this.state, stateToRestore)\n\n      this.logger?.info('State restored from snapshot', {\n        timestamp: snapshot.timestamp\n      })\n\n      return true\n    } catch (error) {\n      this.logger?.error('Failed to restore snapshot', error)\n      return false\n    }\n  }\n\n  /**\n   * Time Travel: Get snapshot history\n   */\n  getSnapshotHistory(): Array<{\n    index: number\n    timestamp: number\n    size: number\n  }> {\n    return this.stateSnapshots.map((snapshot, index) => ({\n      index,\n      timestamp: snapshot.timestamp,\n      size: snapshot.state.length\n    }))\n  }\n\n  /**\n   * Time Travel: Clear snapshot history - 优化版\n   */\n  clearSnapshots(): void {\n    this.stateSnapshots.length = 0 // 更高效的数组清空\n    this.logger?.debug('Snapshot history cleared')\n  }\n\n  /**\n   * Export state for debugging\n   */\n  exportState(format: 'json' | 'csv' | 'yaml' = 'json'): string {\n    const stateData = JSON.parse(JSON.stringify(this.state))\n\n    switch (format) {\n      case 'csv': {\n        // Simple CSV export for flat structures\n        const rows = Object.entries(stateData).map(([key, value]) =>\n          `\"${key}\",\"${JSON.stringify(value)}\"`\n        )\n        return `key,value\\n${rows.join('\\n')}`\n      }\n      case 'yaml': {\n        // Simple YAML-like export\n        return Object.entries(stateData)\n          .map(([key, value]) => `${key}: ${JSON.stringify(value)}`)\n          .join('\\n')\n      }\n      default:\n        return JSON.stringify(stateData, null, 2)\n    }\n  }\n\n  /**\n   * Import state from external source\n   */\n  importState(data: string, format: 'json' | 'csv' | 'yaml' = 'json'): boolean {\n    try {\n      let parsedData: Record<string, unknown> = {}\n\n      switch (format) {\n        case 'csv': {\n          // Simple CSV parsing\n          const lines = data.split('\\n')\n          const headers = lines[0]?.split(',') || []\n\n          if (headers[0] === 'key' && headers[1] === 'value') {\n            for (let i = 1; i < lines.length; i++) {\n              const match = lines[i].match(/\"([^\"]+)\",\"([^\"]+)\"/)\n              if (match) {\n                parsedData[match[1]] = JSON.parse(match[2])\n              }\n            }\n          }\n          break\n        }\n        case 'yaml': {\n          // Simple YAML-like parsing\n          data.split('\\n').forEach(line => {\n            const [key, ...valueParts] = line.split(': ')\n            if (key && valueParts.length > 0) {\n              parsedData[key] = JSON.parse(valueParts.join(': '))\n            }\n          })\n          break\n        }\n\n        default:\n          parsedData = JSON.parse(data)\n      }\n\n      Object.assign(this.state, parsedData)\n      this.logger?.info('State imported successfully', { format })\n      return true\n    } catch (error) {\n      this.logger?.error('Failed to import state', { format, error })\n      return false\n    }\n  }\n\n  /**\n   * 清理旧的监听器 - 新增方法\n   * @private\n   */\n  private cleanupOldWatchers(): void {\n    // 清理一些没有监听器的键\n    const keysToDelete: string[] = []\n    for (const [key, watchers] of this.watchers.entries()) {\n      if (watchers.length === 0) {\n        keysToDelete.push(key)\n      }\n    }\n    keysToDelete.forEach(key => this.watchers.delete(key))\n    \n    // 如果监听器太多，清理一些较早的\n    if (this.watchers.size > this.MAX_WATCHERS * 0.8) {\n      const entries = Array.from(this.watchers.entries())\n      const toRemove = Math.floor(entries.length * 0.2) // 移除20%\n      \n      for (let i = 0; i < toRemove; i++) {\n        const [key, watchers] = entries[i]\n        // 停止这些监听器\n        watchers.forEach(stop => {\n          try {\n            stop()\n          } catch {\n            // 忽略错误\n          }\n        })\n        this.watchers.delete(key)\n      }\n      \n      this.logger?.debug('Cleaned old watchers', {\n        removed: toRemove,\n        remaining: this.watchers.size\n      })\n    }\n  }\n\n  /**\n   * 清理所有状态和资源 - 完全增强版\n   * \n   * 按照正确的顺序清理所有资源，确保没有内存泄漏\n   */\n  dispose(): void {\n    try {\n      // 1. 移除storage事件监听器\n      if (this.storageEventHandler && typeof window !== 'undefined') {\n        window.removeEventListener('storage', this.storageEventHandler)\n        this.storageEventHandler = null\n      }\n\n      // 2. 停止所有监听器\n      for (const watchers of this.watchers.values()) {\n        watchers.forEach(stop => {\n          try {\n            stop()\n        } catch {\n          // 忽略单个监听器停止错误\n        }\n        })\n      }\n      this.watchers.clear()\n\n      // 3. 清理计算属性\n      this.computedStates.clear()\n\n      // 4. 清理集合（先清理每个集合的数据）\n      for (const collection of this.collections.values()) {\n        try {\n          collection.clear()\n        } catch {\n          // 忽略清理错误\n        }\n      }\n      this.collections.clear()\n\n      // 5. 清理事务\n      this.transactions.clear()\n      this.currentTransaction = null\n\n      // 6. 清理快照（更高效的清空）\n      this.stateSnapshots.length = 0\n\n      // 7. 清理持久化选项\n      this.persistenceOptions.clear()\n\n      // 8. 清理hydration promise\n      this.hydrationPromise = null\n\n      // 9. 清理状态对象\n      if (this.state && typeof this.state === 'object') {\n        Object.keys(this.state).forEach(key => {\n          try {\n            delete this.state[key]\n          } catch {\n            // 忽略删除错误\n          }\n        })\n      }\n\n      // 10. 清理日志器引用\n      this.logger = undefined\n      \n      // 11. 清理SSR上下文\n      this.ssrContext = undefined\n    } catch (error) {\n      console.error('Error during ReactiveStateManager disposal:', error)\n    }\n  }\n\n  /**\n   * 别名方法 - 用于统一接口\n   */\n  destroy(): void {\n    this.dispose()\n  }\n\n  /**\n   * Clear state (helper method)\n   */\n  private clear(): void {\n    Object.keys(this.state).forEach(key => delete this.state[key])\n  }\n}\n\n/**\n * Create a reactive state manager instance\n */\nexport function createReactiveStateManager(\n  logger?: Logger,\n  ssrContext?: { initialState?: Record<string, unknown> }\n): ReactiveStateManager {\n  return new ReactiveStateManager(logger, ssrContext)\n}\n\n/**\n * SSR helper: Create state manager for server\n */\nexport function createSSRStateManager(\n  initialState?: Record<string, unknown>,\n  logger?: Logger\n): ReactiveStateManager {\n  return new ReactiveStateManager(logger, { initialState })\n}\n"],"names":["reactive","computed","shallowRef","ref","id","watch"],"mappings":"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"}