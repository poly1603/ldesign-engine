{"version":3,"file":"state-manager.cjs","sources":["../../src/state/state-manager.ts"],"sourcesContent":["import type { Logger, StateManager } from '../types'\nimport { LRUCache } from '../utils/lru-cache'\nimport { reactive } from 'vue'\n\ntype WatchCallback = (newValue: unknown, oldValue: unknown) => void\n\n/**\n * 状态管理器实现\n * \n * 提供响应式状态管理，包括：\n * - 嵌套状态支持\n * - 监听器管理\n * - 历史记录追踪\n * - 内存优化\n */\nexport class StateManagerImpl implements StateManager {\n  private state = reactive<Record<string, unknown>>({})\n  // 使用WeakMap减少内存占用，自动垃圾回收\n  private watchers = new Map<string, Set<WeakRef<WatchCallback>>>()\n\n  // 优化：使用环形缓冲区，固定内存占用\n  private changeHistory: Array<{\n    path: string\n    // 不存储实际值，只存储引用或简单类型\n    oldValue: WeakRef<any> | any\n    newValue: WeakRef<any> | any\n    timestamp: number\n  }> = [] // 使用空数组初始化，避免 undefined 元素\n  private historyIndex = 0\n  private historySize = 0\n  private maxHistorySize = 20\n\n  // 批量更新优化\n  private batchUpdates: string[] | null = null\n  private batchTimer: number | null = null\n\n  // 清理定时器\n  private cleanupTimer: number | null = null\n  private readonly CLEANUP_INTERVAL = 30000 // 30秒清理一次\n\n  // LRU缓存优化 - 使用专用LRU实现\n  private pathCache: LRUCache<unknown>\n  private readonly MAX_CACHE_SIZE = 100 // 增加缓存大小 // 减少缓存大小\n\n  constructor(private logger?: Logger) {\n    // 初始化LRU缓存\n    this.pathCache = new LRUCache({\n      maxSize: this.MAX_CACHE_SIZE,\n      onEvict: (key) => {\n        this.logger?.debug('Path cache evicted', { key })\n      }\n    })\n\n    // 仅在浏览器环境启动定期清理\n    if (typeof window !== 'undefined') {\n      this.startPeriodicCleanup()\n    }\n  }\n\n  /**\n   * 获取状态值 - 优化内存访问（使用LRU缓存）\n   * @param key 状态键，支持嵌套路径（如 'user.profile.name'）\n   * @returns 状态值或undefined\n   */\n  get<T = unknown>(key: string): T | undefined {\n    // 优化：先检查LRU缓存\n    const cached = this.pathCache.get(key)\n    if (cached !== undefined) {\n      return cached as T\n    }\n\n    const value = this.getNestedValue(this.state, key) as T\n\n    // 智能缓存策略\n    if (value !== undefined) {\n      this.pathCache.set(key, value)\n    }\n\n    return value\n  }\n\n  /**\n   * 设置状态值\n   * @param key 状态键，支持嵌套路径\n   * @param value 要设置的值\n   */\n  set<T = unknown>(key: string, value: T): void {\n    try {\n      const oldValue = this.getNestedValue(this.state, key)\n\n      // 值未变化则不处理\n      if (oldValue === value) {\n        return\n      }\n\n      // 记录变更历史\n      this.recordChange(key, oldValue, value)\n\n      // 设置新值\n      this.setNestedValue(this.state, key, value)\n\n      // 清理路径缓存\n      this.invalidatePathCache(key)\n\n      // 触发监听器\n      this.triggerWatchers(key, value, oldValue)\n    } catch (error) {\n      this.logger?.error('Failed to set state', { key, value, error })\n      throw error\n    }\n  }\n\n  remove(key: string): void {\n    this.deleteNestedValue(this.state, key)\n  }\n\n  /**\n   * 清空所有状态和监听器\n   */\n  clear(): void {\n    // 清理所有监听器\n    this.watchers.clear()\n\n    // 清空路径缓存\n    this.pathCache.clear()\n\n    // 清空状态 - 添加防御性检查\n    if (this.state && typeof this.state === 'object') {\n      Object.keys(this.state).forEach(key => {\n        delete this.state[key]\n      })\n    }\n\n    // 清空历史记录\n    this.changeHistory.length = 0\n    this.historyIndex = 0\n  }\n\n  watch<T = unknown>(\n    key: string,\n    callback: (newValue: T, oldValue: T) => void\n  ): () => void {\n    // 使用弱引用存储监听器，减少内存泄漏\n    if (!this.watchers.has(key)) {\n      this.watchers.set(key, new Set())\n    }\n\n    const watcherSet = this.watchers.get(key)!\n    const weakCallback = new WeakRef(callback as WatchCallback)\n    watcherSet.add(weakCallback)\n\n    // 返回优化的取消监听函数\n    return () => {\n      const callbacks = this.watchers.get(key)\n      if (callbacks) {\n        // 清理弱引用\n        callbacks.forEach(ref => {\n          if (ref.deref() === callback) {\n            callbacks.delete(ref)\n          }\n        })\n\n        if (callbacks.size === 0) {\n          this.watchers.delete(key)\n        }\n      }\n    }\n  }\n\n  private triggerWatchers<T = unknown>(\n    key: string,\n    newValue: T,\n    oldValue: T\n  ): void {\n    const callbacks = this.watchers.get(key)\n    if (callbacks) {\n      // 清理已被垃圾回收的监听器\n      const deadRefs: WeakRef<WatchCallback>[] = []\n\n      callbacks.forEach((weakCallback) => {\n        const callback = weakCallback.deref()\n        if (callback) {\n          try {\n            // 异步执行避免阻塞\n            queueMicrotask(() => callback(newValue, oldValue))\n          } catch (error) {\n            this.logger?.error('Error in state watcher callback', { key, error })\n          }\n        } else {\n          deadRefs.push(weakCallback)\n        }\n      })\n\n      // 清理无效引用\n      deadRefs.forEach(ref => callbacks.delete(ref))\n    }\n  }\n\n  // 获取嵌套值\n  private getNestedValue(obj: Record<string, unknown>, path: string): unknown {\n    const keys = path.split('.')\n    let current: unknown = obj\n\n    for (const key of keys) {\n      if (current === null || current === undefined || typeof current !== 'object') {\n        return undefined\n      }\n      const rec = current as Record<string, unknown>\n      current = rec[key]\n    }\n\n    return current\n  }\n\n  // 设置嵌套值\n  private setNestedValue(obj: Record<string, unknown>, path: string, value: unknown): void {\n    const keys = path.split('.')\n    let current: Record<string, unknown> = obj\n\n    for (let i = 0; i < keys.length - 1; i++) {\n      const key = keys[i]\n      const next = current[key]\n      if (typeof next !== 'object' || next === null || Array.isArray(next)) {\n        current[key] = {}\n      }\n      current = current[key] as Record<string, unknown>\n    }\n\n    current[keys[keys.length - 1]] = value\n  }\n\n  // 删除嵌套值\n  private deleteNestedValue(obj: Record<string, unknown>, path: string): void {\n    const keys = path.split('.')\n    let current: unknown = obj\n\n    for (let i = 0; i < keys.length - 1; i++) {\n      if (current === null || current === undefined || typeof current !== 'object') {\n        return\n      }\n      const rec = current as Record<string, unknown>\n      const key = keys[i]\n      const next = rec[key]\n      if (typeof next !== 'object' || next === null) {\n        return\n      }\n      current = next\n    }\n\n    if (current && typeof current === 'object') {\n      delete (current as Record<string, unknown>)[keys[keys.length - 1]]\n    }\n  }\n\n  // 检查键是否存在\n  has(key: string): boolean {\n    return this.getNestedValue(this.state, key) !== undefined\n  }\n\n  // 获取所有键\n  keys(): string[] {\n    return this.getAllKeys(this.state)\n  }\n\n  // 递归获取所有键 - 优化版：使用迭代器避免创建临时数组\n  private getAllKeys(obj: Record<string, unknown>, prefix = ''): string[] {\n    const keys: string[] = []\n    const stack: Array<{ obj: Record<string, unknown>; prefix: string; depth: number }> = [\n      { obj, prefix, depth: 0 }\n    ]\n    const maxDepth = 10 // 限制最大深度\n\n    while (stack.length > 0) {\n      const { obj: current, prefix: currentPrefix, depth } = stack.pop()!\n\n      // 防止过深递归\n      if (depth >= maxDepth) continue\n\n      const currentKeys = Object.keys(current)\n      // 限制单层键数量\n      const maxKeys = Math.min(currentKeys.length, 100)\n\n      for (let i = 0; i < maxKeys; i++) {\n        const key = currentKeys[i]\n        const fullKey = currentPrefix ? `${currentPrefix}.${key}` : key\n        keys.push(fullKey)\n\n        const val = current[key]\n        if (typeof val === 'object' && val !== null && !Array.isArray(val)) {\n          stack.push({ obj: val as Record<string, unknown>, prefix: fullKey, depth: depth + 1 })\n        }\n      }\n    }\n\n    return keys\n  }\n\n  // 获取状态快照 - 优化版：使用结构化克隆或浅拷贝\n  getSnapshot(): Record<string, unknown> {\n    // 使用 structuredClone（如果可用）或递归浅拷贝，避免 JSON 序列化开销\n    if (typeof structuredClone !== 'undefined') {\n      try {\n        return structuredClone(this.state)\n      } catch {\n        // 回退到深拷贝\n      }\n    }\n\n    // 使用更高效的深拷贝\n    return this.deepClone(this.state)\n  }\n\n  /**\n   * 高效深拷贝方法 - 极致优化版\n   * 使用迭代方式替代递归，避免栈溢出\n   * 使用WeakMap追踪循环引用，减少内存占用\n   */\n  private deepClone(obj: any): any {\n    // 快速路径：处理基本类型\n    if (obj === null || typeof obj !== 'object') return obj\n    if (obj instanceof Date) return new Date(obj)\n    if (obj instanceof RegExp) return new RegExp(obj)\n    if (obj instanceof Map) return new Map(obj)\n    if (obj instanceof Set) return new Set(obj)\n\n    // 使用structuredClone（如果可用）- 最快的克隆方式\n    if (typeof structuredClone !== 'undefined') {\n      try {\n        return structuredClone(obj)\n      } catch {\n        // 回退到手动克隆\n      }\n    }\n\n    // 迭代式深拷贝（避免递归栈溢出）\n    const visited = new WeakMap()\n    const stack: Array<{ source: any; target: any; key?: string | number }> = []\n\n    // 确定根对象类型\n    const isArray = Array.isArray(obj)\n    const root = isArray ? [] : {}\n    visited.set(obj, root)\n\n    // 初始化栈\n    if (isArray) {\n      const len = Math.min(obj.length, 1000) // 限制数组大小\n      for (let i = 0; i < len; i++) {\n        stack.push({ source: obj, target: root, key: i })\n      }\n    } else {\n      const keys = Object.keys(obj)\n      const maxKeys = Math.min(keys.length, 100) // 限制对象属性数量\n      for (let i = 0; i < maxKeys; i++) {\n        stack.push({ source: obj, target: root, key: keys[i] })\n      }\n    }\n\n    // 迭代处理栈\n    while (stack.length > 0) {\n      const { source, target, key } = stack.pop()!\n      const value = source[key!]\n\n      // 处理基本类型\n      if (value === null || typeof value !== 'object') {\n        target[key!] = value\n        continue\n      }\n\n      // 处理特殊对象\n      if (value instanceof Date) {\n        target[key!] = new Date(value)\n        continue\n      }\n      if (value instanceof RegExp) {\n        target[key!] = new RegExp(value)\n        continue\n      }\n\n      // 处理循环引用\n      if (visited.has(value)) {\n        target[key!] = visited.get(value)\n        continue\n      }\n\n      // 处理数组和对象\n      if (Array.isArray(value)) {\n        const clonedArray: any[] = []\n        target[key!] = clonedArray\n        visited.set(value, clonedArray)\n\n        const len = Math.min(value.length, 1000)\n        for (let i = 0; i < len; i++) {\n          stack.push({ source: value, target: clonedArray, key: i })\n        }\n      } else {\n        const clonedObj: Record<string, any> = {}\n        target[key!] = clonedObj\n        visited.set(value, clonedObj)\n\n        const keys = Object.keys(value)\n        const maxKeys = Math.min(keys.length, 100)\n        for (let i = 0; i < maxKeys; i++) {\n          stack.push({ source: value, target: clonedObj, key: keys[i] })\n        }\n      }\n    }\n\n    return root\n  }\n\n  // 从快照恢复状态\n  restoreFromSnapshot(snapshot: Record<string, unknown>): void {\n    this.clear()\n    Object.assign(this.state, snapshot)\n  }\n\n  // 合并状态\n  merge(newState: Record<string, unknown>): void {\n    this.deepMerge(this.state, newState)\n  }\n\n  // 深度合并对象\n  private deepMerge(target: Record<string, unknown>, source: Record<string, unknown>): void {\n    for (const key of Object.keys(source)) {\n      const sVal = source[key]\n      if (sVal && typeof sVal === 'object' && !Array.isArray(sVal)) {\n        const tVal = target[key]\n        if (!tVal || typeof tVal !== 'object' || Array.isArray(tVal)) {\n          target[key] = {}\n        }\n        this.deepMerge(target[key] as Record<string, unknown>, sVal as Record<string, unknown>)\n      } else {\n        target[key] = sVal\n      }\n    }\n  }\n\n  // 获取状态统计信息\n  getStats(): {\n    totalKeys: number\n    totalWatchers: number\n    memoryUsage: string\n  } {\n    const totalWatchers = Array.from(this.watchers.values()).reduce(\n      (sum, set) => sum + set.size,\n      0\n    )\n\n    const memoryUsage = JSON.stringify(this.state).length\n\n    return {\n      totalKeys: this.keys().length,\n      totalWatchers,\n      memoryUsage: `${(memoryUsage / 1024).toFixed(2)} KB`,\n    }\n  }\n\n  // 创建命名空间\n  namespace(ns: string): StateNamespace {\n    return new StateNamespace(this, ns)\n  }\n\n  // 获取整个状态对象\n  getState(): Record<string, unknown> {\n    return { ...this.state }\n  }\n\n  // 设置整个状态对象\n  setState(newState: Partial<Record<string, unknown>>): void {\n    Object.assign(this.state, newState)\n    this.logger?.debug('State updated', { newState })\n  }\n\n  /**\n   * 启动定期清理任务\n   * @private\n   */\n  private startPeriodicCleanup(): void {\n    if (this.cleanupTimer !== null) {\n      clearInterval(this.cleanupTimer)\n    }\n\n    this.cleanupTimer = window.setInterval(() => {\n      this.cleanupOldHistory()\n      this.cleanupEmptyWatchers()\n      this.cleanupPathCache()\n    }, this.CLEANUP_INTERVAL)\n  }\n\n  // 清理旧历史记录\n  private cleanupOldHistory(): void {\n    if (this.changeHistory.length === 0) return\n\n    const now = Date.now()\n    const maxAge = 5 * 60 * 1000 // 5分钟\n\n    // 过滤掉过期的历史记录（同时过滤掉 undefined 元素）\n    const filtered = this.changeHistory.filter(change => change && now - change.timestamp < maxAge)\n\n    if (filtered.length < this.changeHistory.length) {\n      this.changeHistory = filtered\n      this.logger?.debug('Cleaned old state history', {\n        removed: this.changeHistory.length - filtered.length\n      })\n    }\n  }\n\n  // 清理空的监听器\n  private cleanupEmptyWatchers(): void {\n    const emptyKeys: string[] = []\n\n    for (const [key, callbacks] of this.watchers.entries()) {\n      if (callbacks.size === 0) {\n        emptyKeys.push(key)\n      }\n    }\n\n    emptyKeys.forEach(key => this.watchers.delete(key))\n  }\n\n  // 记录变更历史 - 优化版使用环形缓冲区\n  private recordChange(path: string, oldValue: unknown, newValue: unknown): void {\n    const entry = {\n      path,\n      oldValue,\n      newValue,\n      timestamp: Date.now(),\n    }\n\n    if (this.changeHistory.length < this.maxHistorySize) {\n      // 未满时直接添加\n      this.changeHistory.unshift(entry)\n    } else {\n      // 已满时使用环形缓冲区，覆盖最旧的\n      this.changeHistory.pop() // 移除最后一个\n      this.changeHistory.unshift(entry)\n    }\n  }\n\n  // 批量更新优化（暂未使用，移除以通过严格类型检查）\n  // private batchUpdate(key: string, updateFn: () => void): void {\n  //   this.batchUpdates.add(key)\n  //\n  //   if (this.batchTimeout) {\n  //     clearTimeout(this.batchTimeout)\n  //   }\n  //\n  //   this.batchTimeout = setTimeout(() => {\n  //     const updates = Array.from(this.batchUpdates)\n  //     this.batchUpdates.clear()\n  //     this.batchTimeout = null\n  //\n  //     // 执行批量更新\n  //     updateFn()\n  //\n  //     this.logger?.debug('Batch state update completed', { keys: updates })\n  //   }, 0) // 下一个事件循环执行\n  // }\n\n  // 获取变更历史\n  getChangeHistory(\n    limit?: number\n  ): Array<{ path: string; oldValue: unknown; newValue: unknown; timestamp: number }> {\n    return limit ? this.changeHistory.slice(0, limit) : [...this.changeHistory]\n  }\n\n  // 清除变更历史\n  clearHistory(): void {\n    this.changeHistory = []\n  }\n\n  // 撤销最后一次变更\n  undo(): boolean {\n    const lastChange = this.changeHistory.shift()\n    if (!lastChange) {\n      return false\n    }\n\n    try {\n      // 临时禁用历史记录，避免撤销操作被记录\n      const originalMaxSize = this.maxHistorySize\n      this.maxHistorySize = 0\n\n      this.setNestedValue(this.state, lastChange.path, lastChange.oldValue)\n\n      this.maxHistorySize = originalMaxSize\n      this.logger?.debug('State change undone', lastChange)\n      return true\n    } catch (error) {\n      this.logger?.error('Failed to undo state change', {\n        change: lastChange,\n        error,\n      })\n      return false\n    }\n  }\n\n  // 获取性能统计\n  getPerformanceStats(): {\n    totalChanges: number\n    recentChanges: number\n    batchedUpdates: number\n    memoryUsage: number\n  } {\n    const now = Date.now()\n    const recentChanges = this.changeHistory.filter(\n      change => change && now - change.timestamp < 60000 // 最近1分钟\n    ).length\n\n    const memoryUsage =\n      JSON.stringify(this.state).length +\n      JSON.stringify(this.changeHistory).length\n\n    return {\n      totalChanges: this.changeHistory.length,\n      recentChanges,\n      batchedUpdates: this.batchUpdates?.length || 0,\n      memoryUsage,\n    }\n  }\n\n  /**\n   * 使路径缓存失效（优化版 - LRU缓存）\n   * @private\n   */\n  private invalidatePathCache(key: string): void {\n    // 清除该路径及其所有相关路径的缓存\n    const keysToDelete: string[] = []\n    for (const cacheKey of this.pathCache.keys()) {\n      if (cacheKey === key || cacheKey.startsWith(`${key}.`) || key.startsWith(`${cacheKey}.`)) {\n        keysToDelete.push(cacheKey)\n      }\n    }\n    keysToDelete.forEach(k => this.pathCache.delete(k))\n  }\n\n  /**\n   * 清理路径缓存（LRU自动管理，无需手动清理）\n   * @private\n   */\n  private cleanupPathCache(): void {\n    // LRU缓存会自动管理大小，这里只记录统计信息\n    if (this.logger) {\n      const stats = this.pathCache.getStats()\n      this.logger.debug('Path cache stats', stats)\n    }\n  }\n}\n\n// 状态命名空间类\nexport class StateNamespace implements StateManager {\n  constructor(\n    private stateManager: StateManager,\n    private namespaceName: string\n  ) { }\n\n  private getKey(key: string): string {\n    return `${this.namespaceName}.${key}`\n  }\n\n  get<T = unknown>(key: string): T | undefined {\n    return this.stateManager.get<T>(this.getKey(key))\n  }\n\n  set<T = unknown>(key: string, value: T): void {\n    this.stateManager.set(this.getKey(key), value)\n  }\n\n  remove(key: string): void {\n    this.stateManager.remove(this.getKey(key))\n  }\n\n  has(key: string): boolean {\n    return this.stateManager.has(this.getKey(key))\n  }\n\n  watch<T = unknown>(\n    key: string,\n    callback: (newValue: T, oldValue: T) => void\n  ): () => void {\n    return this.stateManager.watch(this.getKey(key), callback)\n  }\n\n  clear(): void {\n    // 只清理当前命名空间的状态\n    const keys = this.stateManager.keys()\n    const namespacePrefix = `${this.namespaceName}.`\n\n    keys.forEach(key => {\n      if (key.startsWith(namespacePrefix)) {\n        this.stateManager.remove(key)\n      }\n    })\n  }\n\n  keys(): string[] {\n    const allKeys = this.stateManager.keys()\n    const namespacePrefix = `${this.namespaceName}.`\n\n    return allKeys\n      .filter(key => key.startsWith(namespacePrefix))\n      .map(key => key.substring(namespacePrefix.length))\n  }\n\n  namespace(name: string): StateManager {\n    return this.stateManager.namespace(`${this.namespaceName}.${name}`)\n  }\n\n  // 获取整个状态对象（仅限当前命名空间）\n  getState(): Record<string, unknown> {\n    const allState = this.stateManager.getState()\n    const namespacePrefix = `${this.namespaceName}.`\n    const result: Record<string, unknown> = {}\n\n    Object.keys(allState).forEach(key => {\n      if (key.startsWith(namespacePrefix)) {\n        const shortKey = key.substring(namespacePrefix.length)\n        result[shortKey] = allState[key]\n      }\n    })\n\n    return result\n  }\n\n  // 设置整个状态对象（仅限当前命名空间）\n  setState(newState: Partial<Record<string, unknown>>): void {\n    Object.keys(newState).forEach(key => {\n      this.set(key, newState[key])\n    })\n  }\n}\n\n// 添加带清理功能的接口\nexport interface StateManagerWithDestroy extends StateManager {\n  destroy: () => void;\n}\n\n/**\n * 创建状态管理器实例\n * @param logger 日志器（可选）\n * @returns 带销毁方法的状态管理器\n */\nexport function createStateManager(logger?: Logger): StateManagerWithDestroy {\n  const manager = new StateManagerImpl(logger);\n\n  // 添加 destroy 方法\n  (manager as any).destroy = function () {\n    // 停止定期清理\n    if (this.cleanupTimer !== null) {\n      clearInterval(this.cleanupTimer)\n      this.cleanupTimer = null\n    }\n\n    // 清理所有监听器\n    this.watchers.clear()\n\n    // 清理批量更新集合\n    if (this.batchUpdates) {\n      this.batchUpdates = null\n    }\n\n    // 清理路径缓存\n    if (this.pathCache) {\n      this.pathCache.clear()\n    }\n\n    // 清空历史记录\n    this.changeHistory = []\n    this.historyIndex = 0\n\n    // 清空响应式状态\n    if (this.state && typeof this.state === 'object') {\n      Object.keys(this.state).forEach(key => {\n        delete this.state[key]\n      })\n    }\n\n    // 清理日志器引用\n    this.logger = undefined\n  };\n\n  return manager as any as StateManagerWithDestroy;\n}\n\n// 预定义的状态模块\nexport const stateModules = {\n  // 用户状态模块\n  user: (stateManager: StateManager) => {\n    const userState = stateManager.namespace('user')\n\n    return {\n      setUser: (user: unknown) => userState.set('profile', user),\n      getUser: () => userState.get('profile'),\n      setToken: (token: string) => userState.set('token', token),\n      getToken: () => userState.get('token'),\n      logout: () => {\n        userState.clear()\n      },\n      isLoggedIn: () => !!userState.get('token'),\n    }\n  },\n\n  // 应用状态模块\n  app: (stateManager: StateManager) => {\n    const appState = stateManager.namespace('app')\n\n    return {\n      setLoading: (loading: boolean) => appState.set('loading', loading),\n      isLoading: () => appState.get('loading') || false,\n      setError: (error: string | null) => appState.set('error', error),\n      getError: () => appState.get('error'),\n      clearError: () => appState.remove('error'),\n      setTitle: (title: string) => appState.set('title', title),\n      getTitle: () => appState.get('title'),\n    }\n  },\n\n  // 设置状态模块\n  settings: (stateManager: StateManager) => {\n    const settingsState = stateManager.namespace('settings')\n\n    return {\n      setSetting: (key: string, value: unknown) => settingsState.set(key, value),\n      getSetting: (key: string, defaultValue?: unknown) =>\n        settingsState.get(key) ?? defaultValue,\n      removeSetting: (key: string) => settingsState.remove(key),\n      getAllSettings: () => settingsState.get('') || {},\n      resetSettings: () => settingsState.clear(),\n    }\n  },\n}\n"],"names":["reactive","LRUCache"],"mappings":"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"}