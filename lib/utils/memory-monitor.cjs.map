{"version":3,"file":"memory-monitor.cjs","sources":["../../src/utils/memory-monitor.ts"],"sourcesContent":["/**\n * 内存监控器\n * 实时追踪和报告内存使用情况，帮助及早发现内存泄漏\n * \n * @example\n * ```typescript\n * const monitor = new MemoryMonitor({\n *   onWarning: (info) => console.warn('Memory warning:', info),\n *   onError: (info) => console.error('Memory error:', info)\n * });\n * \n * monitor.start();\n * \n * // 稍后...\n * monitor.stop();\n * monitor.destroy();\n * ```\n */\n\nexport interface MemoryWarning {\n  type: 'threshold' | 'growth' | 'leak';\n  current: number;\n  threshold?: number;\n  growthRate?: number;\n  message: string;\n  timestamp: number;\n}\n\nexport interface MemoryError {\n  type: 'threshold' | 'critical';\n  current: number;\n  threshold: number;\n  message: string;\n  timestamp: number;\n}\n\nexport interface MemoryStats {\n  current: number | null;\n  history: number[];\n  average: number;\n  peak: number;\n  minimum: number;\n  growthRate: number;\n  trend: 'increasing' | 'stable' | 'decreasing';\n}\n\nexport interface MemoryMonitorConfig {\n  /** 检查间隔（毫秒），默认 30000 (30秒) */\n  checkInterval?: number;\n  \n  /** 阈值配置 */\n  thresholds?: {\n    /** 警告阈值（字节），默认 50MB */\n    warning?: number;\n    /** 错误阈值（字节），默认 100MB */\n    error?: number;\n    /** 增长率阈值（百分比），默认 0.5 (50%) */\n    growth?: number;\n  };\n  \n  /** 警告回调 */\n  onWarning?: (info: MemoryWarning) => void;\n  \n  /** 错误回调 */\n  onError?: (info: MemoryError) => void;\n  \n  /** 是否自动启动，默认 false */\n  autoStart?: boolean;\n  \n  /** 历史记录最大数量，默认 20 */\n  maxHistorySize?: number;\n}\n\nexport class MemoryMonitor {\n  private checkInterval: number;\n  private intervalId: number | null = null;\n  private memoryHistory: number[] = [];\n  private maxHistorySize: number;\n  \n  private onWarning?: (info: MemoryWarning) => void;\n  private onError?: (info: MemoryError) => void;\n  \n  // 阈值配置\n  private thresholds = {\n    warning: 50 * 1024 * 1024,  // 50MB\n    error: 100 * 1024 * 1024,   // 100MB\n    growth: 0.5                  // 50% 增长率\n  };\n  \n  private isRunning = false;\n  private destroyed = false;\n\n  constructor(config: MemoryMonitorConfig = {}) {\n    this.checkInterval = config.checkInterval ?? 30000;\n    this.maxHistorySize = config.maxHistorySize ?? 20;\n    this.onWarning = config.onWarning;\n    this.onError = config.onError;\n    \n    if (config.thresholds) {\n      this.thresholds = { ...this.thresholds, ...config.thresholds };\n    }\n    \n    if (config.autoStart) {\n      this.start();\n    }\n  }\n\n  /**\n   * 开始监控\n   */\n  start(): void {\n    if (this.destroyed) {\n      throw new Error('MemoryMonitor has been destroyed');\n    }\n    \n    if (this.isRunning) {\n      return; // 已经在运行\n    }\n\n    // 立即检查一次\n    this.check();\n\n    // 开始定时检查\n    this.intervalId = window.setInterval(() => {\n      this.check();\n    }, this.checkInterval);\n    \n    this.isRunning = true;\n  }\n\n  /**\n   * 停止监控\n   */\n  stop(): void {\n    if (this.intervalId !== null) {\n      clearInterval(this.intervalId);\n      this.intervalId = null;\n    }\n    this.isRunning = false;\n  }\n\n  /**\n   * 立即执行一次检查\n   */\n  check(): void {\n    const memory = this.getMemoryUsage();\n\n    if (memory === null) {\n      // 不支持内存 API，静默返回\n      return;\n    }\n\n    // 记录到历史\n    this.memoryHistory.push(memory);\n    if (this.memoryHistory.length > this.maxHistorySize) {\n      this.memoryHistory.shift();\n    }\n\n    // 检查阈值\n    this.checkThresholds(memory);\n\n    // 检查增长率\n    if (this.memoryHistory.length >= 3) {\n      this.checkGrowthRate(memory);\n    }\n    \n    // 检查潜在泄漏\n    if (this.memoryHistory.length >= 10) {\n      this.checkPotentialLeak();\n    }\n  }\n\n  /**\n   * 检查阈值\n   */\n  private checkThresholds(memory: number): void {\n    const now = Date.now();\n    \n    if (memory > this.thresholds.error) {\n      this.onError?.({\n        type: 'threshold',\n        current: memory,\n        threshold: this.thresholds.error,\n        message: `Memory usage (${this.formatBytes(memory)}) exceeds error threshold (${this.formatBytes(this.thresholds.error)})`,\n        timestamp: now\n      });\n    } else if (memory > this.thresholds.warning) {\n      this.onWarning?.({\n        type: 'threshold',\n        current: memory,\n        threshold: this.thresholds.warning,\n        message: `Memory usage (${this.formatBytes(memory)}) exceeds warning threshold (${this.formatBytes(this.thresholds.warning)})`,\n        timestamp: now\n      });\n    }\n  }\n\n  /**\n   * 检查增长率\n   */\n  private checkGrowthRate(memory: number): void {\n    const growthRate = this.calculateGrowthRate();\n    \n    if (growthRate > this.thresholds.growth) {\n      this.onWarning?.({\n        type: 'growth',\n        current: memory,\n        growthRate,\n        message: `Memory growth rate (${(growthRate * 100).toFixed(1)}%) exceeds threshold (${(this.thresholds.growth * 100).toFixed(1)}%)`,\n        timestamp: Date.now()\n      });\n    }\n  }\n\n  /**\n   * 检查潜在内存泄漏\n   * 如果内存持续增长且没有下降，可能存在泄漏\n   */\n  private checkPotentialLeak(): void {\n    if (this.memoryHistory.length < 10) {\n      return;\n    }\n    \n    // 检查最近10次记录是否持续增长\n    const recent = this.memoryHistory.slice(-10);\n    let increasingCount = 0;\n    \n    for (let i = 1; i < recent.length; i++) {\n      if (recent[i] > recent[i - 1]) {\n        increasingCount++;\n      }\n    }\n    \n    // 如果80%以上的检查点都在增长，可能存在泄漏\n    if (increasingCount >= 8) {\n      const first = recent[0];\n      const last = recent[recent.length - 1];\n      const increase = last - first;\n      const rate = increase / first;\n      \n      this.onWarning?.({\n        type: 'leak',\n        current: last,\n        growthRate: rate,\n        message: `Potential memory leak detected: consistent growth over 10 checks (${this.formatBytes(increase)} increase, ${(rate * 100).toFixed(1)}% growth)`,\n        timestamp: Date.now()\n      });\n    }\n  }\n\n  /**\n   * 获取当前内存使用（字节）\n   */\n  private getMemoryUsage(): number | null {\n    if (typeof performance === 'undefined') {\n      return null;\n    }\n    \n    const memory = (performance as any).memory;\n    if (!memory || typeof memory.usedJSHeapSize !== 'number') {\n      return null;\n    }\n    \n    return memory.usedJSHeapSize;\n  }\n\n  /**\n   * 计算内存增长率\n   * 返回从第一个记录到最后一个记录的增长率\n   */\n  private calculateGrowthRate(): number {\n    if (this.memoryHistory.length < 2) {\n      return 0;\n    }\n\n    const first = this.memoryHistory[0];\n    const last = this.memoryHistory[this.memoryHistory.length - 1];\n\n    if (first === 0) {\n      return 0;\n    }\n\n    return (last - first) / first;\n  }\n\n  /**\n   * 格式化字节数为可读字符串\n   */\n  private formatBytes(bytes: number): string {\n    if (bytes === 0) return '0 B';\n    if (bytes < 1024) return `${bytes.toFixed(0)  } B`;\n    if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(2)  } KB`;\n    return `${(bytes / (1024 * 1024)).toFixed(2)  } MB`;\n  }\n\n  /**\n   * 获取内存统计信息\n   */\n  getStats(): MemoryStats {\n    const current = this.getMemoryUsage();\n    const history = [...this.memoryHistory];\n    \n    if (history.length === 0) {\n      return {\n        current,\n        history: [],\n        average: 0,\n        peak: 0,\n        minimum: 0,\n        growthRate: 0,\n        trend: 'stable'\n      };\n    }\n    \n    const sum = history.reduce((a, b) => a + b, 0);\n    const average = sum / history.length;\n    const peak = Math.max(...history);\n    const minimum = Math.min(...history);\n    const growthRate = this.calculateGrowthRate();\n    \n    // 计算趋势\n    let trend: 'increasing' | 'stable' | 'decreasing' = 'stable';\n    if (history.length >= 3) {\n      const recent = history.slice(-3);\n      const recentAvg = recent.reduce((a, b) => a + b, 0) / recent.length;\n      const overall = history.slice(0, -3);\n      const overallAvg = overall.reduce((a, b) => a + b, 0) / overall.length;\n      \n      if (recentAvg > overallAvg * 1.1) {\n        trend = 'increasing';\n      } else if (recentAvg < overallAvg * 0.9) {\n        trend = 'decreasing';\n      }\n    }\n    \n    return {\n      current,\n      history,\n      average,\n      peak,\n      minimum,\n      growthRate,\n      trend\n    };\n  }\n\n  /**\n   * 重置历史记录\n   */\n  resetHistory(): void {\n    this.memoryHistory = [];\n  }\n\n  /**\n   * 更新配置\n   */\n  updateConfig(config: Partial<MemoryMonitorConfig>): void {\n    if (config.checkInterval !== undefined) {\n      this.checkInterval = config.checkInterval;\n      // 如果正在运行，重启以应用新间隔\n      if (this.isRunning) {\n        this.stop();\n        this.start();\n      }\n    }\n    \n    if (config.thresholds) {\n      this.thresholds = { ...this.thresholds, ...config.thresholds };\n    }\n    \n    if (config.onWarning !== undefined) {\n      this.onWarning = config.onWarning;\n    }\n    \n    if (config.onError !== undefined) {\n      this.onError = config.onError;\n    }\n    \n    if (config.maxHistorySize !== undefined) {\n      this.maxHistorySize = config.maxHistorySize;\n      // 裁剪历史记录\n      if (this.memoryHistory.length > this.maxHistorySize) {\n        this.memoryHistory = this.memoryHistory.slice(-this.maxHistorySize);\n      }\n    }\n  }\n\n  /**\n   * 清理资源\n   */\n  destroy(): void {\n    if (this.destroyed) {\n      return;\n    }\n    \n    this.stop();\n    this.memoryHistory = [];\n    this.onWarning = undefined;\n    this.onError = undefined;\n    this.destroyed = true;\n  }\n\n  /**\n   * 检查是否已销毁\n   */\n  isDestroyed(): boolean {\n    return this.destroyed;\n  }\n\n  /**\n   * 检查是否正在运行\n   */\n  isMonitoring(): boolean {\n    return this.isRunning;\n  }\n}\n\n/**\n * 创建内存监控器实例\n */\nexport function createMemoryMonitor(config?: MemoryMonitorConfig): MemoryMonitor {\n  return new MemoryMonitor(config);\n}\n\n\n"],"names":[],"mappings":"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"}