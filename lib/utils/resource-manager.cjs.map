{"version":3,"file":"resource-manager.cjs","sources":["../../src/utils/resource-manager.ts"],"sourcesContent":["/**\n * 统一资源管理器\n * 用于追踪和清理所有需要手动释放的资源\n * \n * @example\n * ```typescript\n * const resources = new ResourceManager();\n * \n * // 注册资源\n * const timerId = resources.registerTimeout(setTimeout(() => {}, 1000));\n * resources.registerListener(element, 'click', handler);\n * \n * // 自动清理所有资源\n * resources.destroy();\n * ```\n */\n\n// WeakRef 类型定义（兼容旧环境）\ndeclare global {\n  interface WeakRef<T extends object> {\n    deref: () => T | undefined;\n  }\n  const WeakRef: {\n    new <T extends object>(target: T): WeakRef<T>;\n  };\n}\n\n// 使用兼容类型\ntype WeakRefType<T extends object> = typeof WeakRef extends undefined ? any : WeakRef<T>;\n\nexport class ResourceManager {\n  // 定时器集合\n  private timers = new Set<number>();\n  private intervals = new Set<number>();\n  \n  // 观察器集合\n  private observers = new Set<ResizeObserver | MutationObserver | IntersectionObserver>();\n  \n  // 事件监听器集合\n  private listeners = new Map<EventTarget, Map<string, Set<EventListener>>>();\n  \n  // 动画帧集合\n  private animationFrames = new Set<number>();\n  \n  // 弱引用集合（用于追踪，但不阻止 GC）\n  private weakRefs = new Set<WeakRefType<any>>();\n  \n  // 自定义清理函数\n  private cleanupFunctions = new Set<() => void>();\n  \n  // 是否已销毁\n  private destroyed = false;\n\n  /**\n   * 注册定时器\n   * @returns 定时器 ID\n   */\n  registerTimeout(id: number): number {\n    this.checkDestroyed();\n    this.timers.add(id);\n    return id;\n  }\n\n  /**\n   * 注销定时器\n   */\n  unregisterTimeout(id: number): void {\n    clearTimeout(id);\n    this.timers.delete(id);\n  }\n\n  /**\n   * 注册间隔器\n   * @returns 间隔器 ID\n   */\n  registerInterval(id: number): number {\n    this.checkDestroyed();\n    this.intervals.add(id);\n    return id;\n  }\n\n  /**\n   * 注销间隔器\n   */\n  unregisterInterval(id: number): void {\n    clearInterval(id);\n    this.intervals.delete(id);\n  }\n\n  /**\n   * 注册观察器\n   * @returns 观察器实例\n   */\n  registerObserver<T extends ResizeObserver | MutationObserver | IntersectionObserver>(\n    observer: T\n  ): T {\n    this.checkDestroyed();\n    this.observers.add(observer);\n    return observer;\n  }\n\n  /**\n   * 注销观察器\n   */\n  unregisterObserver<T extends ResizeObserver | MutationObserver | IntersectionObserver>(\n    observer: T\n  ): void {\n    observer.disconnect();\n    this.observers.delete(observer);\n  }\n\n  /**\n   * 注册事件监听器\n   */\n  registerListener(\n    target: EventTarget,\n    event: string,\n    listener: EventListener,\n    options?: AddEventListenerOptions\n  ): void {\n    this.checkDestroyed();\n    \n    if (!this.listeners.has(target)) {\n      this.listeners.set(target, new Map());\n    }\n    \n    const eventMap = this.listeners.get(target)!;\n    if (!eventMap.has(event)) {\n      eventMap.set(event, new Set());\n    }\n    \n    eventMap.get(event)!.add(listener);\n    target.addEventListener(event, listener, options);\n  }\n\n  /**\n   * 注销事件监听器\n   */\n  unregisterListener(\n    target: EventTarget,\n    event: string,\n    listener: EventListener,\n    options?: EventListenerOptions\n  ): void {\n    const eventMap = this.listeners.get(target);\n    if (!eventMap) return;\n    \n    const listeners = eventMap.get(event);\n    if (!listeners) return;\n    \n    listeners.delete(listener);\n    target.removeEventListener(event, listener, options);\n    \n    // 清理空集合\n    if (listeners.size === 0) {\n      eventMap.delete(event);\n    }\n    if (eventMap.size === 0) {\n      this.listeners.delete(target);\n    }\n  }\n\n  /**\n   * 注册动画帧\n   * @returns 动画帧 ID\n   */\n  registerAnimationFrame(id: number): number {\n    this.checkDestroyed();\n    this.animationFrames.add(id);\n    return id;\n  }\n\n  /**\n   * 注销动画帧\n   */\n  unregisterAnimationFrame(id: number): void {\n    cancelAnimationFrame(id);\n    this.animationFrames.delete(id);\n  }\n\n  /**\n   * 注册弱引用\n   * 用于追踪对象，但不阻止垃圾回收\n   */\n  registerWeakRef<T extends object>(ref: WeakRefType<T>): WeakRefType<T> {\n    this.checkDestroyed();\n    this.weakRefs.add(ref);\n    return ref;\n  }\n\n  /**\n   * 注册自定义清理函数\n   */\n  registerCleanup(fn: () => void): void {\n    this.checkDestroyed();\n    this.cleanupFunctions.add(fn);\n  }\n\n  /**\n   * 注销自定义清理函数\n   */\n  unregisterCleanup(fn: () => void): void {\n    this.cleanupFunctions.delete(fn);\n  }\n\n  /**\n   * 检查是否已销毁\n   */\n  private checkDestroyed(): void {\n    if (this.destroyed) {\n      throw new Error('ResourceManager has been destroyed');\n    }\n  }\n\n  /**\n   * 获取资源统计信息\n   */\n  getStats() {\n    return {\n      timers: this.timers.size,\n      intervals: this.intervals.size,\n      observers: this.observers.size,\n      listenerTargets: this.listeners.size,\n      totalListeners: Array.from(this.listeners.values()).reduce(\n        (sum, map) => sum + Array.from(map.values()).reduce((s, set) => s + set.size, 0),\n        0\n      ),\n      animationFrames: this.animationFrames.size,\n      weakRefs: this.weakRefs.size,\n      cleanupFunctions: this.cleanupFunctions.size,\n      destroyed: this.destroyed\n    };\n  }\n\n  /**\n   * 清理所有资源\n   * 应在不再需要时调用\n   */\n  destroy(): void {\n    if (this.destroyed) {\n      return; // 避免重复销毁\n    }\n\n    // 清理定时器\n    this.timers.forEach(id => clearTimeout(id));\n    this.timers.clear();\n\n    // 清理间隔器\n    this.intervals.forEach(id => clearInterval(id));\n    this.intervals.clear();\n\n    // 断开观察器\n    this.observers.forEach(observer => {\n      try {\n        observer.disconnect();\n      } catch (error) {\n        console.warn('Failed to disconnect observer:', error);\n      }\n    });\n    this.observers.clear();\n\n    // 移除事件监听器\n    this.listeners.forEach((eventMap, target) => {\n      eventMap.forEach((listeners, event) => {\n        listeners.forEach(listener => {\n          try {\n            target.removeEventListener(event, listener);\n          } catch (error) {\n            console.warn('Failed to remove event listener:', error);\n          }\n        });\n      });\n    });\n    this.listeners.clear();\n\n    // 取消动画帧\n    this.animationFrames.forEach(id => {\n      try {\n        cancelAnimationFrame(id);\n      } catch (error) {\n        console.warn('Failed to cancel animation frame:', error);\n      }\n    });\n    this.animationFrames.clear();\n\n    // 执行自定义清理函数\n    this.cleanupFunctions.forEach(fn => {\n      try {\n        fn();\n      } catch (error) {\n        console.warn('Failed to execute cleanup function:', error);\n      }\n    });\n    this.cleanupFunctions.clear();\n\n    // 清理弱引用集合（虽然不影响 GC，但释放集合本身）\n    this.weakRefs.clear();\n\n    // 标记为已销毁\n    this.destroyed = true;\n  }\n\n  /**\n   * 检查是否已销毁\n   */\n  isDestroyed(): boolean {\n    return this.destroyed;\n  }\n}\n\n/**\n * 创建资源管理器实例\n */\nexport function createResourceManager(): ResourceManager {\n  return new ResourceManager();\n}\n\n"],"names":[],"mappings":"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"}