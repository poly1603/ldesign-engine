{"version":3,"file":"lru-cache.cjs","sources":["../../src/utils/lru-cache.ts"],"sourcesContent":["/**\n * LRU (Least Recently Used) Cache Implementation\n * 提供高效的LRU缓存，自动淘汰最久未使用的项\n */\n\nexport interface LRUCacheOptions {\n  maxSize: number\n  onEvict?: (key: string, value: unknown) => void\n}\n\ninterface CacheNode<T> {\n  key: string\n  value: T\n  prev: CacheNode<T> | null\n  next: CacheNode<T> | null\n  hits: number\n  lastAccess: number\n}\n\n/**\n * LRU缓存类\n * 使用双向链表+Map实现O(1)时间复杂度的get/set操作\n */\nexport class LRUCache<T = unknown> {\n  private maxSize: number\n  private cache: Map<string, CacheNode<T>>\n  private head: CacheNode<T> | null = null\n  private tail: CacheNode<T> | null = null\n  private onEvict?: (key: string, value: T) => void\n\n  constructor(options: LRUCacheOptions) {\n    this.maxSize = options.maxSize\n    this.onEvict = options.onEvict as ((key: string, value: T) => void) | undefined\n    this.cache = new Map()\n  }\n\n  /**\n   * 获取缓存值\n   * @param key 缓存键\n   * @returns 缓存值或undefined\n   */\n  get(key: string): T | undefined {\n    const node = this.cache.get(key)\n    if (!node) {\n      return undefined\n    }\n\n    // 更新访问信息\n    node.hits++\n    node.lastAccess = Date.now()\n\n    // 移动到链表头部（最近使用）\n    this.moveToHead(node)\n\n    return node.value\n  }\n\n  /**\n   * 设置缓存值\n   * @param key 缓存键\n   * @param value 缓存值\n   */\n  set(key: string, value: T): void {\n    const existingNode = this.cache.get(key)\n\n    if (existingNode) {\n      // 更新已存在的节点\n      existingNode.value = value\n      existingNode.lastAccess = Date.now()\n      this.moveToHead(existingNode)\n      return\n    }\n\n    // 创建新节点\n    const newNode: CacheNode<T> = {\n      key,\n      value,\n      prev: null,\n      next: null,\n      hits: 0,\n      lastAccess: Date.now()\n    }\n\n    this.cache.set(key, newNode)\n    this.addToHead(newNode)\n\n    // 检查容量限制\n    if (this.cache.size > this.maxSize) {\n      this.removeTail()\n    }\n  }\n\n  /**\n   * 检查键是否存在\n   * @param key 缓存键\n   * @returns 是否存在\n   */\n  has(key: string): boolean {\n    return this.cache.has(key)\n  }\n\n  /**\n   * 删除缓存项\n   * @param key 缓存键\n   * @returns 是否删除成功\n   */\n  delete(key: string): boolean {\n    const node = this.cache.get(key)\n    if (!node) {\n      return false\n    }\n\n    this.removeNode(node)\n    this.cache.delete(key)\n    return true\n  }\n\n  /**\n   * 清空缓存\n   */\n  clear(): void {\n    this.cache.clear()\n    this.head = null\n    this.tail = null\n  }\n\n  /**\n   * 获取缓存大小\n   */\n  size(): number {\n    return this.cache.size\n  }\n\n  /**\n   * 获取所有键\n   */\n  keys(): string[] {\n    return Array.from(this.cache.keys())\n  }\n\n  /**\n   * 获取缓存统计信息\n   */\n  getStats(): {\n    size: number\n    maxSize: number\n    hitRate: number\n    mostUsed: Array<{ key: string; hits: number }>\n  } {\n    const nodes = Array.from(this.cache.values())\n    const totalHits = nodes.reduce((sum, node) => sum + node.hits, 0)\n    const totalAccess = nodes.length * Math.max(...nodes.map(n => n.hits), 1)\n\n    // 获取最常用的前5个\n    const mostUsed = nodes\n      .sort((a, b) => b.hits - a.hits)\n      .slice(0, 5)\n      .map(node => ({ key: node.key, hits: node.hits }))\n\n    return {\n      size: this.cache.size,\n      maxSize: this.maxSize,\n      hitRate: totalAccess > 0 ? (totalHits / totalAccess) * 100 : 0,\n      mostUsed\n    }\n  }\n\n  /**\n   * 将节点移动到头部\n   * @private\n   */\n  private moveToHead(node: CacheNode<T>): void {\n    this.removeNode(node)\n    this.addToHead(node)\n  }\n\n  /**\n   * 添加节点到头部\n   * @private\n   */\n  private addToHead(node: CacheNode<T>): void {\n    node.prev = null\n    node.next = this.head\n\n    if (this.head) {\n      this.head.prev = node\n    }\n\n    this.head = node\n\n    if (!this.tail) {\n      this.tail = node\n    }\n  }\n\n  /**\n   * 从链表中移除节点\n   * @private\n   */\n  private removeNode(node: CacheNode<T>): void {\n    if (node.prev) {\n      node.prev.next = node.next\n    } else {\n      this.head = node.next\n    }\n\n    if (node.next) {\n      node.next.prev = node.prev\n    } else {\n      this.tail = node.prev\n    }\n  }\n\n  /**\n   * 移除尾部节点（最久未使用）\n   * @private\n   */\n  private removeTail(): void {\n    if (!this.tail) {\n      return\n    }\n\n    const key = this.tail.key\n    const value = this.tail.value\n\n    this.removeNode(this.tail)\n    this.cache.delete(key)\n\n    // 触发淘汰回调\n    if (this.onEvict) {\n      this.onEvict(key, value)\n    }\n  }\n\n  /**\n   * 迭代器支持\n   */\n  *[Symbol.iterator](): Iterator<[string, T]> {\n    let current = this.head\n    while (current) {\n      yield [current.key, current.value]\n      current = current.next\n    }\n  }\n}\n\n/**\n * 创建LRU缓存实例\n */\nexport function createLRUCache<T = unknown>(options: LRUCacheOptions): LRUCache<T> {\n  return new LRUCache<T>(options)\n}\n\n\n\n\n"],"names":[],"mappings":"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"}