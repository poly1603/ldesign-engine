{"version":3,"file":"memory-pool.cjs","sources":["../../src/utils/memory-pool.ts"],"sourcesContent":["/**\r\n * 内存池管理系统\r\n * 通过对象池技术减少内存分配和垃圾回收压力\r\n */\r\n\r\nexport interface PoolableObject {\r\n  reset?: () => void\r\n}\r\n\r\nexport class ObjectPool<T extends PoolableObject> {\r\n  private pool: T[] = []\r\n  private inUse = new WeakSet<T>()\r\n  private created = 0\r\n  private maxCreated: number\r\n  private lastCleanup = Date.now()\r\n  private readonly CLEANUP_INTERVAL = 60000 // 1 minute\r\n  \r\n  constructor(\r\n    private factory: () => T,\r\n    private options: {\r\n      maxSize?: number\r\n      preAllocate?: number\r\n      resetOnRelease?: boolean\r\n      maxCreated?: number  // Maximum objects ever created\r\n    } = {}\r\n  ) {\r\n    const { preAllocate = 0, maxCreated = 10000 } = options\r\n    this.maxCreated = maxCreated\r\n    \r\n    // 预分配对象\r\n    const allocateCount = Math.min(preAllocate, this.maxCreated)\r\n    for (let i = 0; i < allocateCount; i++) {\r\n      this.pool.push(this.createObject())\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 从池中获取对象\r\n   */\r\n  acquire(): T | null {\r\n    // Periodic cleanup\r\n    this.maybeCleanup()\r\n    \r\n    let obj = this.pool.pop()\r\n    \r\n    if (!obj) {\r\n      // Check if we've hit the creation limit\r\n      if (this.created >= this.maxCreated) {\r\n        console.warn(`ObjectPool: Hit max created limit (${this.maxCreated})`)\r\n        return null\r\n      }\r\n      obj = this.createObject()\r\n    }\r\n    \r\n    this.inUse.add(obj)\r\n    return obj\r\n  }\r\n\r\n  /**\r\n   * 释放对象回池\r\n   */\r\n  release(obj: T): void {\r\n    if (!this.inUse.has(obj)) {\r\n      return // 对象不是从这个池中获取的\r\n    }\r\n    \r\n    this.inUse.delete(obj)\r\n    \r\n    // 重置对象状态\r\n    if (this.options.resetOnRelease !== false && obj.reset) {\r\n      obj.reset()\r\n    }\r\n    \r\n    // 检查池大小限制\r\n    const maxSize = this.options.maxSize || 1000\r\n    if (this.pool.length < maxSize) {\r\n      this.pool.push(obj)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 批量释放对象\r\n   */\r\n  releaseAll(objects: T[]): void {\r\n    for (const obj of objects) {\r\n      this.release(obj)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 清空池\r\n   */\r\n  clear(): void {\r\n    // Reset all pooled objects if they have reset method\r\n    for (const obj of this.pool) {\r\n      if (obj.reset) {\r\n        obj.reset()\r\n      }\r\n    }\r\n    this.pool.length = 0\r\n    this.created = 0\r\n    // WeakSet 会自动清理\r\n  }\r\n  \r\n  /**\r\n   * Perform periodic cleanup\r\n   */\r\n  private maybeCleanup(): void {\r\n    const now = Date.now()\r\n    if (now - this.lastCleanup > this.CLEANUP_INTERVAL) {\r\n      this.lastCleanup = now\r\n      // Trim pool if it's too large\r\n      const maxSize = this.options.maxSize || 1000\r\n      if (this.pool.length > maxSize) {\r\n        const toRemove = this.pool.length - maxSize\r\n        this.pool.splice(0, toRemove)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取池统计信息\r\n   */\r\n  getStats(): {\r\n    poolSize: number\r\n    created: number\r\n    available: number\r\n  } {\r\n    return {\r\n      poolSize: this.pool.length,\r\n      created: this.created,\r\n      available: this.pool.length\r\n    }\r\n  }\r\n\r\n  private createObject(): T {\r\n    if (this.created >= this.maxCreated) {\r\n      throw new Error(`Cannot create more objects, limit reached: ${this.maxCreated}`)\r\n    }\r\n    this.created++\r\n    return this.factory()\r\n  }\r\n}\r\n\r\n/**\r\n * 通用内存池管理器\r\n */\r\nexport class MemoryPoolManager {\r\n  private pools = new Map<string, ObjectPool<any>>()\r\n  private readonly MAX_POOLS = 100  // Limit number of pools\r\n\r\n  /**\r\n   * 注册新的对象池\r\n   */\r\n  registerPool<T extends PoolableObject>(\r\n    name: string,\r\n    factory: () => T,\r\n    options?: {\r\n      maxSize?: number\r\n      preAllocate?: number\r\n      resetOnRelease?: boolean\r\n      maxCreated?: number\r\n    }\r\n  ): ObjectPool<T> {\r\n    if (this.pools.has(name)) {\r\n      throw new Error(`Pool \"${name}\" already exists`)\r\n    }\r\n    \r\n    if (this.pools.size >= this.MAX_POOLS) {\r\n      console.warn(`MemoryPoolManager: Reached max pools limit (${this.MAX_POOLS})`)\r\n      // Remove oldest pool\r\n      const firstKey = this.pools.keys().next().value\r\n      if (firstKey) {\r\n        this.pools.get(firstKey)?.clear()\r\n        this.pools.delete(firstKey)\r\n      }\r\n    }\r\n    \r\n    const pool = new ObjectPool(factory, options)\r\n    this.pools.set(name, pool)\r\n    return pool\r\n  }\r\n\r\n  /**\r\n   * 获取对象池\r\n   */\r\n  getPool<T extends PoolableObject>(name: string): ObjectPool<T> | undefined {\r\n    return this.pools.get(name)\r\n  }\r\n\r\n  /**\r\n   * 获取所有池的统计信息\r\n   */\r\n  getAllStats(): Record<string, {\r\n    poolSize: number\r\n    created: number\r\n    available: number\r\n  }> {\r\n    const stats: Record<string, any> = {}\r\n    \r\n    for (const [name, pool] of this.pools) {\r\n      stats[name] = pool.getStats()\r\n    }\r\n    \r\n    return stats\r\n  }\r\n\r\n  /**\r\n   * 清理所有池\r\n   */\r\n  clearAll(): void {\r\n    for (const pool of this.pools.values()) {\r\n      pool.clear()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 销毁管理器\r\n   */\r\n  destroy(): void {\r\n    this.clearAll()\r\n    this.pools.clear()\r\n  }\r\n}\r\n\r\n/**\r\n * 数组池 - 专门用于数组的内存池\r\n */\r\nexport class ArrayPool<T> {\r\n  private pools = new Map<number, T[][]>()\r\n  private readonly MAX_ARRAY_SIZE = 10000  // Maximum array size to pool\r\n  private readonly MAX_POOLS_PER_SIZE = 100  // Max arrays per size\r\n\r\n  /**\r\n   * 获取指定大小的数组\r\n   */\r\n  acquire(size: number): T[] {\r\n    // Don't pool very large arrays\r\n    if (size > this.MAX_ARRAY_SIZE) {\r\n      return Array.from({ length: size }) as T[]\r\n    }\r\n    \r\n    const pool = this.getPoolForSize(size)\r\n    const array = pool.pop()\r\n    \r\n    if (array) {\r\n      return array\r\n    }\r\n    \r\n    return Array.from({ length: size }) as T[]\r\n  }\r\n\r\n  /**\r\n   * 释放数组回池\r\n   */\r\n  release(array: T[]): void {\r\n    const size = array.length\r\n    \r\n    // Don't pool very large arrays\r\n    if (size > this.MAX_ARRAY_SIZE) {\r\n      return\r\n    }\r\n    \r\n    // 清空数组内容\r\n    array.length = 0\r\n    \r\n    const pool = this.getPoolForSize(size)\r\n    \r\n    // 限制每个尺寸的池大小\r\n    if (pool.length < this.MAX_POOLS_PER_SIZE) {\r\n      pool.push(array)\r\n    }\r\n  }\r\n\r\n  private getPoolForSize(size: number): T[][] {\r\n    let pool = this.pools.get(size)\r\n    \r\n    if (!pool) {\r\n      // Limit total number of size pools\r\n      if (this.pools.size >= 50) {\r\n        // Remove least recently used size pool\r\n        const firstKey = this.pools.keys().next().value\r\n        if (firstKey !== undefined) {\r\n          this.pools.delete(firstKey)\r\n        }\r\n      }\r\n      pool = []\r\n      this.pools.set(size, pool)\r\n    }\r\n    \r\n    return pool\r\n  }\r\n\r\n  /**\r\n   * 清理所有数组池\r\n   */\r\n  clear(): void {\r\n    this.pools.clear()\r\n  }\r\n}\r\n\r\n/**\r\n * 字符串构建器池 - 优化字符串拼接\r\n */\r\nexport class StringBuilderPool {\r\n  private pool: StringBuilder[] = []\r\n  private maxPoolSize = 50\r\n\r\n  acquire(): StringBuilder {\r\n    const builder = this.pool.pop() || new StringBuilder()\r\n    return builder\r\n  }\r\n\r\n  release(builder: StringBuilder): void {\r\n    builder.clear()\r\n    \r\n    if (this.pool.length < this.maxPoolSize) {\r\n      this.pool.push(builder)\r\n    }\r\n  }\r\n}\r\n\r\nexport class StringBuilder implements PoolableObject {\r\n  private parts: string[] = []\r\n  private readonly MAX_PARTS = 1000  // Prevent unbounded growth\r\n\r\n  append(str: string): this {\r\n    if (this.parts.length >= this.MAX_PARTS) {\r\n      // Consolidate when too many parts\r\n      const consolidated = this.parts.join('')\r\n      this.parts.length = 0\r\n      this.parts.push(consolidated)\r\n    }\r\n    this.parts.push(str)\r\n    return this\r\n  }\r\n\r\n  toString(): string {\r\n    return this.parts.join('')\r\n  }\r\n\r\n  clear(): void {\r\n    this.parts.length = 0\r\n  }\r\n\r\n  reset(): void {\r\n    this.clear()\r\n  }\r\n}\r\n\r\n// 全局内存池管理器实例\r\nlet globalMemoryPoolManager: MemoryPoolManager | undefined\r\n\r\nexport function getGlobalMemoryPoolManager(): MemoryPoolManager {\r\n  if (!globalMemoryPoolManager) {\r\n    globalMemoryPoolManager = new MemoryPoolManager()\r\n    \r\n    // 注册常用的对象池\r\n    globalMemoryPoolManager.registerPool('event', () => ({\r\n      type: '',\r\n      data: null,\r\n      reset() {\r\n        this.type = ''\r\n        this.data = null\r\n      }\r\n    }), {\r\n      maxSize: 100,\r\n      preAllocate: 10,\r\n      resetOnRelease: true\r\n    })\r\n    \r\n    globalMemoryPoolManager.registerPool('promise', () => ({\r\n      resolve: null as any,\r\n      reject: null as any,\r\n      reset() {\r\n        this.resolve = null\r\n        this.reject = null\r\n      }\r\n    }), {\r\n      maxSize: 50,\r\n      preAllocate: 5,\r\n      resetOnRelease: true\r\n    })\r\n  }\r\n  \r\n  return globalMemoryPoolManager\r\n}\r\n\r\n// 导出便捷函数\r\nexport const memoryPool = {\r\n  acquire<T extends PoolableObject>(poolName: string): T | undefined {\r\n    const manager = getGlobalMemoryPoolManager()\r\n    const pool = manager.getPool<T>(poolName)\r\n    const acquired = (pool ? pool.acquire() : undefined) as unknown as T | null | undefined\r\n    return acquired === null ? undefined : acquired\r\n  },\r\n  \r\n  release<T extends PoolableObject>(poolName: string, obj: T): void {\r\n    const manager = getGlobalMemoryPoolManager()\r\n    const pool = manager.getPool<T>(poolName)\r\n    pool?.release(obj)\r\n  },\r\n  \r\n  getStats(poolName?: string): any {\r\n    const manager = getGlobalMemoryPoolManager()\r\n    if (poolName) {\r\n      const pool = manager.getPool(poolName)\r\n      return pool?.getStats()\r\n    }\r\n    return manager.getAllStats()\r\n  }\r\n}\r\n\r\n/**\r\n * 使用装饰器自动管理对象池\r\n */\r\nexport function Poolable(poolName: string) {\r\n  return function (constructor: any) {\r\n    const originalConstructor = constructor\r\n    \r\n    // 新的构造函数\r\n    function newConstructor(...args: any[]) {\r\n      const manager = getGlobalMemoryPoolManager()\r\n      let pool = manager.getPool(poolName)\r\n      \r\n      if (!pool) {\r\n        pool = manager.registerPool(poolName, () => new (originalConstructor as any)(...args), {\r\n          maxSize: 100,\r\n          resetOnRelease: true\r\n        })\r\n      }\r\n      \r\n      return pool.acquire()\r\n    }\r\n    \r\n    // 复制原型\r\n    newConstructor.prototype = originalConstructor.prototype\r\n    \r\n    // 添加释放方法\r\n    newConstructor.prototype.release = function() {\r\n      const manager = getGlobalMemoryPoolManager()\r\n      const pool = manager.getPool(poolName)\r\n      pool?.release(this)\r\n    }\r\n    \r\n    return newConstructor as any\r\n  }\r\n}"],"names":[],"mappings":"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"}