{"version":3,"file":"locale-manager.cjs","sources":["../../src/locale/locale-manager.ts"],"sourcesContent":["/**\r\n * LocaleManager - 统一的多语言管理中心\r\n * \r\n * @deprecated 已废弃，请使用新的插件系统\r\n * \r\n * 新的插件系统使用方法：\r\n * ```typescript\r\n * // 方式1：自动共享\r\n * app.use(createI18nPlugin())  // 会自动 provide locale\r\n * app.use(createColorPlugin()) // 会自动 inject 并使用共享的 locale\r\n * \r\n * // 方式2：显式共享\r\n * const locale = ref('zh-CN')\r\n * app.use(createI18nPlugin({ locale }))\r\n * app.use(createColorPlugin({ locale }))\r\n * ```\r\n * \r\n * 保留此文件仅用于向后兼容\r\n */\r\n\r\nimport type { Engine } from '../types/engine'\r\nimport { ref, type Ref } from 'vue'\r\n\r\n/**\r\n * 支持多语言的插件必须实现此接口\r\n */\r\nexport interface LocaleAwarePlugin {\r\n  /**\r\n   * 设置语言\r\n   * @param locale 语言代码，如 'zh-CN', 'en-US'\r\n   */\r\n  setLocale: (locale: string) => void\r\n\r\n  /**\r\n   * 当前语言（可选，响应式）\r\n   * 如果提供，manager 会自动绑定到全局 locale\r\n   */\r\n  currentLocale?: Ref<string>\r\n}\r\n\r\n/**\r\n * LocaleManager 配置选项\r\n */\r\nexport interface LocaleManagerOptions {\r\n  /**\r\n   * 初始语言\r\n   * @default 'zh-CN'\r\n   */\r\n  initialLocale?: string\r\n\r\n  /**\r\n   * 后备语言\r\n   * @default 'en-US'\r\n   */\r\n  fallbackLocale?: string\r\n\r\n  /**\r\n   * 是否自动持久化到 localStorage\r\n   * @default true\r\n   */\r\n  persist?: boolean\r\n\r\n  /**\r\n   * 存储键名\r\n   * @default 'ldesign-locale'\r\n   */\r\n  storageKey?: string\r\n\r\n  /**\r\n   * 语言变更前的钩子\r\n   * 返回 false 可阻止切换\r\n   */\r\n  beforeChange?: (newLocale: string, oldLocale: string) => boolean | Promise<boolean>\r\n\r\n  /**\r\n   * 语言变更后的钩子\r\n   */\r\n  afterChange?: (newLocale: string, oldLocale: string) => void | Promise<void>\r\n\r\n  /**\r\n   * 错误处理\r\n   */\r\n  onError?: (error: Error) => void\r\n}\r\n\r\n/**\r\n * LocaleManager 类\r\n */\r\nexport class LocaleManager {\r\n  private plugins = new Map<string, LocaleAwarePlugin>()\r\n  private unwatchers: Array<() => void> = []\r\n  private readonly currentLocale: Ref<string>\r\n  private readonly fallbackLocale: string\r\n  private readonly options: Required<Omit<LocaleManagerOptions, 'beforeChange' | 'afterChange' | 'onError'>> & {\r\n    beforeChange?: LocaleManagerOptions['beforeChange']\r\n    afterChange?: LocaleManagerOptions['afterChange']\r\n    onError?: LocaleManagerOptions['onError']\r\n  }\r\n\r\n  constructor(\r\n    private engine: Engine,\r\n    options: LocaleManagerOptions = {}\r\n  ) {\r\n    // 合并默认选项\r\n    this.options = {\r\n      initialLocale: options.initialLocale || 'zh-CN',\r\n      fallbackLocale: options.fallbackLocale || 'en-US',\r\n      persist: options.persist !== false,\r\n      storageKey: options.storageKey || 'ldesign-locale',\r\n      beforeChange: options.beforeChange,\r\n      afterChange: options.afterChange,\r\n      onError: options.onError\r\n    }\r\n\r\n    this.fallbackLocale = this.options.fallbackLocale\r\n\r\n    // 从持久化存储加载或使用初始语言\r\n    const persistedLocale = this.loadPersistedLocale()\r\n    this.currentLocale = ref(persistedLocale || this.options.initialLocale)\r\n\r\n    // 初始化同步机制\r\n    this.setupSync()\r\n\r\n    this.engine.logger.info('LocaleManager initialized', {\r\n      currentLocale: this.currentLocale.value,\r\n      fallbackLocale: this.fallbackLocale,\r\n      persist: this.options.persist\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 获取当前语言\r\n   */\r\n  getLocale(): string {\r\n    return this.currentLocale.value\r\n  }\r\n\r\n  /**\r\n   * 获取后备语言\r\n   */\r\n  getFallbackLocale(): string {\r\n    return this.fallbackLocale\r\n  }\r\n\r\n  /**\r\n   * 获取当前语言的响应式引用\r\n   */\r\n  getLocaleRef(): Ref<string> {\r\n    return this.currentLocale\r\n  }\r\n\r\n  /**\r\n   * 设置全局语言\r\n   * \r\n   * @param locale 语言代码\r\n   * @returns Promise<boolean> 是否成功切换\r\n   */\r\n  async setLocale(locale: string): Promise<boolean> {\r\n    const oldLocale = this.currentLocale.value\r\n\r\n    // 相同语言，跳过\r\n    if (locale === oldLocale) {\r\n      return true\r\n    }\r\n\r\n    try {\r\n      // 调用 beforeChange 钩子\r\n      if (this.options.beforeChange) {\r\n        const shouldContinue = await this.options.beforeChange(locale, oldLocale)\r\n        if (shouldContinue === false) {\r\n          this.engine.logger.debug('Locale change cancelled by beforeChange hook', {\r\n            from: oldLocale,\r\n            to: locale\r\n          })\r\n          return false\r\n        }\r\n      }\r\n\r\n      // 更新响应式状态\r\n      this.currentLocale.value = locale\r\n\r\n      // 同步到 engine.state\r\n      this.engine.state.set('i18n.locale', locale)\r\n\r\n      // 持久化到存储\r\n      if (this.options.persist) {\r\n        this.persistLocale(locale)\r\n      }\r\n\r\n      // 同步到所有已注册的插件\r\n      this.syncToPlugins(locale)\r\n\r\n      // 触发 engine 事件\r\n      this.engine.events.emit('i18n:locale-changed', {\r\n        newLocale: locale,\r\n        oldLocale,\r\n        timestamp: Date.now()\r\n      })\r\n\r\n      // 调用 afterChange 钩子\r\n      if (this.options.afterChange) {\r\n        await this.options.afterChange(locale, oldLocale)\r\n      }\r\n\r\n      this.engine.logger.info('Locale changed', {\r\n        from: oldLocale,\r\n        to: locale,\r\n        pluginCount: this.plugins.size\r\n      })\r\n\r\n      return true\r\n    } catch (error) {\r\n      this.handleError(error as Error, 'setLocale')\r\n      return false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 注册支持多语言的插件\r\n   * \r\n   * @param name 插件名称（唯一标识）\r\n   * @param plugin 插件实例\r\n   */\r\n  register(name: string, plugin: LocaleAwarePlugin): void {\r\n    if (this.plugins.has(name)) {\r\n      this.engine.logger.warn(`Plugin \"${name}\" is already registered in LocaleManager`)\r\n      return\r\n    }\r\n\r\n    this.plugins.set(name, plugin)\r\n\r\n    // 立即同步当前语言到新注册的插件\r\n    try {\r\n      plugin.setLocale(this.currentLocale.value)\r\n\r\n      // 如果插件有 currentLocale 响应式属性，绑定到全局 locale\r\n      if (plugin.currentLocale) {\r\n        plugin.currentLocale.value = this.currentLocale.value\r\n      }\r\n\r\n      this.engine.logger.debug(`Plugin \"${name}\" registered to LocaleManager`, {\r\n        currentLocale: this.currentLocale.value\r\n      })\r\n    } catch (error) {\r\n      this.handleError(error as Error, `register:${name}`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 注销插件\r\n   * \r\n   * @param name 插件名称\r\n   */\r\n  unregister(name: string): void {\r\n    if (this.plugins.delete(name)) {\r\n      this.engine.logger.debug(`Plugin \"${name}\" unregistered from LocaleManager`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取所有已注册的插件名称\r\n   */\r\n  getRegisteredPlugins(): string[] {\r\n    return Array.from(this.plugins.keys())\r\n  }\r\n\r\n  /**\r\n   * 销毁 LocaleManager\r\n   * 清理所有监听器\r\n   */\r\n  destroy(): void {\r\n    // 执行所有 unwatch 函数\r\n    this.unwatchers.forEach(unwatch => unwatch())\r\n    this.unwatchers = []\r\n\r\n    // 清空插件注册\r\n    this.plugins.clear()\r\n\r\n    this.engine.logger.debug('LocaleManager destroyed')\r\n  }\r\n\r\n  /**\r\n   * 设置同步机制\r\n   * @private\r\n   */\r\n  private setupSync(): void {\r\n    // 监听 engine.state 的 i18n.locale 变化\r\n    // 这样可以支持其他地方通过 engine.state.set('i18n.locale', xxx) 来切换语言\r\n    const unwatch = this.engine.state.watch('i18n.locale', (newLocale: string) => {\r\n      if (newLocale && newLocale !== this.currentLocale.value) {\r\n        // 使用 setLocale 来触发完整的切换流程\r\n        this.setLocale(newLocale).catch(error => {\r\n          this.handleError(error as Error, 'state.watch')\r\n        })\r\n      }\r\n    })\r\n\r\n    this.unwatchers.push(unwatch)\r\n\r\n    // 初始化时同步到 engine.state\r\n    this.engine.state.set('i18n.locale', this.currentLocale.value)\r\n    this.engine.state.set('i18n.fallbackLocale', this.fallbackLocale)\r\n  }\r\n\r\n  /**\r\n   * 同步语言到所有已注册的插件\r\n   * @private\r\n   */\r\n  private syncToPlugins(locale: string): void {\r\n    this.plugins.forEach((plugin, name) => {\r\n      try {\r\n        // 调用插件的 setLocale 方法\r\n        plugin.setLocale(locale)\r\n\r\n        // 如果插件有响应式 currentLocale，同步更新\r\n        if (plugin.currentLocale) {\r\n          plugin.currentLocale.value = locale\r\n        }\r\n      } catch (error) {\r\n        this.handleError(error as Error, `syncToPlugins:${name}`)\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 从存储加载持久化的语言\r\n   * @private\r\n   */\r\n  private loadPersistedLocale(): string | null {\r\n    if (!this.options.persist || typeof window === 'undefined') {\r\n      return null\r\n    }\r\n\r\n    try {\r\n      const stored = localStorage.getItem(this.options.storageKey)\r\n      if (stored) {\r\n        this.engine.logger.debug('Loaded persisted locale', { locale: stored })\r\n        return stored\r\n      }\r\n    } catch (error) {\r\n      this.handleError(error as Error, 'loadPersistedLocale')\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * 持久化语言到存储\r\n   * @private\r\n   */\r\n  private persistLocale(locale: string): void {\r\n    if (typeof window === 'undefined') {\r\n      return\r\n    }\r\n\r\n    try {\r\n      localStorage.setItem(this.options.storageKey, locale)\r\n    } catch (error) {\r\n      this.handleError(error as Error, 'persistLocale')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 错误处理\r\n   * @private\r\n   */\r\n  private handleError(error: Error, context: string): void {\r\n    this.engine.logger.error(`[LocaleManager:${context}]`, { error })\r\n\r\n    if (this.options.onError) {\r\n      try {\r\n        this.options.onError(error)\r\n      } catch (e) {\r\n        this.engine.logger.error('Error in onError handler', { error: e })\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 创建 LocaleManager 实例\r\n */\r\nexport function createLocaleManager(\r\n  engine: Engine,\r\n  options?: LocaleManagerOptions\r\n): LocaleManager {\r\n  return new LocaleManager(engine, options)\r\n}\r\n"],"names":["ref"],"mappings":"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"}