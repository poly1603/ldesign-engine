{"version":3,"file":"object-pools.cjs","sources":["../../src/core/object-pools.ts"],"sourcesContent":["/**\n * 集中式对象池管理\n * 为常用对象类型提供对象池，减少GC压力和内存抖动\n */\n\nimport type { Logger } from '../types'\n\n/**\n * 通用对象池接口\n */\nexport interface PoolableObject {\n  reset?: () => void\n}\n\n/**\n * 对象池基类\n */\nexport class ObjectPool<T extends object> {\n  protected pool: T[] = []\n  protected inUse = new WeakSet<T>()\n  protected factory: () => T\n  protected resetter: (obj: T) => void\n  protected maxSize: number\n  protected stats = {\n    created: 0,\n    acquired: 0,\n    released: 0,\n    reused: 0\n  }\n\n  constructor(\n    factory: () => T,\n    resetter: (obj: T) => void,\n    maxSize = 100\n  ) {\n    this.factory = factory\n    this.resetter = resetter\n    this.maxSize = maxSize\n  }\n\n  /**\n   * 获取对象\n   */\n  acquire(): T {\n    let obj: T\n\n    if (this.pool.length > 0) {\n      obj = this.pool.pop()!\n      this.stats.reused++\n    } else {\n      obj = this.factory()\n      this.stats.created++\n    }\n\n    this.inUse.add(obj)\n    this.stats.acquired++\n\n    return obj\n  }\n\n  /**\n   * 释放对象\n   */\n  release(obj: T): void {\n    if (!this.inUse.has(obj)) {\n      console.warn('Attempting to release object not from this pool')\n      return\n    }\n\n    this.inUse.delete(obj)\n\n    if (this.pool.length < this.maxSize) {\n      this.resetter(obj)\n      this.pool.push(obj)\n      this.stats.released++\n    }\n  }\n\n  /**\n   * 预填充池\n   */\n  prefill(count: number): void {\n    const fillCount = Math.min(count, this.maxSize - this.pool.length)\n    for (let i = 0; i < fillCount; i++) {\n      const obj = this.factory()\n      this.stats.created++\n      this.pool.push(obj)\n    }\n  }\n\n  /**\n   * 清空池\n   */\n  clear(): void {\n    this.pool = []\n    this.stats = {\n      created: 0,\n      acquired: 0,\n      released: 0,\n      reused: 0\n    }\n  }\n\n  /**\n   * 获取统计信息\n   */\n  getStats(): {\n    poolSize: number\n    created: number\n    acquired: number\n    released: number\n    reused: number\n    reuseRate: number\n  } {\n    const total = this.stats.created + this.stats.reused\n    const reuseRate = total > 0 ? (this.stats.reused / total) * 100 : 0\n\n    return {\n      poolSize: this.pool.length,\n      created: this.stats.created,\n      acquired: this.stats.acquired,\n      released: this.stats.released,\n      reused: this.stats.reused,\n      reuseRate\n    }\n  }\n}\n\n/**\n * 任务对象池\n */\nexport class TaskPool<T = any> extends ObjectPool<{\n  id: string\n  type: string\n  data: T\n  priority: number\n  status: 'pending' | 'running' | 'completed' | 'failed'\n  result?: any\n  error?: Error\n}> {\n  constructor(maxSize = 100) {\n    super(\n      () => ({\n        id: '',\n        type: '',\n        data: null as T,\n        priority: 0,\n        status: 'pending'\n      }),\n      (task) => {\n        task.id = ''\n        task.type = ''\n        task.data = null as T\n        task.priority = 0\n        task.status = 'pending'\n        task.result = undefined\n        task.error = undefined\n      },\n      maxSize\n    )\n  }\n\n  /**\n   * 创建任务\n   */\n  createTask(\n    id: string,\n    type: string,\n    data: T,\n    priority = 0\n  ): ReturnType<ObjectPool<any>['acquire']> {\n    const task = this.acquire()\n    task.id = id\n    task.type = type\n    task.data = data\n    task.priority = priority\n    return task\n  }\n}\n\n/**\n * 通知对象池\n */\nexport class NotificationPool extends ObjectPool<{\n  id: string\n  type: 'success' | 'error' | 'warning' | 'info'\n  title: string\n  content: string\n  duration: number\n  timestamp: number\n  actions?: Array<{ label: string; action: () => void }>\n}> {\n  constructor(maxSize = 50) {\n    super(\n      () => ({\n        id: '',\n        type: 'info',\n        title: '',\n        content: '',\n        duration: 3000,\n        timestamp: 0\n      }),\n      (notification) => {\n        notification.id = ''\n        notification.type = 'info'\n        notification.title = ''\n        notification.content = ''\n        notification.duration = 3000\n        notification.timestamp = 0\n        notification.actions = undefined\n      },\n      maxSize\n    )\n  }\n\n  /**\n   * 创建通知\n   */\n  createNotification(\n    id: string,\n    type: 'success' | 'error' | 'warning' | 'info',\n    title: string,\n    content: string,\n    duration = 3000\n  ): ReturnType<ObjectPool<any>['acquire']> {\n    const notification = this.acquire()\n    notification.id = id\n    notification.type = type\n    notification.title = title\n    notification.content = content\n    notification.duration = duration\n    notification.timestamp = Date.now()\n    return notification\n  }\n}\n\n/**\n * HTTP请求对象池\n */\nexport class RequestPool extends ObjectPool<{\n  url: string\n  method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH'\n  headers: Record<string, string>\n  body?: any\n  timeout: number\n  retries: number\n  timestamp: number\n}> {\n  constructor(maxSize = 50) {\n    super(\n      () => ({\n        url: '',\n        method: 'GET',\n        headers: {},\n        timeout: 30000,\n        retries: 3,\n        timestamp: 0\n      }),\n      (request) => {\n        request.url = ''\n        request.method = 'GET'\n        request.headers = {}\n        request.body = undefined\n        request.timeout = 30000\n        request.retries = 3\n        request.timestamp = 0\n      },\n      maxSize\n    )\n  }\n\n  /**\n   * 创建请求\n   */\n  createRequest(\n    url: string,\n    method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' = 'GET',\n    options: {\n      headers?: Record<string, string>\n      body?: any\n      timeout?: number\n      retries?: number\n    } = {}\n  ): ReturnType<ObjectPool<any>['acquire']> {\n    const request = this.acquire()\n    request.url = url\n    request.method = method\n    request.headers = options.headers || {}\n    request.body = options.body\n    request.timeout = options.timeout || 30000\n    request.retries = options.retries ?? 3\n    request.timestamp = Date.now()\n    return request\n  }\n}\n\n/**\n * 集中式对象池管理器\n */\nexport class ObjectPoolManager {\n  private pools = new Map<string, ObjectPool<any>>()\n  private logger?: Logger\n\n  constructor(logger?: Logger) {\n    this.logger = logger\n    this.initializeDefaultPools()\n  }\n\n  /**\n   * 初始化默认对象池\n   */\n  private initializeDefaultPools(): void {\n    // 任务池\n    this.register('task', new TaskPool())\n\n    // 通知池\n    this.register('notification', new NotificationPool())\n\n    // 请求池\n    this.register('request', new RequestPool())\n\n    this.logger?.debug('Default object pools initialized')\n  }\n\n  /**\n   * 注册对象池\n   */\n  register<T extends object>(name: string, pool: ObjectPool<T>): void {\n    if (this.pools.has(name)) {\n      this.logger?.warn(`Object pool '${name}' already registered`)\n      return\n    }\n\n    this.pools.set(name, pool)\n    this.logger?.debug(`Object pool '${name}' registered`)\n  }\n\n  /**\n   * 获取对象池\n   */\n  get<T extends object>(name: string): ObjectPool<T> | undefined {\n    return this.pools.get(name)\n  }\n\n  /**\n   * 获取对象（自动从对应池中获取）\n   */\n  acquire<T extends object>(poolName: string): T | undefined {\n    const pool = this.pools.get(poolName)\n    if (!pool) {\n      this.logger?.warn(`Object pool '${poolName}' not found`)\n      return undefined\n    }\n\n    return pool.acquire() as T\n  }\n\n  /**\n   * 释放对象（自动返回到对应池）\n   */\n  release<T extends object>(poolName: string, obj: T): void {\n    const pool = this.pools.get(poolName)\n    if (!pool) {\n      this.logger?.warn(`Object pool '${poolName}' not found`)\n      return\n    }\n\n    pool.release(obj)\n  }\n\n  /**\n   * 获取所有池的统计信息\n   */\n  getAllStats(): Record<string, ReturnType<ObjectPool<any>['getStats']>> {\n    const stats: Record<string, ReturnType<ObjectPool<any>['getStats']>> = {}\n\n    for (const [name, pool] of this.pools) {\n      stats[name] = pool.getStats()\n    }\n\n    return stats\n  }\n\n  /**\n   * 清空所有对象池\n   */\n  clearAll(): void {\n    for (const pool of this.pools.values()) {\n      pool.clear()\n    }\n\n    this.logger?.debug('All object pools cleared')\n  }\n\n  /**\n   * 销毁管理器\n   */\n  destroy(): void {\n    this.clearAll()\n    this.pools.clear()\n  }\n}\n\n/**\n * 创建对象池管理器\n */\nexport function createObjectPoolManager(logger?: Logger): ObjectPoolManager {\n  return new ObjectPoolManager(logger)\n}\n\n/**\n * 对象池装饰器\n * 自动从池中获取和释放对象\n */\nexport function Pooled(poolName: string) {\n  return function (\n    target: any,\n    propertyKey: string,\n    descriptor: PropertyDescriptor\n  ) {\n    const originalMethod = descriptor.value\n\n    descriptor.value = function (...args: any[]) {\n      const poolManager = getGlobalObjectPoolManager()\n      const obj = poolManager.acquire(poolName)\n\n      try {\n        const result = originalMethod.call(this, obj, ...args)\n        return result\n      } finally {\n        if (obj) {\n          poolManager.release(poolName, obj)\n        }\n      }\n    }\n\n    return descriptor\n  }\n}\n\n// 全局对象池管理器\nlet globalObjectPoolManager: ObjectPoolManager | undefined\n\nexport function getGlobalObjectPoolManager(): ObjectPoolManager {\n  if (!globalObjectPoolManager) {\n    globalObjectPoolManager = createObjectPoolManager()\n  }\n  return globalObjectPoolManager\n}\n\nexport function setGlobalObjectPoolManager(manager: ObjectPoolManager): void {\n  globalObjectPoolManager = manager\n}\n\n\n\n\n"],"names":[],"mappings":"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"}