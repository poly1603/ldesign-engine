{"version":3,"file":"module-loader.cjs","sources":["../../src/core/module-loader.ts"],"sourcesContent":["/**\n * 动态模块加载器\n * 支持按需加载、代码分割和Tree-Shaking优化\n */\n\nimport type { Logger } from '../types'\n\n// 模块元数据\nexport interface ModuleMetadata {\n  name: string\n  version?: string\n  dependencies: string[]\n  exports: string[]\n  size?: number\n  loaded: boolean\n  loadTime?: number\n}\n\n// 模块加载选项\nexport interface ModuleLoadOptions {\n  preload?: boolean // 预加载\n  priority?: 'high' | 'normal' | 'low'\n  timeout?: number // 加载超时\n  retry?: number // 重试次数\n}\n\n// 模块加载器配置\nexport interface ModuleLoaderConfig {\n  baseUrl?: string\n  enableCache?: boolean\n  cacheMaxAge?: number\n  enablePrefetch?: boolean\n  maxConcurrentLoads?: number\n  onModuleLoad?: (module: ModuleMetadata) => void\n  onModuleError?: (error: Error, moduleName: string) => void\n}\n\n/**\n * 模块加载器类\n * 提供智能的模块加载和依赖管理\n */\nexport class ModuleLoader {\n  private modules = new Map<string, ModuleMetadata>()\n  private loadingPromises = new Map<string, Promise<any>>()\n  private config: Required<ModuleLoaderConfig>\n  private moduleCache = new Map<string, { module: any; timestamp: number }>()\n  private loadQueue: Array<{ name: string; priority: number }> = []\n  private currentLoads = 0\n\n  constructor(\n    config: ModuleLoaderConfig = {},\n    private logger?: Logger\n  ) {\n    this.config = {\n      baseUrl: config.baseUrl || '',\n      enableCache: config.enableCache ?? true,\n      cacheMaxAge: config.cacheMaxAge || 5 * 60 * 1000, // 5分钟\n      enablePrefetch: config.enablePrefetch ?? true,\n      maxConcurrentLoads: config.maxConcurrentLoads || 3,\n      onModuleLoad: config.onModuleLoad || (() => { }),\n      onModuleError: config.onModuleError || (() => { })\n    }\n  }\n\n  /**\n   * 动态加载模块\n   */\n  async load<T = any>(\n    moduleName: string,\n    options: ModuleLoadOptions = {}\n  ): Promise<T> {\n    // 检查缓存\n    if (this.config.enableCache) {\n      const cached = this.moduleCache.get(moduleName)\n      if (cached) {\n        const age = Date.now() - cached.timestamp\n        if (age < this.config.cacheMaxAge) {\n          this.logger?.debug(`Module loaded from cache: ${moduleName}`)\n          return cached.module\n        } else {\n          this.moduleCache.delete(moduleName)\n        }\n      }\n    }\n\n    // 检查是否正在加载\n    const loadingPromise = this.loadingPromises.get(moduleName)\n    if (loadingPromise) {\n      this.logger?.debug(`Waiting for in-progress load: ${moduleName}`)\n      return loadingPromise\n    }\n\n    // 开始加载\n    const promise = this.loadModule<T>(moduleName, options)\n    this.loadingPromises.set(moduleName, promise)\n\n    try {\n      const module = await promise\n      this.loadingPromises.delete(moduleName)\n\n      // 缓存模块\n      if (this.config.enableCache) {\n        this.moduleCache.set(moduleName, {\n          module,\n          timestamp: Date.now()\n        })\n      }\n\n      return module\n    } catch (error) {\n      this.loadingPromises.delete(moduleName)\n      throw error\n    }\n  }\n\n  /**\n   * 批量加载模块\n   */\n  async loadBatch<T = any>(\n    moduleNames: string[],\n    options: ModuleLoadOptions = {}\n  ): Promise<T[]> {\n    const promises = moduleNames.map(name => this.load<T>(name, options))\n    return Promise.all(promises)\n  }\n\n  /**\n   * 预加载模块（低优先级）\n   */\n  async prefetch(moduleNames: string[]): Promise<void> {\n    if (!this.config.enablePrefetch) {\n      return\n    }\n\n    const options: ModuleLoadOptions = {\n      priority: 'low',\n      preload: true\n    }\n\n    // 不等待结果，静默加载\n    moduleNames.forEach(name => {\n      this.load(name, options).catch(error => {\n        this.logger?.debug(`Prefetch failed for ${name}`, error)\n      })\n    })\n  }\n\n  /**\n   * 注册模块元数据\n   */\n  register(metadata: Omit<ModuleMetadata, 'loaded' | 'loadTime'>): void {\n    this.modules.set(metadata.name, {\n      ...metadata,\n      loaded: false\n    })\n    this.logger?.debug(`Module registered: ${metadata.name}`)\n  }\n\n  /**\n   * 获取模块元数据\n   */\n  getMetadata(moduleName: string): ModuleMetadata | undefined {\n    return this.modules.get(moduleName)\n  }\n\n  /**\n   * 获取所有已注册模块\n   */\n  getAllModules(): ModuleMetadata[] {\n    return Array.from(this.modules.values())\n  }\n\n  /**\n   * 获取加载统计\n   */\n  getStats(): {\n    registered: number\n    loaded: number\n    cached: number\n    loading: number\n    averageLoadTime: number\n  } {\n    const allModules = this.getAllModules()\n    const loaded = allModules.filter(m => m.loaded)\n    const loadTimes = loaded\n      .map(m => m.loadTime)\n      .filter(t => t !== undefined) as number[]\n\n    const averageLoadTime = loadTimes.length > 0\n      ? loadTimes.reduce((sum, t) => sum + t, 0) / loadTimes.length\n      : 0\n\n    return {\n      registered: allModules.length,\n      loaded: loaded.length,\n      cached: this.moduleCache.size,\n      loading: this.loadingPromises.size,\n      averageLoadTime\n    }\n  }\n\n  /**\n   * 生成依赖图\n   */\n  generateDependencyGraph(): string {\n    let graph = 'digraph ModuleDependencies {\\n'\n    graph += '  rankdir=LR;\\n'\n    graph += '  node [shape=box];\\n\\n'\n\n    const allModules = this.getAllModules()\n\n    // 添加节点\n    for (const module of allModules) {\n      const color = module.loaded ? 'lightgreen' : 'lightgray'\n      const shape = module.dependencies.length === 0 ? 'ellipse' : 'box'\n      graph += `  \"${module.name}\" [fillcolor=${color}, style=filled, shape=${shape}];\\n`\n    }\n\n    graph += '\\n'\n\n    // 添加边\n    for (const module of allModules) {\n      for (const dep of module.dependencies) {\n        graph += `  \"${dep}\" -> \"${module.name}\";\\n`\n      }\n    }\n\n    graph += '}\\n'\n    return graph\n  }\n\n  /**\n   * 分析未使用的模块\n   */\n  findUnusedModules(): string[] {\n    const allModules = this.getAllModules()\n    return allModules\n      .filter(m => !m.loaded)\n      .map(m => m.name)\n  }\n\n  /**\n   * 清除缓存\n   */\n  clearCache(): void {\n    this.moduleCache.clear()\n    this.logger?.debug('Module cache cleared')\n  }\n\n  /**\n   * 销毁加载器\n   */\n  destroy(): void {\n    this.loadingPromises.clear()\n    this.moduleCache.clear()\n    this.modules.clear()\n    this.loadQueue = []\n  }\n\n  /**\n   * 实际加载模块的私有方法\n   */\n  private async loadModule<T>(\n    moduleName: string,\n    options: ModuleLoadOptions\n  ): Promise<T> {\n    const startTime = Date.now()\n\n    // 控制并发加载数量\n    while (this.currentLoads >= this.config.maxConcurrentLoads) {\n      await new Promise(resolve => setTimeout(resolve, 10))\n    }\n\n    this.currentLoads++\n\n    try {\n      // 使用动态导入加载模块\n      const module = await this.dynamicImport<T>(moduleName, options)\n\n      const loadTime = Date.now() - startTime\n\n      // 更新模块元数据\n      const metadata = this.modules.get(moduleName)\n      if (metadata) {\n        metadata.loaded = true\n        metadata.loadTime = loadTime\n      }\n\n      this.config.onModuleLoad({\n        name: moduleName,\n        dependencies: metadata?.dependencies || [],\n        exports: metadata?.exports || [],\n        loaded: true,\n        loadTime\n      })\n\n      this.logger?.debug(`Module loaded: ${moduleName}`, { loadTime: `${loadTime}ms` })\n\n      return module\n    } catch (error) {\n      this.config.onModuleError(error as Error, moduleName)\n      this.logger?.error(`Failed to load module: ${moduleName}`, error)\n      throw error\n    } finally {\n      this.currentLoads--\n    }\n  }\n\n  /**\n   * 动态导入实现\n   */\n  private async dynamicImport<T>(\n    moduleName: string,\n    options: ModuleLoadOptions\n  ): Promise<T> {\n    const retries = options.retry || 3\n    const timeout = options.timeout || 30000\n\n    for (let attempt = 0; attempt <= retries; attempt++) {\n      try {\n        // 创建超时Promise\n        const timeoutPromise = new Promise<never>((_, reject) => {\n          setTimeout(() => reject(new Error(`Module load timeout: ${moduleName}`)), timeout)\n        })\n\n        // 构造模块路径\n        const modulePath = this.config.baseUrl\n          ? `${this.config.baseUrl}/${moduleName}`\n          : moduleName\n\n        // 动态导入模块\n        const importPromise = import(/* @vite-ignore */ modulePath)\n\n        // 竞争：先完成的胜出\n        const module = await Promise.race([importPromise, timeoutPromise])\n\n        return module as T\n      } catch (error) {\n        if (attempt < retries) {\n          this.logger?.debug(`Retrying module load: ${moduleName} (attempt ${attempt + 1})`)\n          await new Promise(resolve => setTimeout(resolve, 1000 * (attempt + 1)))\n        } else {\n          throw error\n        }\n      }\n    }\n\n    throw new Error(`Failed to load module after ${retries} retries: ${moduleName}`)\n  }\n}\n\n/**\n * 创建模块加载器实例\n */\nexport function createModuleLoader(\n  config?: ModuleLoaderConfig,\n  logger?: Logger\n): ModuleLoader {\n  return new ModuleLoader(config, logger)\n}\n\n/**\n * 按需加载装饰器\n * 装饰的方法第一次调用时会动态加载指定模块\n */\nexport function LazyModule(moduleName: string) {\n  return function (\n    target: any,\n    propertyKey: string,\n    descriptor: PropertyDescriptor\n  ) {\n    const originalMethod = descriptor.value\n    let moduleLoaded = false\n    let cachedModule: any\n\n    descriptor.value = async function (...args: any[]) {\n      if (!moduleLoaded) {\n        // 创建或获取全局模块加载器\n        const loader = getGlobalModuleLoader()\n        cachedModule = await loader.load(moduleName)\n        moduleLoaded = true\n      }\n\n      return originalMethod.apply(this, [cachedModule, ...args])\n    }\n\n    return descriptor\n  }\n}\n\n// 全局模块加载器实例\nlet globalModuleLoader: ModuleLoader | undefined\n\nexport function getGlobalModuleLoader(): ModuleLoader {\n  if (!globalModuleLoader) {\n    globalModuleLoader = createModuleLoader()\n  }\n  return globalModuleLoader\n}\n\nexport function setGlobalModuleLoader(loader: ModuleLoader): void {\n  globalModuleLoader = loader\n}\n\n\n\n\n"],"names":[],"mappings":";;;;;;;;;;;MAyCa,YAAA,CAAY;AAAA,EAQvB,WAAA,CACE,MAAA,GAA6B,EAAA,EACrB,MAAA,EAAe;AAAf,IAAA,IAAA,CAAA,MAAA,GAAA,MAAA;AATF,IAAA,IAAA,CAAA,OAAA,uBAAc,GAAA,EAAG;AACjB,IAAA,IAAA,CAAA,eAAA,uBAAsB,GAAA,EAAG;AAEzB,IAAA,IAAA,CAAA,WAAA,uBAAkB,GAAA,EAAG;AACrB,IAAA,IAAA,CAAA,YAAuD;AACvD,IAAA,IAAA,CAAA,YAAA,GAAe,CAAA;AAMrB,IAAA,IAAA,CAAK,MAAA,GAAS;AAAA,MACZ,OAAA,EAAS,OAAO,OAAA,IAAW,EAAA;AAAA,MAC3B,WAAA,EAAa,OAAO,WAAA,IAAe,IAAA;AAAA,MACnC,WAAA,EAAa,MAAA,CAAO,WAAA,IAAe,CAAA,GAAI,EAAA,GAAK,GAAA;AAAA;AAAA,MAC5C,cAAA,EAAgB,OAAO,cAAA,IAAkB,IAAA;AAAA,MACzC,kBAAA,EAAoB,OAAO,kBAAA,IAAsB,CAAA;AAAA,MACjD,YAAA,EAAc,MAAA,CAAO,YAAA,KAAiB,MAAK;AAAA,MAAG,CAAA,CAAA;AAAA,MAC9C,aAAA,EAAe,MAAA,CAAO,aAAA,KAAkB,MAAK;AAAA,MAAG,CAAA;AAAA;EAEpD;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,IAAA,CACJ,UAAA,EACA,OAAA,GAA6B,EAAA,EAAE;AAG/B,IAAA,IAAI,IAAA,CAAK,OAAO,WAAA,EAAa;AAC3B,MAAA,MAAM,MAAA,GAAS,IAAA,CAAK,WAAA,CAAY,GAAA,CAAI,UAAU,CAAA;AAC9C,MAAA,IAAI,MAAA,EAAQ;AACV,QAAA,MAAM,GAAA,GAAM,IAAA,CAAK,GAAA,KAAQ,MAAA,CAAO,SAAA;AAChC,QAAA,IAAI,GAAA,GAAM,IAAA,CAAK,MAAA,CAAO,WAAA,EAAa;AACjC,UAAA,IAAA,CAAK,MAAA,EAAQ,KAAA,CAAM,CAAA,0BAAA,EAA6B,UAAU,CAAA,CAAE,CAAA;AAC5D,UAAA,OAAO,MAAA,CAAO,MAAA;AAAA,QAChB,CAAA,MAAO;AACL,UAAA,IAAA,CAAK,WAAA,CAAY,OAAO,UAAU,CAAA;AAAA,QACpC;AAAA,MACF;AAAA,IACF;AAGA,IAAA,MAAM,cAAA,GAAiB,IAAA,CAAK,eAAA,CAAgB,GAAA,CAAI,UAAU,CAAA;AAC1D,IAAA,IAAI,cAAA,EAAgB;AAClB,MAAA,IAAA,CAAK,MAAA,EAAQ,KAAA,CAAM,CAAA,8BAAA,EAAiC,UAAU,CAAA,CAAE,CAAA;AAChE,MAAA,OAAO,cAAA;AAAA,IACT;AAGA,IAAA,MAAM,OAAA,GAAU,IAAA,CAAK,UAAA,CAAc,UAAA,EAAY,OAAO,CAAA;AACtD,IAAA,IAAA,CAAK,eAAA,CAAgB,GAAA,CAAI,UAAA,EAAY,OAAO,CAAA;AAE5C,IAAA,IAAI;AACF,MAAA,MAAM,SAAS,MAAM,OAAA;AACrB,MAAA,IAAA,CAAK,eAAA,CAAgB,OAAO,UAAU,CAAA;AAGtC,MAAA,IAAI,IAAA,CAAK,OAAO,WAAA,EAAa;AAC3B,QAAA,IAAA,CAAK,WAAA,CAAY,IAAI,UAAA,EAAY;AAAA,UAC/B,MAAA;AAAA,UACA,SAAA,EAAW,KAAK,GAAA;AAAG,SACpB,CAAA;AAAA,MACH;AAEA,MAAA,OAAO,MAAA;AAAA,IACT,SAAS,KAAA,EAAO;AACd,MAAA,IAAA,CAAK,eAAA,CAAgB,OAAO,UAAU,CAAA;AACtC,MAAA,MAAM,KAAA;AAAA,IACR;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,SAAA,CACJ,WAAA,EACA,OAAA,GAA6B,EAAA,EAAE;AAE/B,IAAA,MAAM,QAAA,GAAW,YAAY,GAAA,CAAI,CAAA,IAAA,KAAQ,KAAK,IAAA,CAAQ,IAAA,EAAM,OAAO,CAAC,CAAA;AACpE,IAAA,OAAO,OAAA,CAAQ,IAAI,QAAQ,CAAA;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,SAAS,WAAA,EAAqB;AAClC,IAAA,IAAI,CAAC,IAAA,CAAK,MAAA,CAAO,cAAA,EAAgB;AAC/B,MAAA;AAAA,IACF;AAEA,IAAA,MAAM,OAAA,GAA6B;AAAA,MACjC,QAAA,EAAU,KAAA;AAAA,MACV,OAAA,EAAS;AAAA;AAIX,IAAA,WAAA,CAAY,QAAQ,CAAA,IAAA,KAAO;AACzB,MAAA,IAAA,CAAK,IAAA,CAAK,IAAA,EAAM,OAAO,CAAA,CAAE,MAAM,CAAA,KAAA,KAAQ;AACrC,QAAA,IAAA,CAAK,MAAA,EAAQ,KAAA,CAAM,CAAA,oBAAA,EAAuB,IAAI,IAAI,KAAK,CAAA;AAAA,MACzD,CAAC,CAAA;AAAA,IACH,CAAC,CAAA;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKA,SAAS,QAAA,EAAqD;AAC5D,IAAA,IAAA,CAAK,OAAA,CAAQ,GAAA,CAAI,QAAA,CAAS,IAAA,EAAM;AAAA,MAC9B,GAAG,QAAA;AAAA,MACH,MAAA,EAAQ;AAAA,KACT,CAAA;AACD,IAAA,IAAA,CAAK,MAAA,EAAQ,KAAA,CAAM,CAAA,mBAAA,EAAsB,QAAA,CAAS,IAAI,CAAA,CAAE,CAAA;AAAA,EAC1D;AAAA;AAAA;AAAA;AAAA,EAKA,YAAY,UAAA,EAAkB;AAC5B,IAAA,OAAO,IAAA,CAAK,OAAA,CAAQ,GAAA,CAAI,UAAU,CAAA;AAAA,EACpC;AAAA;AAAA;AAAA;AAAA,EAKA,aAAA,GAAa;AACX,IAAA,OAAO,KAAA,CAAM,IAAA,CAAK,IAAA,CAAK,OAAA,CAAQ,QAAQ,CAAA;AAAA,EACzC;AAAA;AAAA;AAAA;AAAA,EAKA,QAAA,GAAQ;AAON,IAAA,MAAM,UAAA,GAAa,KAAK,aAAA;AACxB,IAAA,MAAM,MAAA,GAAS,UAAA,CAAW,MAAA,CAAO,CAAA,CAAA,KAAK,EAAE,MAAM,CAAA;AAC9C,IAAA,MAAM,SAAA,GAAY,MAAA,CACf,GAAA,CAAI,CAAA,CAAA,KAAK,CAAA,CAAE,QAAQ,CAAA,CACnB,MAAA,CAAO,CAAA,CAAA,KAAK,CAAA,KAAM,MAAS,CAAA;AAE9B,IAAA,MAAM,eAAA,GAAkB,SAAA,CAAU,MAAA,GAAS,CAAA,GACvC,UAAU,MAAA,CAAO,CAAC,GAAA,EAAK,CAAA,KAAM,GAAA,GAAM,CAAA,EAAG,CAAC,CAAA,GAAI,UAAU,MAAA,GACrD,CAAA;AAEJ,IAAA,OAAO;AAAA,MACL,YAAY,UAAA,CAAW,MAAA;AAAA,MACvB,QAAQ,MAAA,CAAO,MAAA;AAAA,MACf,MAAA,EAAQ,KAAK,WAAA,CAAY,IAAA;AAAA,MACzB,OAAA,EAAS,KAAK,eAAA,CAAgB,IAAA;AAAA,MAC9B;AAAA;EAEJ;AAAA;AAAA;AAAA;AAAA,EAKA,uBAAA,GAAuB;AACrB,IAAA,IAAI,KAAA,GAAQ,gCAAA;AACZ,IAAA,KAAA,IAAS,iBAAA;AACT,IAAA,KAAA,IAAS,yBAAA;AAET,IAAA,MAAM,UAAA,GAAa,KAAK,aAAA;AAGxB,IAAA,KAAA,MAAW,UAAU,UAAA,EAAY;AAC/B,MAAA,MAAM,KAAA,GAAQ,MAAA,CAAO,MAAA,GAAS,YAAA,GAAe,WAAA;AAC7C,MAAA,MAAM,KAAA,GAAQ,MAAA,CAAO,YAAA,CAAa,MAAA,KAAW,IAAI,SAAA,GAAY,KAAA;AAC7D,MAAA,KAAA,IAAS,MAAM,MAAA,CAAO,IAAI,CAAA,aAAA,EAAgB,KAAK,yBAAyB,KAAK,CAAA;AAAA,CAAA;AAAA,IAC/E;AAEA,IAAA,KAAA,IAAS,IAAA;AAGT,IAAA,KAAA,MAAW,UAAU,UAAA,EAAY;AAC/B,MAAA,KAAA,MAAW,GAAA,IAAO,OAAO,YAAA,EAAc;AACrC,QAAA,KAAA,IAAS,CAAA,GAAA,EAAM,GAAG,CAAA,MAAA,EAAS,MAAA,CAAO,IAAI,CAAA;AAAA,CAAA;AAAA,MACxC;AAAA,IACF;AAEA,IAAA,KAAA,IAAS,KAAA;AACT,IAAA,OAAO,KAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,iBAAA,GAAiB;AACf,IAAA,MAAM,UAAA,GAAa,KAAK,aAAA;AACxB,IAAA,OAAO,UAAA,CACJ,MAAA,CAAO,CAAA,CAAA,KAAK,CAAC,CAAA,CAAE,MAAM,CAAA,CACrB,GAAA,CAAI,CAAA,CAAA,KAAK,CAAA,CAAE,IAAI,CAAA;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA,EAKA,UAAA,GAAU;AACR,IAAA,IAAA,CAAK,YAAY,KAAA;AACjB,IAAA,IAAA,CAAK,MAAA,EAAQ,MAAM,sBAAsB,CAAA;AAAA,EAC3C;AAAA;AAAA;AAAA;AAAA,EAKA,OAAA,GAAO;AACL,IAAA,IAAA,CAAK,gBAAgB,KAAA;AACrB,IAAA,IAAA,CAAK,YAAY,KAAA;AACjB,IAAA,IAAA,CAAK,QAAQ,KAAA;AACb,IAAA,IAAA,CAAK,YAAY,EAAA;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA,EAKQ,MAAM,UAAA,CACZ,UAAA,EACA,OAAA,EAA0B;AAE1B,IAAA,MAAM,SAAA,GAAY,KAAK,GAAA;AAGvB,IAAA,OAAO,IAAA,CAAK,YAAA,IAAgB,IAAA,CAAK,MAAA,CAAO,kBAAA,EAAoB;AAC1D,MAAA,MAAM,IAAI,OAAA,CAAQ,CAAA,OAAA,KAAW,UAAA,CAAW,OAAA,EAAS,EAAE,CAAC,CAAA;AAAA,IACtD;AAEA,IAAA,IAAA,CAAK,YAAA,EAAA;AAEL,IAAA,IAAI;AAEF,MAAA,MAAM,MAAA,GAAS,MAAM,IAAA,CAAK,aAAA,CAAiB,YAAY,OAAO,CAAA;AAE9D,MAAA,MAAM,QAAA,GAAW,IAAA,CAAK,GAAA,EAAG,GAAK,SAAA;AAG9B,MAAA,MAAM,QAAA,GAAW,IAAA,CAAK,OAAA,CAAQ,GAAA,CAAI,UAAU,CAAA;AAC5C,MAAA,IAAI,QAAA,EAAU;AACZ,QAAA,QAAA,CAAS,MAAA,GAAS,IAAA;AAClB,QAAA,QAAA,CAAS,QAAA,GAAW,QAAA;AAAA,MACtB;AAEA,MAAA,IAAA,CAAK,OAAO,YAAA,CAAa;AAAA,QACvB,IAAA,EAAM,UAAA;AAAA,QACN,YAAA,EAAc,QAAA,EAAU,YAAA,IAAgB,EAAA;AAAA,QACxC,OAAA,EAAS,QAAA,EAAU,OAAA,IAAW,EAAA;AAAA,QAC9B,MAAA,EAAQ,IAAA;AAAA,QACR;AAAA,OACD,CAAA;AAED,MAAA,IAAA,CAAK,MAAA,EAAQ,KAAA,CAAM,CAAA,eAAA,EAAkB,UAAU,CAAA,CAAA,EAAI,EAAE,QAAA,EAAU,CAAA,EAAG,QAAQ,CAAA,EAAA,CAAA,EAAM,CAAA;AAEhF,MAAA,OAAO,MAAA;AAAA,IACT,SAAS,KAAA,EAAO;AACd,MAAA,IAAA,CAAK,MAAA,CAAO,aAAA,CAAc,KAAA,EAAgB,UAAU,CAAA;AACpD,MAAA,IAAA,CAAK,MAAA,EAAQ,KAAA,CAAM,CAAA,uBAAA,EAA0B,UAAU,IAAI,KAAK,CAAA;AAChE,MAAA,MAAM,KAAA;AAAA,IACR,CAAA;AACE,MAAA,IAAA,CAAK,YAAA,EAAA;AAAA,IACP;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKQ,MAAM,aAAA,CACZ,UAAA,EACA,OAAA,EAA0B;AAE1B,IAAA,MAAM,OAAA,GAAU,QAAQ,KAAA,IAAS,CAAA;AACjC,IAAA,MAAM,OAAA,GAAU,QAAQ,OAAA,IAAW,GAAA;AAEnC,IAAA,KAAA,IAAS,OAAA,GAAU,CAAA,EAAG,OAAA,IAAW,OAAA,EAAS,OAAA,EAAA,EAAW;AACnD,MAAA,IAAI;AAEF,QAAA,MAAM,cAAA,GAAiB,IAAI,OAAA,CAAe,CAAC,GAAG,MAAA,KAAU;AACtD,UAAA,UAAA,CAAW,MAAM,OAAO,IAAI,KAAA,CAAM,wBAAwB,UAAU,CAAA,CAAE,CAAC,CAAA,EAAG,OAAO,CAAA;AAAA,QACnF,CAAC,CAAA;AAGD,QAAA,MAAM,UAAA,GAAa,IAAA,CAAK,MAAA,CAAO,OAAA,GAC3B,CAAA,EAAG,KAAK,MAAA,CAAO,OAAO,CAAA,CAAA,EAAI,UAAU,CAAA,CAAA,GACpC,UAAA;AAGJ,QAAA,MAAM,aAAA,GAAgB;AAAA;AAAA,UAA0B;AAAA,SAAA;AAGhD,QAAA,MAAM,SAAS,MAAM,OAAA,CAAQ,KAAK,CAAC,aAAA,EAAe,cAAc,CAAC,CAAA;AAEjE,QAAA,OAAO,MAAA;AAAA,MACT,SAAS,KAAA,EAAO;AACd,QAAA,IAAI,UAAU,OAAA,EAAS;AACrB,UAAA,IAAA,CAAK,QAAQ,KAAA,CAAM,CAAA,sBAAA,EAAyB,UAAU,CAAA,UAAA,EAAa,OAAA,GAAU,CAAC,CAAA,CAAA,CAAG,CAAA;AACjF,UAAA,MAAM,IAAI,QAAQ,CAAA,OAAA,KAAW,UAAA,CAAW,SAAS,GAAA,IAAQ,OAAA,GAAU,EAAE,CAAC,CAAA;AAAA,QACxE,CAAA,MAAO;AACL,UAAA,MAAM,KAAA;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,IAAA,MAAM,IAAI,KAAA,CAAM,CAAA,4BAAA,EAA+B,OAAO,CAAA,UAAA,EAAa,UAAU,CAAA,CAAE,CAAA;AAAA,EACjF;AACD;AAKK,SAAU,kBAAA,CACd,QACA,MAAA,EAAe;AAEf,EAAA,OAAO,IAAI,YAAA,CAAa,MAAA,EAAQ,MAAM,CAAA;AACxC;AAMM,SAAU,WAAW,UAAA,EAAkB;AAC3C,EAAA,OAAO,SACL,MAAA,EACA,WAAA,EACA,UAAA,EAA8B;AAE9B,IAAA,MAAM,iBAAiB,UAAA,CAAW,KAAA;AAClC,IAAA,IAAI,YAAA,GAAe,KAAA;AACnB,IAAA,IAAI,YAAA;AAEJ,IAAA,UAAA,CAAW,KAAA,GAAQ,kBAAmB,IAAA,EAAW;AAC/C,MAAA,IAAI,CAAC,YAAA,EAAc;AAEjB,QAAA,MAAM,SAAS,qBAAA,EAAqB;AACpC,QAAA,YAAA,GAAe,MAAM,MAAA,CAAO,IAAA,CAAK,UAAU,CAAA;AAC3C,QAAA,YAAA,GAAe,IAAA;AAAA,MACjB;AAEA,MAAA,OAAO,eAAe,KAAA,CAAM,IAAA,EAAM,CAAC,YAAA,EAAc,GAAG,IAAI,CAAC,CAAA;AAAA,IAC3D,CAAA;AAEA,IAAA,OAAO,UAAA;AAAA,EACT,CAAA;AACF;AAGA,IAAI,kBAAA;SAEY,qBAAA,GAAqB;AACnC,EAAA,IAAI,CAAC,kBAAA,EAAoB;AACvB,IAAA,kBAAA,GAAqB,kBAAA,EAAkB;AAAA,EACzC;AACA,EAAA,OAAO,kBAAA;AACT;AAEM,SAAU,sBAAsB,MAAA,EAAoB;AACxD,EAAA,kBAAA,GAAqB,MAAA;AACvB;;;;;;;;"}