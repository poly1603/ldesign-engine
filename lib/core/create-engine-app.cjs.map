{"version":3,"file":"create-engine-app.cjs","sources":["../../src/core/create-engine-app.ts"],"sourcesContent":["/**\r\n * 统一的引擎应用创建函数\r\n * 提供单一入口配置和创建整个应用\r\n */\r\n\r\nimport type { Component, App as VueApp } from 'vue'\r\nimport type { Middleware } from '../types/middleware'\r\nimport type { Plugin } from '../types/plugin'\r\nimport { commonDirectives } from '../directives/directive-manager'\r\nimport { type PerformanceBudget, PerformanceBudgetManager, type PerformanceMetric } from '../performance/performance-budget'\r\nimport { type ShortcutHandler, type ShortcutOptions, ShortcutsManager } from '../shortcuts/shortcuts-manager'\r\nimport {\r\n  createQuickCacheManager,\r\n  createQuickLogger,\r\n  createQuickPerformanceManager\r\n} from '../utils/quick-setup'\r\nimport { EngineImpl } from './engine'\r\n\r\n/**\r\n * 引擎应用配置选项\r\n */\r\nexport interface EngineAppOptions {\r\n  /**\r\n   * 根组件（可选，如果不提供则只创建引擎实例）\r\n   */\r\n  rootComponent?: Component\r\n\r\n  /**\r\n   * 挂载元素（可选，提供时会自动挂载）\r\n   */\r\n  mountElement?: string | Element\r\n\r\n  /**\r\n   * 基础配置\r\n   */\r\n  config?: {\r\n    /** 应用名称 */\r\n    name?: string\r\n    /** 应用版本 */\r\n    version?: string\r\n    /** 是否开启调试模式 */\r\n    debug?: boolean\r\n    /** 应用描述 */\r\n    description?: string\r\n    /** 应用环境 */\r\n    environment?: 'development' | 'production' | 'testing'\r\n    /** 其他自定义配置 */\r\n    [key: string]: unknown\r\n  }\r\n\r\n  /**\r\n   * 功能特性开关\r\n   */\r\n  features?: {\r\n    /** 启用热重载 */\r\n    enableHotReload?: boolean\r\n    /** 启用开发工具 */\r\n    enableDevTools?: boolean\r\n    /** 启用性能监控 */\r\n    enablePerformanceMonitoring?: boolean\r\n    /** 启用错误上报 */\r\n    enableErrorReporting?: boolean\r\n    /** 启用安全防护 */\r\n    enableSecurityProtection?: boolean\r\n    /** 启用缓存 */\r\n    enableCaching?: boolean\r\n    /** 启用通知系统 */\r\n    enableNotifications?: boolean\r\n  }\r\n\r\n  /**\r\n   * 日志配置\r\n   */\r\n  logger?: {\r\n    /** 是否启用日志 */\r\n    enabled?: boolean\r\n    /** 日志级别 */\r\n    level?: 'debug' | 'info' | 'warn' | 'error'\r\n    /** 最大日志数 */\r\n    maxLogs?: number\r\n    /** 是否显示时间戳 */\r\n    showTimestamp?: boolean\r\n    /** 是否显示上下文 */\r\n    showContext?: boolean\r\n    /** 自定义日志前缀 */\r\n    prefix?: string\r\n  }\r\n\r\n  /**\r\n   * 缓存配置\r\n   */\r\n  cache?: {\r\n    /** 是否启用缓存 */\r\n    enabled?: boolean\r\n    /** 默认缓存大小 */\r\n    maxSize?: number\r\n    /** 默认TTL（毫秒） */\r\n    defaultTTL?: number\r\n    /** 清理间隔（毫秒） */\r\n    cleanupInterval?: number\r\n    /** 是否启用内存限制 */\r\n    enableMemoryLimit?: boolean\r\n    /** 内存限制（MB） */\r\n    memoryLimit?: number\r\n  }\r\n\r\n  /**\r\n   * 性能监控配置\r\n   */\r\n  performance?: {\r\n    /** 是否启用性能监控 */\r\n    enabled?: boolean\r\n    /** 采样率 (0-1) */\r\n    sampleRate?: number\r\n    /** 是否监控内存 */\r\n    monitorMemory?: boolean\r\n    /** 是否监控网络 */\r\n    monitorNetwork?: boolean\r\n    /** 是否监控组件性能 */\r\n    monitorComponents?: boolean\r\n    /** 报告间隔（毫秒） */\r\n    reportInterval?: number\r\n    /** 性能预算 */\r\n    budget?: PerformanceBudget\r\n    /** 预算超出回调 */\r\n    onBudgetExceeded?: (metric: PerformanceMetric) => void\r\n  }\r\n\r\n  /**\r\n   * 插件列表\r\n   */\r\n  plugins?: Plugin[]\r\n\r\n  /**\r\n   * 中间件列表\r\n   */\r\n  middleware?: Middleware[]\r\n\r\n  /**\r\n   * Vue应用配置函数\r\n   * 用于在挂载前配置Vue应用实例\r\n   */\r\n  setupApp?: (app: VueApp) => void | Promise<void>\r\n\r\n  /**\r\n   * 引擎初始化完成回调\r\n   */\r\n  onReady?: (engine: EngineImpl) => void | Promise<void>\r\n\r\n  /**\r\n   * 应用挂载完成回调\r\n   */\r\n  onMounted?: (engine: EngineImpl) => void | Promise<void>\r\n\r\n  /**\r\n   * 错误处理\r\n   */\r\n  onError?: (error: Error, context: string) => void\r\n\r\n  /**\r\n   * 快捷键配置\r\n   */\r\n  shortcuts?: {\r\n    /** 快捷键映射 */\r\n    keys?: Record<string, ShortcutHandler | [ShortcutHandler, ShortcutOptions]>\r\n    /** 作用域快捷键 */\r\n    scopes?: Record<string, Record<string, ShortcutHandler>>\r\n    /** 冲突处理模式 */\r\n    conflictMode?: 'error' | 'warn' | 'override'\r\n    /** 是否启用 */\r\n    enabled?: boolean\r\n  }\r\n}\r\n\r\n/**\r\n * 创建引擎应用\r\n *\r\n * 这是引擎的唯一入口函数，通过配置项控制所有功能\r\n *\r\n * @param options 引擎应用配置选项\r\n * @returns 引擎实例\r\n *\r\n * @example\r\n * ```typescript\r\n * // 最简单的使用\r\n * const engine = createEngineApp({\r\n *   rootComponent: App,\r\n *   mountElement: '#app'\r\n * })\r\n *\r\n * // 完整配置示例\r\n * const engine = createEngineApp({\r\n *   rootComponent: App,\r\n *   mountElement: '#app',\r\n *   config: {\r\n *     name: 'My App',\r\n *     version: '1.0.0',\r\n *     debug: true\r\n *   },\r\n *   features: {\r\n *     enableHotReload: true,\r\n *     enablePerformanceMonitoring: true,\r\n *     enableCaching: true\r\n *   },\r\n *   logger: {\r\n *     enabled: true,\r\n *     level: 'debug',\r\n *     maxLogs: 100\r\n *   },\r\n *   cache: {\r\n *     enabled: true,\r\n *     maxSize: 100,\r\n *     defaultTTL: 300000\r\n *   },\r\n *   performance: {\r\n *     enabled: true,\r\n *     sampleRate: 0.5,\r\n *     monitorMemory: true\r\n *   },\r\n *   plugins: [routerPlugin, storePlugin],\r\n *   middleware: [authMiddleware],\r\n *   setupApp: async (app) => {\r\n *     // 自定义Vue应用配置\r\n *     app.config.performance = true\r\n *   },\r\n *   onReady: async (engine) => {\r\n *     \r\n *   },\r\n *   onMounted: async (engine) => {\r\n *     \r\n *   },\r\n *   onError: (error, context) => {\r\n *     console.error(`Error in ${context}:`, error)\r\n *   }\r\n * })\r\n * ```\r\n */\r\nexport async function createEngineApp(options: EngineAppOptions = {}): Promise<EngineImpl> {\r\n  const {\r\n    rootComponent,\r\n    mountElement,\r\n    config = {},\r\n    features = {},\r\n    logger: loggerOptions = {},\r\n    cache: cacheOptions = {},\r\n    performance: performanceOptions = {},\r\n    plugins = [],\r\n    middleware = [],\r\n    shortcuts: shortcutsOptions = {},\r\n    setupApp,\r\n    onReady,\r\n    onMounted,\r\n    onError = (error, context) => console.error(`[EngineApp] Error in ${context}:`, error)\r\n  } = options\r\n\r\n  try {\r\n    // 1. 准备引擎配置\r\n    const engineConfig = {\r\n      app: {\r\n        name: config.name || 'LDesign App',\r\n        version: config.version || '1.0.0',\r\n        description: config.description || '',\r\n        environment: config.environment || 'development'\r\n      },\r\n      debug: config.debug ?? false,\r\n      features: {\r\n        enableHotReload: features.enableHotReload ?? false,\r\n        enableDevTools: features.enableDevTools ?? false,\r\n        enablePerformanceMonitoring: features.enablePerformanceMonitoring ?? false,\r\n        enableErrorReporting: features.enableErrorReporting ?? true,\r\n        enableSecurityProtection: features.enableSecurityProtection ?? false,\r\n        enableCaching: features.enableCaching ?? true,\r\n        enableNotifications: features.enableNotifications ?? false\r\n      },\r\n      ...config // 其他自定义配置\r\n    }\r\n\r\n    // 2. 创建引擎实例\r\n    const engine = new EngineImpl(engineConfig)\r\n\r\n    // 3. 配置日志系统（如果启用）\r\n    if (loggerOptions.enabled !== false) {\r\n      const logger = createQuickLogger({\r\n        level: loggerOptions.level || (config.debug ? 'debug' : 'warn'),\r\n        maxLogs: loggerOptions.maxLogs || 100,\r\n        showTimestamp: loggerOptions.showTimestamp ?? false,\r\n        showContext: loggerOptions.showContext ?? false,\r\n        prefix: loggerOptions.prefix\r\n      })\r\n\r\n      // 替换默认日志器\r\n      Object.defineProperty(engine, 'logger', {\r\n        value: logger,\r\n        writable: false,\r\n        configurable: false\r\n      })\r\n    }\r\n\r\n    // 4. 配置缓存系统（如果启用）\r\n    if (cacheOptions.enabled !== false && features.enableCaching !== false) {\r\n      const cacheManager = createQuickCacheManager({\r\n        maxSize: cacheOptions.maxSize || 100,\r\n        defaultTTL: cacheOptions.defaultTTL || 300000, // 5分钟\r\n        cleanupInterval: cacheOptions.cleanupInterval || 60000, // 1分钟\r\n        enableMemoryLimit: cacheOptions.enableMemoryLimit ?? true,\r\n        memoryLimit: cacheOptions.memoryLimit || 10\r\n      })\r\n\r\n      // 将缓存管理器注入到引擎中\r\n      Object.defineProperty(engine, 'cache', {\r\n        value: cacheManager,\r\n        writable: false,\r\n        configurable: false\r\n      })\r\n    }\r\n\r\n    // 5. 配置性能监控（如果启用）\r\n    if (performanceOptions.enabled === true || features.enablePerformanceMonitoring === true) {\r\n      const performanceManager = createQuickPerformanceManager({\r\n        sampleRate: performanceOptions.sampleRate || 1,\r\n        monitorMemory: performanceOptions.monitorMemory ?? false,\r\n        monitorNetwork: performanceOptions.monitorNetwork ?? false,\r\n        monitorComponents: performanceOptions.monitorComponents ?? false,\r\n        reportInterval: performanceOptions.reportInterval || 5000\r\n      })\r\n\r\n      // 将性能管理器注入到引擎中\r\n      Object.defineProperty(engine, 'performance', {\r\n        value: performanceManager,\r\n        writable: false,\r\n        configurable: false\r\n      })\r\n    }\r\n\r\n    // 5.1 配置性能预算（如果提供）\r\n    if (performanceOptions.budget) {\r\n      const budgetManager = new PerformanceBudgetManager(\r\n        performanceOptions.budget,\r\n        performanceOptions.onBudgetExceeded || ((metric) => {\r\n          console.warn(`[性能预算超标] ${metric.name}: ${metric.value}${metric.unit} > ${metric.limit}${metric.unit} (${metric.percentage.toFixed(1)}%)`)\r\n        })\r\n      )\r\n\r\n      // 将预算管理器添加到引擎\r\n      Object.defineProperty(engine, 'performanceBudget', {\r\n        value: budgetManager,\r\n        writable: false,\r\n        configurable: false\r\n      })\r\n\r\n      // 自动开始监控\r\n      if (typeof window !== 'undefined') {\r\n        window.addEventListener('load', () => {\r\n          budgetManager.startMonitoring()\r\n        })\r\n      }\r\n    }\r\n\r\n    // 6. 注册内置指令\r\n    engine.directives.registerBatch(commonDirectives)\r\n\r\n    // 6.1 配置快捷键管理（如果提供）\r\n    if (shortcutsOptions.keys || shortcutsOptions.scopes) {\r\n      const shortcutsManager = new ShortcutsManager()\r\n\r\n      // 设置冲突模式\r\n      if (shortcutsOptions.conflictMode) {\r\n        shortcutsManager.setConflictMode(shortcutsOptions.conflictMode)\r\n      }\r\n\r\n      // 注册全局快捷键\r\n      if (shortcutsOptions.keys) {\r\n        shortcutsManager.registerBatch(shortcutsOptions.keys)\r\n      }\r\n\r\n      // 注册作用域快捷键\r\n      if (shortcutsOptions.scopes) {\r\n        Object.entries(shortcutsOptions.scopes).forEach(([scopeName, shortcuts]) => {\r\n          shortcutsManager.registerScope(scopeName, shortcuts)\r\n        })\r\n      }\r\n\r\n      // 设置启用状态\r\n      if (shortcutsOptions.enabled !== undefined) {\r\n        shortcutsManager.setManagerEnabled(shortcutsOptions.enabled)\r\n      }\r\n\r\n      // 将快捷键管理器添加到引擎\r\n      Object.defineProperty(engine, 'shortcuts', {\r\n        value: shortcutsManager,\r\n        writable: false,\r\n        configurable: false\r\n      })\r\n    }\r\n\r\n    // 7. 注册中间件\r\n    for (const m of middleware) {\r\n      try {\r\n        engine.middleware.use(m)\r\n      } catch (error) {\r\n        onError(error as Error, `middleware registration: ${m.name}`)\r\n      }\r\n    }\r\n\r\n    // 8. 注册插件\r\n    for (const plugin of plugins) {\r\n      try {\r\n        await engine.use(plugin)\r\n      } catch (error) {\r\n        onError(error as Error, `plugin installation: ${plugin.name}`)\r\n      }\r\n    }\r\n\r\n    // 9. 触发就绪回调\r\n    if (onReady) {\r\n      try {\r\n        await onReady(engine)\r\n      } catch (error) {\r\n        onError(error as Error, 'onReady callback')\r\n      }\r\n    }\r\n\r\n    // 10. 创建和挂载Vue应用（如果提供了根组件）\r\n    if (rootComponent) {\r\n      try {\r\n        // 创建Vue应用\r\n        const app = engine.createApp(rootComponent)\r\n\r\n        // 执行自定义应用配置\r\n        if (setupApp) {\r\n          await setupApp(app)\r\n        }\r\n\r\n        // 自动挂载（如果提供了挂载元素）\r\n        if (mountElement) {\r\n          await engine.mount(mountElement)\r\n\r\n          // 触发挂载完成回调\r\n          if (onMounted) {\r\n            try {\r\n              await onMounted(engine)\r\n            } catch (error) {\r\n              onError(error as Error, 'onMounted callback')\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        onError(error as Error, 'app creation/mounting')\r\n        throw error\r\n      }\r\n    }\r\n\r\n    // 11. 返回引擎实例\r\n    return engine\n  } catch (error) {\r\n    onError(error as Error, 'engine initialization')\r\n    throw error\r\n  }\r\n}\r\n\r\n/**\r\n * 创建引擎应用的简化版本\r\n * 自动挂载到 #app\r\n *\r\n * @param rootComponent 根组件\r\n * @param options 配置选项（不包括rootComponent和mountElement）\r\n * @returns 引擎实例\r\n *\r\n * @example\r\n * ```typescript\r\n * const engine = await createAndMountEngineApp(App, {\r\n *   config: { debug: true },\r\n *   plugins: [routerPlugin]\r\n * })\r\n * ```\r\n */\r\nexport async function createAndMountEngineApp(\r\n  rootComponent: Component,\r\n  options: Omit<EngineAppOptions, 'rootComponent' | 'mountElement'> = {}\r\n): Promise<EngineImpl> {\r\n  return createEngineApp({\r\n    ...options,\r\n    rootComponent,\r\n    mountElement: '#app'\r\n  })\r\n}\n"],"names":["engine","EngineImpl","createQuickLogger","createQuickCacheManager","createQuickPerformanceManager","PerformanceBudgetManager","commonDirectives","shortcutsManager","ShortcutsManager"],"mappings":"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"}