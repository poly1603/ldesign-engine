{"version":3,"file":"shortcuts-manager.cjs","sources":["../../src/shortcuts/shortcuts-manager.ts"],"sourcesContent":["/**\r\n * 快捷键管理器\r\n * 统一管理应用中的所有快捷键\r\n */\r\n\r\nexport type ShortcutKey = string\r\nexport type ShortcutHandler = (event: KeyboardEvent) => void | boolean\r\nexport type ShortcutScope = string\r\n\r\nexport interface ShortcutOptions {\r\n  /** 快捷键描述 */\r\n  description?: string\r\n  /** 作用域，默认为 'global' */\r\n  scope?: ShortcutScope\r\n  /** 是否阻止默认行为 */\r\n  preventDefault?: boolean\r\n  /** 是否阻止事件冒泡 */\r\n  stopPropagation?: boolean\r\n  /** 是否在输入框中也触发 */\r\n  allowInInput?: boolean\r\n  /** 是否启用 */\r\n  enabled?: boolean\r\n  /** 优先级，数字越大优先级越高 */\r\n  priority?: number\r\n}\r\n\r\nexport interface Shortcut {\r\n  key: ShortcutKey\r\n  handler: ShortcutHandler\r\n  options: Required<ShortcutOptions>\r\n}\r\n\r\nexport interface ShortcutGroup {\r\n  name: string\r\n  description?: string\r\n  shortcuts: Map<ShortcutKey, Shortcut>\r\n}\r\n\r\n/**\r\n * 解析快捷键字符串\r\n */\r\nfunction parseShortcut(key: string): {\r\n  ctrl: boolean\r\n  shift: boolean\r\n  alt: boolean\r\n  meta: boolean\r\n  key: string\r\n} {\r\n  const parts = key.toLowerCase().split('+').map(p => p.trim())\r\n\r\n  return {\r\n    ctrl: parts.includes('ctrl') || parts.includes('control'),\r\n    shift: parts.includes('shift'),\r\n    alt: parts.includes('alt'),\r\n    meta: parts.includes('meta') || parts.includes('cmd') || parts.includes('command'),\r\n    key: parts[parts.length - 1] // 最后一部分是实际的键\r\n  }\r\n}\r\n\r\n/**\r\n * 检查键盘事件是否匹配快捷键\r\n */\r\nfunction matchShortcut(event: KeyboardEvent, shortcut: string): boolean {\r\n  const parsed = parseShortcut(shortcut)\r\n  const eventKey = event.key.toLowerCase()\r\n\r\n  // 检查修饰键\r\n  if (parsed.ctrl !== (event.ctrlKey || event.metaKey)) return false\r\n  if (parsed.shift !== event.shiftKey) return false\r\n  if (parsed.alt !== event.altKey) return false\r\n  if (parsed.meta !== event.metaKey) return false\r\n\r\n  // 检查主键\r\n  // 处理特殊键名\r\n  const keyMap: Record<string, string[]> = {\r\n    'esc': ['escape', 'esc'],\r\n    'escape': ['escape', 'esc'],\r\n    'enter': ['enter', 'return'],\r\n    'return': ['enter', 'return'],\r\n    'space': [' ', 'space', 'spacebar'],\r\n    'spacebar': [' ', 'space', 'spacebar'],\r\n    'up': ['arrowup', 'up'],\r\n    'down': ['arrowdown', 'down'],\r\n    'left': ['arrowleft', 'left'],\r\n    'right': ['arrowright', 'right'],\r\n    'del': ['delete', 'del'],\r\n    'delete': ['delete', 'del'],\r\n    'backspace': ['backspace'],\r\n    'tab': ['tab'],\r\n    '/': ['/', 'slash'],\r\n    '\\\\': ['\\\\', 'backslash'],\r\n    '?': ['?', 'question'],\r\n    '.': ['.', 'period'],\r\n    ',': [',', 'comma'],\r\n  }\r\n\r\n  const normalizedKey = parsed.key\r\n  const possibleKeys = keyMap[normalizedKey] || [normalizedKey]\r\n\r\n  return possibleKeys.includes(eventKey)\r\n}\r\n\r\n/**\r\n * 检查是否在输入元素中\r\n */\r\nfunction isInInput(event: KeyboardEvent): boolean {\r\n  const target = event.target as HTMLElement\r\n  if (!target) return false\r\n\r\n  const tagName = target.tagName.toLowerCase()\r\n  const isContentEditable = target.isContentEditable\r\n  const isInput = tagName === 'input' || tagName === 'textarea' || tagName === 'select'\r\n\r\n  return isInput || isContentEditable\r\n}\r\n\r\nexport class ShortcutsManager {\r\n  private shortcuts = new Map<ShortcutKey, Shortcut>()\r\n  private scopes = new Map<ShortcutScope, ShortcutGroup>()\r\n  private activeScopes = new Set<ShortcutScope>(['global'])\r\n  private enabled = true\r\n  private listener?: (event: KeyboardEvent) => void\r\n  private conflictMode: 'error' | 'warn' | 'override' = 'warn'\r\n\r\n  constructor() {\r\n    this.init()\r\n  }\r\n\r\n  /**\r\n   * 初始化\r\n   */\r\n  private init(): void {\r\n    this.listener = (event: KeyboardEvent) => this.handleKeyPress(event)\r\n\r\n    if (typeof window !== 'undefined') {\r\n      window.addEventListener('keydown', this.listener)\r\n    }\r\n\r\n    // 创建默认作用域\r\n    this.scopes.set('global', {\r\n      name: 'global',\r\n      description: '全局快捷键',\r\n      shortcuts: new Map()\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 注册快捷键\r\n   */\r\n  register(key: ShortcutKey, handler: ShortcutHandler, options?: ShortcutOptions): void {\r\n    const defaultOptions: Required<ShortcutOptions> = {\r\n      description: '',\r\n      scope: 'global',\r\n      preventDefault: true,\r\n      stopPropagation: false,\r\n      allowInInput: false,\r\n      enabled: true,\r\n      priority: 0\r\n    }\r\n\r\n    const mergedOptions = { ...defaultOptions, ...options }\r\n    const scopeName = mergedOptions.scope\r\n\r\n    // 检查冲突\r\n    if (this.checkConflict(key, scopeName)) {\r\n      if (this.conflictMode === 'error') {\r\n        throw new Error(`快捷键 ${key} 在作用域 ${scopeName} 中已存在`)\r\n      } else if (this.conflictMode === 'warn') {\r\n        console.warn(`快捷键 ${key} 在作用域 ${scopeName} 中已存在，将被覆盖`)\r\n      }\r\n    }\r\n\r\n    const shortcut: Shortcut = {\r\n      key,\r\n      handler,\r\n      options: mergedOptions\r\n    }\r\n\r\n    // 添加到全局映射\r\n    const fullKey = `${scopeName}:${key}`\r\n    this.shortcuts.set(fullKey, shortcut)\r\n\r\n    // 添加到作用域组\r\n    if (!this.scopes.has(scopeName)) {\r\n      this.scopes.set(scopeName, {\r\n        name: scopeName,\r\n        shortcuts: new Map()\r\n      })\r\n    }\r\n\r\n    const scope = this.scopes.get(scopeName)\r\n    if (scope) {\r\n      scope.shortcuts.set(key, shortcut)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 批量注册快捷键\r\n   */\r\n  registerBatch(shortcuts: Record<ShortcutKey, ShortcutHandler | [ShortcutHandler, ShortcutOptions]>): void {\r\n    Object.entries(shortcuts).forEach(([key, value]) => {\r\n      if (typeof value === 'function') {\r\n        this.register(key, value)\r\n      } else {\r\n        const [handler, options] = value\r\n        this.register(key, handler, options)\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 注册作用域快捷键\r\n   */\r\n  registerScope(scopeName: ShortcutScope, shortcuts: Record<ShortcutKey, ShortcutHandler>): void {\r\n    Object.entries(shortcuts).forEach(([key, handler]) => {\r\n      this.register(key, handler, { scope: scopeName })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 注销快捷键\r\n   */\r\n  unregister(key: ShortcutKey, scope: ShortcutScope = 'global'): boolean {\r\n    const fullKey = `${scope}:${key}`\r\n    const deleted = this.shortcuts.delete(fullKey)\r\n\r\n    const scopeGroup = this.scopes.get(scope)\r\n    if (scopeGroup) {\r\n      scopeGroup.shortcuts.delete(key)\r\n    }\r\n\r\n    return deleted\r\n  }\r\n\r\n  /**\r\n   * 清空作用域的所有快捷键\r\n   */\r\n  clearScope(scope: ShortcutScope): void {\r\n    const scopeGroup = this.scopes.get(scope)\r\n    if (scopeGroup) {\r\n      scopeGroup.shortcuts.forEach(shortcut => {\r\n        const fullKey = `${scope}:${shortcut.key}`\r\n        this.shortcuts.delete(fullKey)\r\n      })\r\n      scopeGroup.shortcuts.clear()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 启用/禁用快捷键\r\n   */\r\n  setEnabled(key: ShortcutKey, enabled: boolean, scope: ShortcutScope = 'global'): void {\r\n    const fullKey = `${scope}:${key}`\r\n    const shortcut = this.shortcuts.get(fullKey)\r\n    if (shortcut) {\r\n      shortcut.options.enabled = enabled\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 激活作用域\r\n   */\r\n  activateScope(scope: ShortcutScope): void {\r\n    this.activeScopes.add(scope)\r\n  }\r\n\r\n  /**\r\n   * 停用作用域\r\n   */\r\n  deactivateScope(scope: ShortcutScope): void {\r\n    if (scope !== 'global') {\r\n      this.activeScopes.delete(scope)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 设置独占作用域（只有该作用域生效）\r\n   */\r\n  setExclusiveScope(scope: ShortcutScope): void {\r\n    this.activeScopes.clear()\r\n    this.activeScopes.add(scope)\r\n    if (scope !== 'global') {\r\n      this.activeScopes.add('global') // 全局作用域始终保持\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 重置作用域\r\n   */\r\n  resetScopes(): void {\r\n    this.activeScopes.clear()\r\n    this.activeScopes.add('global')\r\n  }\r\n\r\n  /**\r\n   * 检查快捷键冲突\r\n   */\r\n  checkConflict(key: ShortcutKey, scope: ShortcutScope = 'global'): boolean {\r\n    const fullKey = `${scope}:${key}`\r\n    return this.shortcuts.has(fullKey)\r\n  }\r\n\r\n  /**\r\n   * 获取所有冲突的快捷键\r\n   */\r\n  getConflicts(): Map<ShortcutKey, ShortcutScope[]> {\r\n    const conflicts = new Map<ShortcutKey, ShortcutScope[]>()\r\n\r\n    this.scopes.forEach((scopeGroup, scopeName) => {\r\n      scopeGroup.shortcuts.forEach(shortcut => {\r\n        if (!conflicts.has(shortcut.key)) {\r\n          conflicts.set(shortcut.key, [])\r\n        }\r\n        const scopes = conflicts.get(shortcut.key)\r\n        scopes?.push(scopeName)\r\n      })\r\n    })\r\n\r\n    // 过滤出有冲突的（出现在多个作用域）\r\n    const realConflicts = new Map<ShortcutKey, ShortcutScope[]>()\r\n    conflicts.forEach((scopes, key) => {\r\n      if (scopes.length > 1) {\r\n        realConflicts.set(key, scopes)\r\n      }\r\n    })\r\n\r\n    return realConflicts\r\n  }\r\n\r\n  /**\r\n   * 处理按键事件\r\n   */\r\n  private handleKeyPress(event: KeyboardEvent): void {\r\n    if (!this.enabled) return\r\n\r\n    // 收集所有匹配的快捷键\r\n    const matches: Shortcut[] = []\r\n\r\n    this.activeScopes.forEach(scope => {\r\n      this.shortcuts.forEach((shortcut, fullKey) => {\r\n        if (!fullKey.startsWith(`${scope}:`)) return\r\n        if (!shortcut.options.enabled) return\r\n        if (!shortcut.options.allowInInput && isInInput(event)) return\r\n\r\n        if (matchShortcut(event, shortcut.key)) {\r\n          matches.push(shortcut)\r\n        }\r\n      })\r\n    })\r\n\r\n    // 按优先级排序\r\n    matches.sort((a, b) => b.options.priority - a.options.priority)\r\n\r\n    // 执行最高优先级的快捷键\r\n    if (matches.length > 0) {\r\n      const shortcut = matches[0]\r\n\r\n      if (shortcut.options.preventDefault) {\r\n        event.preventDefault()\r\n      }\r\n\r\n      if (shortcut.options.stopPropagation) {\r\n        event.stopPropagation()\r\n      }\r\n\r\n      const result = shortcut.handler(event)\r\n\r\n      // 如果处理器返回 false，继续传播事件\r\n      if (result === false) {\r\n        // 继续传播\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 设置冲突处理模式\r\n   */\r\n  setConflictMode(mode: 'error' | 'warn' | 'override'): void {\r\n    this.conflictMode = mode\r\n  }\r\n\r\n  /**\r\n   * 启用/禁用管理器\r\n   */\r\n  setManagerEnabled(enabled: boolean): void {\r\n    this.enabled = enabled\r\n  }\r\n\r\n  /**\r\n   * 获取快捷键列表\r\n   */\r\n  getShortcuts(scope?: ShortcutScope): Shortcut[] {\r\n    if (scope) {\r\n      const scopeGroup = this.scopes.get(scope)\r\n      return scopeGroup ? Array.from(scopeGroup.shortcuts.values()) : []\r\n    }\r\n\r\n    return Array.from(this.shortcuts.values())\r\n  }\r\n\r\n  /**\r\n   * 获取快捷键描述（用于显示帮助）\r\n   */\r\n  getShortcutHelp(): Map<ShortcutScope, Array<{ key: string; description: string }>> {\r\n    const help = new Map<ShortcutScope, Array<{ key: string; description: string }>>()\r\n\r\n    this.scopes.forEach((scopeGroup, scopeName) => {\r\n      const shortcuts: Array<{ key: string; description: string }> = []\r\n\r\n      scopeGroup.shortcuts.forEach(shortcut => {\r\n        if (shortcut.options.description) {\r\n          shortcuts.push({\r\n            key: shortcut.key,\r\n            description: shortcut.options.description\r\n          })\r\n        }\r\n      })\r\n\r\n      if (shortcuts.length > 0) {\r\n        help.set(scopeName, shortcuts)\r\n      }\r\n    })\r\n\r\n    return help\r\n  }\r\n\r\n  /**\r\n   * 导出配置\r\n   */\r\n  export(): {\r\n    shortcuts: Array<{\r\n      key: string\r\n      scope: string\r\n      description: string\r\n      enabled: boolean\r\n    }>\r\n    activeScopes: string[]\r\n  } {\r\n    const shortcuts: Array<{\r\n      key: string\r\n      scope: string\r\n      description: string\r\n      enabled: boolean\r\n    }> = []\r\n\r\n    this.shortcuts.forEach((shortcut, fullKey) => {\r\n      const [scope] = fullKey.split(':')\r\n      shortcuts.push({\r\n        key: shortcut.key,\r\n        scope,\r\n        description: shortcut.options.description,\r\n        enabled: shortcut.options.enabled\r\n      })\r\n    })\r\n\r\n    return {\r\n      shortcuts,\r\n      activeScopes: Array.from(this.activeScopes)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 销毁\r\n   */\r\n  destroy(): void {\r\n    if (this.listener && typeof window !== 'undefined') {\r\n      window.removeEventListener('keydown', this.listener)\r\n    }\r\n\r\n    this.shortcuts.clear()\r\n    this.scopes.clear()\r\n    this.activeScopes.clear()\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}