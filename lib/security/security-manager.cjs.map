{"version":3,"file":"security-manager.cjs","sources":["../../src/security/security-manager.ts"],"sourcesContent":["import type { Engine } from '../types'\r\n\r\n// 安全策略配置\r\nexport interface SecurityConfig {\r\n  xss?: {\r\n    enabled?: boolean\r\n    allowedTags?: string[]\r\n    allowedAttributes?: Record<string, string[]>\r\n    stripIgnoreTag?: boolean\r\n  }\r\n  csrf?: {\r\n    enabled?: boolean\r\n    tokenName?: string\r\n    headerName?: string\r\n    cookieName?: string\r\n    sameSite?: 'strict' | 'lax' | 'none'\r\n  }\r\n  csp?: {\r\n    enabled?: boolean\r\n    directives?: Record<string, string[]>\r\n    reportOnly?: boolean\r\n    reportUri?: string\r\n  }\r\n  clickjacking?: {\r\n    enabled?: boolean\r\n    policy?: 'deny' | 'sameorigin' | 'allow-from'\r\n    allowFrom?: string\r\n  }\r\n  https?: {\r\n    enabled?: boolean\r\n    hsts?: {\r\n      maxAge?: number\r\n      includeSubDomains?: boolean\r\n      preload?: boolean\r\n    }\r\n  }\r\n}\r\n\r\n// XSS防护结果\r\nexport interface XSSResult {\r\n  safe: boolean\r\n  sanitized: string\r\n  threats: string[]\r\n}\r\n\r\n// CSRF令牌信息\r\nexport interface CSRFToken {\r\n  token: string\r\n  timestamp: number\r\n  expires: number\r\n}\r\n\r\n// 安全事件类型\r\nexport enum SecurityEventType {\r\n  XSS_DETECTED = 'xss_detected',\r\n  CSRF_ATTACK = 'csrf_attack',\r\n  CSP_VIOLATION = 'csp_violation',\r\n  CLICKJACKING_ATTEMPT = 'clickjacking_attempt',\r\n  INSECURE_REQUEST = 'insecure_request',\r\n}\r\n\r\n// 安全事件信息\r\nexport interface SecurityEvent {\r\n  type: SecurityEventType\r\n  message: string\r\n  details: unknown\r\n  timestamp: number\r\n  userAgent?: string\r\n  ip?: string\r\n  url?: string\r\n}\r\n\r\n// 安全管理器接口\r\nexport interface SecurityManager {\r\n  // XSS防护\r\n  sanitizeHTML: (html: string) => XSSResult\r\n  sanitize: (input: string) => string\r\n  validateInput: (input: string, type?: 'html' | 'text' | 'url') => boolean\r\n\r\n  // CSRF防护\r\n  generateCSRFToken: () => CSRFToken\r\n  validateCSRFToken: (token: string) => boolean\r\n  getCSRFToken: () => string | null\r\n\r\n  // CSP管理\r\n  generateCSPHeader: () => string\r\n  reportCSPViolation: (violation: unknown) => void\r\n\r\n  // 安全头设置\r\n  getSecurityHeaders: () => Record<string, string>\r\n\r\n  // 事件处理\r\n  onSecurityEvent: (callback: (event: SecurityEvent) => void) => void\r\n  reportSecurityEvent: (event: SecurityEvent) => void\r\n\r\n  // 配置管理\r\n  updateConfig: (config: Partial<SecurityConfig>) => void\r\n  getConfig: () => SecurityConfig\r\n}\r\n\r\n// XSS防护实现\r\nclass XSSProtector {\r\n  private allowedTags: Set<string>\r\n  private allowedAttributes: Map<string, Set<string>>\r\n  private stripIgnoreTag: boolean\r\n\r\n  constructor(config: SecurityConfig['xss'] = {}) {\r\n    this.allowedTags = new Set(\r\n      config.allowedTags || [\r\n        'p',\r\n        'br',\r\n        'strong',\r\n        'em',\r\n        'u',\r\n        'i',\r\n        'b',\r\n        'h1',\r\n        'h2',\r\n        'h3',\r\n        'h4',\r\n        'h5',\r\n        'h6',\r\n        'ul',\r\n        'ol',\r\n        'li',\r\n        'blockquote',\r\n        'code',\r\n        'pre',\r\n      ]\r\n    )\r\n\r\n    this.allowedAttributes = new Map()\r\n    const attrs = config.allowedAttributes || {\r\n      a: ['href', 'title'],\r\n      img: ['src', 'alt', 'title', 'width', 'height'],\r\n      blockquote: ['cite'],\r\n    }\r\n\r\n    for (const [tag, attrList] of Object.entries(attrs)) {\r\n      this.allowedAttributes.set(tag, new Set(attrList))\r\n    }\r\n\r\n    this.stripIgnoreTag = config.stripIgnoreTag ?? true\r\n  }\r\n\r\n  sanitize(html: string): XSSResult {\r\n    const threats: string[] = []\r\n    let sanitized = html\r\n\r\n    // 检测和移除脚本标签\r\n    const scriptRegex = /<script[^>]*>[\\s\\S]*?<\\/script>/gi\r\n    const scripts = html.match(scriptRegex)\r\n    if (scripts) {\r\n      threats.push('Script tags detected')\r\n      sanitized = sanitized.replace(scriptRegex, '')\r\n    }\r\n\r\n    // 检测和移除事件处理器\r\n    const eventRegex = /\\s*on\\w+\\s*=\\s*[\"'][^\"']*[\"']/gi\r\n    const events = html.match(eventRegex)\r\n    if (events) {\r\n      threats.push('Event handlers detected')\r\n      sanitized = sanitized.replace(eventRegex, '')\r\n    }\r\n\r\n    // 检测和移除javascript:协议\r\n    const jsProtocolRegex = /javascript\\s*:/gi\r\n    if (jsProtocolRegex.test(html)) {\r\n      threats.push('JavaScript protocol detected')\r\n      sanitized = sanitized.replace(jsProtocolRegex, '')\r\n    }\r\n\r\n    // 检测和移除data:协议（除了图片）\r\n    const dataProtocolRegex = /data\\s*:(?!image\\/)\\w+/giu\r\n    if (dataProtocolRegex.test(html)) {\r\n      threats.push('Suspicious data protocol detected')\r\n      sanitized = sanitized.replace(dataProtocolRegex, '')\r\n    }\r\n\r\n    // 移除不允许的标签\r\n    sanitized = this.filterTags(sanitized, threats)\r\n\r\n    // 移除不允许的属性\r\n    sanitized = this.filterAttributes(sanitized, threats)\r\n\r\n    return {\r\n      safe: threats.length === 0,\r\n      sanitized,\r\n      threats,\r\n    }\r\n  }\r\n\r\n  private filterTags(html: string, threats: string[]): string {\r\n    // 匹配完整的标签，包括自闭合标签和开闭标签对\r\n    // eslint-disable-next-line regexp/no-super-linear-backtracking, regexp/optimal-quantifier-concatenation\r\n    const tagRegex = /<\\/?([a-z][a-z0-9]*)[^>]*>/giu\r\n\r\n    return html.replace(tagRegex, (match, tagName) => {\r\n      const tag = tagName.toLowerCase()\r\n\r\n      if (!this.allowedTags.has(tag)) {\r\n        threats.push(`Disallowed tag: ${tag}`)\r\n        return this.stripIgnoreTag\r\n          ? ''\r\n          : match.replace(/</g, '&lt;').replace(/>/g, '&gt;')\r\n      }\r\n\r\n      return match\r\n    })\r\n  }\r\n\r\n  private filterAttributes(html: string, threats: string[]): string {\r\n    // eslint-disable-next-line regexp/no-super-linear-backtracking, regexp/optimal-quantifier-concatenation\r\n    const tagRegex = /<([a-z][a-z0-9]*)[^>]*>/giu\r\n\r\n    return html.replace(tagRegex, (match, tagName) => {\r\n      const tag = tagName.toLowerCase()\r\n      const allowedAttrs = this.allowedAttributes.get(tag) || new Set()\r\n\r\n      // 提取属性部分 - 从标签名后开始到 '>' 之前\r\n      const tagNameEndIndex = match.indexOf(tagName) + tagName.length\r\n      const attributesStr = match.substring(tagNameEndIndex, match.length - 1)\r\n\r\n      if (!attributesStr || !attributesStr.trim()) {\r\n        return `<${tag}>`\r\n      }\r\n\r\n      const attrRegex = /\\s+([a-z][a-z0-9-]*)\\s*=\\s*[\"']([^\"']*)[\"']/giu\r\n      let filteredAttributes = ''\r\n      let attrExecMatch\r\n\r\n      // eslint-disable-next-line no-cond-assign\r\n      while ((attrExecMatch = attrRegex.exec(attributesStr)) !== null) {\r\n        const [, attrName, attrValue] = attrExecMatch\r\n        const attr = attrName.toLowerCase()\r\n\r\n        if (allowedAttrs.has(attr)) {\r\n          // 验证属性值\r\n          if (this.isValidAttributeValue(attr, attrValue)) {\r\n            filteredAttributes += ` ${attrName}=\"${attrValue}\"`\r\n          } else {\r\n            threats.push(`Invalid attribute value: ${attr}=\"${attrValue}\"`)\r\n          }\r\n        } else {\r\n          threats.push(`Disallowed attribute: ${attr}`)\r\n        }\r\n      }\r\n\r\n      return `<${tagName}${filteredAttributes}>`\r\n    })\r\n  }\r\n\r\n  private isValidAttributeValue(_attr: string, value: string): boolean {\r\n    // 检查常见的危险属性值\r\n    const dangerousPatterns = [\r\n      /javascript\\s*:/i,\r\n      /vbscript\\s*:/i,\r\n      /data\\s*:(?!image\\/)/i,\r\n      /expression\\s*\\(/i,\r\n    ]\r\n\r\n    return !dangerousPatterns.some(pattern => pattern.test(value))\r\n  }\r\n}\r\n\r\n// CSRF防护实现\r\nclass CSRFProtector {\r\n  private tokens = new Map<string, CSRFToken>()\r\n\r\n  constructor(_config: SecurityConfig['csrf'] = {}) {\r\n    // 当前实现未使用CSRF配置，保留构造参数以兼容未来扩展\r\n  }\r\n\r\n  generateToken(): CSRFToken {\r\n    const token = this.generateRandomToken()\r\n    const now = Date.now()\r\n    const expires = now + 24 * 60 * 60 * 1000 // 24小时\r\n\r\n    const csrfToken: CSRFToken = {\r\n      token,\r\n      timestamp: now,\r\n      expires,\r\n    }\r\n\r\n    this.tokens.set(token, csrfToken)\r\n\r\n    // 清理过期令牌\r\n    this.cleanupExpiredTokens()\r\n\r\n    return csrfToken\r\n  }\r\n\r\n  validateToken(token: string): boolean {\r\n    const csrfToken = this.tokens.get(token)\r\n\r\n    if (!csrfToken) {\r\n      return false\r\n    }\r\n\r\n    if (Date.now() > csrfToken.expires) {\r\n      this.tokens.delete(token)\r\n      return false\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  private generateRandomToken(): string {\r\n    const array = new Uint8Array(32)\r\n    if (typeof crypto !== 'undefined' && crypto.getRandomValues) {\r\n      crypto.getRandomValues(array)\r\n    } else {\r\n      // Fallback for environments without crypto.getRandomValues\r\n      for (let i = 0; i < array.length; i++) {\r\n        array[i] = Math.floor(Math.random() * 256)\r\n      }\r\n    }\r\n\r\n    return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join(\r\n      ''\r\n    )\r\n  }\r\n\r\n  private cleanupExpiredTokens(): void {\r\n    const now = Date.now()\r\n    for (const [token, csrfToken] of this.tokens.entries()) {\r\n      if (now > csrfToken.expires) {\r\n        this.tokens.delete(token)\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// 安全管理器实现\r\nexport class SecurityManagerImpl implements SecurityManager {\r\n  private config: Required<SecurityConfig>\r\n  private xssProtector: XSSProtector\r\n  private csrfProtector: CSRFProtector\r\n  private eventCallbacks: ((event: SecurityEvent) => void)[] = []\r\n  private engine?: Engine\r\n\r\n  constructor(config: SecurityConfig = {}, engine?: Engine) {\r\n    this.engine = engine\r\n    this.config = {\r\n      xss: {\r\n        enabled: true,\r\n        allowedTags: config.xss?.allowedTags || undefined, // 让 XSSProtector 使用默认值\r\n        allowedAttributes: config.xss?.allowedAttributes || undefined, // 让 XSSProtector 使用默认值\r\n        stripIgnoreTag: true,\r\n        ...config.xss,\r\n      },\r\n      csrf: {\r\n        enabled: true,\r\n        tokenName: '_csrf_token',\r\n        headerName: 'X-CSRF-Token',\r\n        cookieName: 'csrf_token',\r\n        sameSite: 'strict',\r\n        ...config.csrf,\r\n      },\r\n      csp: {\r\n        enabled: true,\r\n        directives: {\r\n          'default-src': [\"'self'\"],\r\n          'script-src': [\"'self'\", \"'unsafe-inline'\"],\r\n          'style-src': [\"'self'\", \"'unsafe-inline'\"],\r\n          'img-src': [\"'self'\", 'data:', 'https:'],\r\n          'font-src': [\"'self'\"],\r\n          'connect-src': [\"'self'\"],\r\n          'frame-ancestors': [\"'none'\"],\r\n        },\r\n        reportOnly: false,\r\n        reportUri: '/csp-report',\r\n        ...config.csp,\r\n      },\r\n      clickjacking: {\r\n        enabled: true,\r\n        policy: 'deny',\r\n        ...config.clickjacking,\r\n      },\r\n      https: {\r\n        enabled: true,\r\n        hsts: {\r\n          maxAge: 31536000, // 1年\r\n          includeSubDomains: true,\r\n          preload: false,\r\n          ...config.https?.hsts,\r\n        },\r\n        ...config.https,\r\n      },\r\n    }\r\n\r\n    this.xssProtector = new XSSProtector(this.config?.xss)\r\n    this.csrfProtector = new CSRFProtector(this.config?.csrf)\r\n  }\r\n\r\n  sanitizeHTML(html: string): XSSResult {\r\n    if (!this.config?.xss.enabled) {\r\n      return {\r\n        safe: true,\r\n        sanitized: html,\r\n        threats: [],\r\n      }\r\n    }\r\n\r\n    const result = this.xssProtector.sanitize(html)\r\n\r\n    if (!result.safe) {\r\n      this.reportSecurityEvent({\r\n        type: SecurityEventType.XSS_DETECTED,\r\n        message: 'XSS attempt detected and blocked',\r\n        details: {\r\n          originalHTML: html,\r\n          sanitizedHTML: result.sanitized,\r\n          threats: result.threats,\r\n        },\r\n        timestamp: Date.now(),\r\n      })\r\n    }\r\n\r\n    return result\r\n  }\r\n\r\n  sanitize(input: string): string {\r\n    return this.sanitizeHTML(input).sanitized\r\n  }\r\n\r\n  validateInput(\r\n    input: string,\r\n    type: 'html' | 'text' | 'url' = 'text'\r\n  ): boolean {\r\n    switch (type) {\r\n      case 'html':\r\n        return this.sanitizeHTML(input).safe\r\n      case 'url':\r\n        try {\r\n          // eslint-disable-next-line no-new\r\n          new URL(input)\r\n          return !input.toLowerCase().startsWith('javascript:')\r\n        } catch {\r\n          return false\r\n        }\r\n      case 'text':\r\n      default:\r\n        // 检查是否包含HTML标签或脚本\r\n        return !/<[^>]*>/.test(input) && !/javascript\\s*:/i.test(input)\r\n    }\r\n  }\r\n\r\n  generateCSRFToken(): CSRFToken {\r\n    if (!this.config?.csrf.enabled) {\r\n      throw new Error('CSRF protection is disabled')\r\n    }\r\n\r\n    return this.csrfProtector.generateToken()\r\n  }\r\n\r\n  validateCSRFToken(token: string): boolean {\r\n    if (!this.config?.csrf.enabled) {\r\n      return true\r\n    }\r\n\r\n    const isValid = this.csrfProtector.validateToken(token)\r\n\r\n    if (!isValid) {\r\n      this.reportSecurityEvent({\r\n        type: SecurityEventType.CSRF_ATTACK,\r\n        message: 'Invalid CSRF token detected',\r\n        details: { token },\r\n        timestamp: Date.now(),\r\n      })\r\n    }\r\n\r\n    return isValid\r\n  }\r\n\r\n  getCSRFToken(): string | null {\r\n    if (!this.config?.csrf.enabled) {\r\n      return null\r\n    }\r\n\r\n    // 尝试从cookie或meta标签获取\r\n    if (typeof document !== 'undefined') {\r\n      const meta = document.querySelector(\r\n        `meta[name=\"${this.config?.csrf.tokenName}\"]`\r\n      )\r\n      if (meta) {\r\n        return meta.getAttribute('content')\r\n      }\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  generateCSPHeader(): string {\r\n    if (!this.config?.csp.enabled) {\r\n      return ''\r\n    }\r\n\r\n    const directives = Object.entries(this.config?.csp.directives || {})\r\n      .map(([key, values]) => `${key} ${values.join(' ')}`)\r\n      .join('; ')\r\n\r\n    const headerName = this.config?.csp.reportOnly\r\n      ? 'Content-Security-Policy-Report-Only'\r\n      : 'Content-Security-Policy'\r\n\r\n    return `${headerName}: ${directives}`\r\n  }\r\n\r\n  reportCSPViolation(violation: unknown): void {\r\n    this.reportSecurityEvent({\r\n      type: SecurityEventType.CSP_VIOLATION,\r\n      message: 'Content Security Policy violation',\r\n      details: violation,\r\n      timestamp: Date.now(),\r\n    })\r\n  }\r\n\r\n  getSecurityHeaders(): Record<string, string> {\r\n    const headers: Record<string, string> = {}\r\n\r\n    // CSP头\r\n    if (this.config?.csp.enabled) {\r\n      const cspHeader = this.generateCSPHeader()\r\n      if (cspHeader) {\r\n        const [headerName, headerValue] = cspHeader.split(': ', 2)\r\n        headers[headerName] = headerValue\r\n      }\r\n    }\r\n\r\n    // 点击劫持防护\r\n    if (this.config?.clickjacking.enabled) {\r\n      switch (this.config?.clickjacking.policy) {\r\n        case 'deny':\r\n          headers['X-Frame-Options'] = 'DENY'\r\n          break\r\n        case 'sameorigin':\r\n          headers['X-Frame-Options'] = 'SAMEORIGIN'\r\n          break\r\n        case 'allow-from':\r\n          if (this.config?.clickjacking.allowFrom) {\r\n            headers['X-Frame-Options'] =\r\n              `ALLOW-FROM ${this.config?.clickjacking.allowFrom}`\r\n          }\r\n          break\r\n      }\r\n    }\r\n\r\n    // HTTPS相关头\r\n    if (this.config?.https.enabled) {\r\n      const { hsts } = this.config?.https\r\n      if (hsts) {\r\n        let hstsValue = `max-age=${hsts.maxAge}`\r\n        if (hsts.includeSubDomains) {\r\n          hstsValue += '; includeSubDomains'\r\n        }\r\n        if (hsts.preload) {\r\n          hstsValue += '; preload'\r\n        }\r\n        headers['Strict-Transport-Security'] = hstsValue\r\n      }\r\n    }\r\n\r\n    // 其他安全头\r\n    headers['X-Content-Type-Options'] = 'nosniff'\r\n    headers['X-XSS-Protection'] = '1; mode=block'\r\n    headers['Referrer-Policy'] = 'strict-origin-when-cross-origin'\r\n\r\n    return headers\r\n  }\r\n\r\n  onSecurityEvent(callback: (event: SecurityEvent) => void): void {\r\n    this.eventCallbacks.push(callback)\r\n  }\r\n\r\n  reportSecurityEvent(event: SecurityEvent): void {\r\n    // 记录到引擎日志\r\n    if (this.engine?.logger) {\r\n      this.engine.logger.warn('Security event detected', event)\r\n    }\r\n\r\n    // 触发事件回调\r\n    this.eventCallbacks.forEach(callback => {\r\n      try {\r\n        callback(event)\r\n      } catch (error) {\r\n        if (this.engine?.logger) {\r\n          this.engine.logger.error('Error in security event callback', error)\r\n        }\r\n      }\r\n    })\r\n\r\n    // 发送到引擎事件系统\r\n    if (this.engine?.events) {\r\n      this.engine.events.emit('security:event', event)\r\n    }\r\n  }\r\n\r\n  updateConfig(config: Partial<SecurityConfig>): void {\r\n    this.config = {\r\n      ...this.config,\r\n      ...config,\r\n      xss: { ...this.config?.xss, ...config.xss },\r\n      csrf: { ...this.config?.csrf, ...config.csrf },\r\n      csp: { ...this.config?.csp, ...config.csp },\r\n      clickjacking: { ...this.config?.clickjacking, ...config.clickjacking },\r\n      https: { ...this.config?.https, ...config.https },\r\n    }\r\n\r\n    // 重新初始化保护器\r\n    this.xssProtector = new XSSProtector(this.config?.xss)\r\n    this.csrfProtector = new CSRFProtector(this.config?.csrf)\r\n  }\r\n\r\n  getConfig(): SecurityConfig {\r\n    return JSON.parse(JSON.stringify(this.config))\r\n  }\r\n}\r\n\r\n// 创建安全管理器\r\nexport function createSecurityManager(\r\n  config?: SecurityConfig,\r\n  engine?: Engine\r\n): SecurityManager {\r\n  return new SecurityManagerImpl(config, engine)\r\n}\r\n"],"names":["SecurityEventType"],"mappings":"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"}